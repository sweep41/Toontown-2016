1399435403
2 2
12 libp3linmath 4 Ns0b 4 core 
1165
1616 12 ~MathNumbers 0 4 2781 25 MathNumbers::~MathNumbers 0 0 0
32
MathNumbers::~MathNumbers(void);

1617 9 deg_2_rad 0 1 0 9 deg_2_rad 0 2 1481 1482 0
67
inline double deg_2_rad(double f);
inline float deg_2_rad(float f);

1618 9 rad_2_deg 0 1 0 9 rad_2_deg 0 2 1483 1484 0
67
inline double rad_2_deg(double f);
inline float rad_2_deg(float f);

1619 10 LVecBase2f 0 4 2782 22 LVecBase2f::LVecBase2f 0 4 1 2 3 4 1392
// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
189
inline LVecBase2f::LVecBase2f(void);
inline LVecBase2f::LVecBase2f(LVecBase2f const &copy);
inline LVecBase2f::LVecBase2f(float fill_value);
inline LVecBase2f::LVecBase2f(float x, float y);

1620 10 operator = 0 4 2782 22 LVecBase2f::operator = 0 2 5 6 470
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase2f &LVecBase2f::operator =(LVecBase2f const &copy);
inline LVecBase2f &LVecBase2f::operator =(float fill_value);

1621 12 operator new 0 4 2782 24 LVecBase2f::operator new 0 1 7 0
126
inline void *LVecBase2f::operator new(unsigned int size);
inline void *LVecBase2f::operator new(unsigned int size, void *ptr);

1622 15 operator delete 0 4 2782 27 LVecBase2f::operator delete 0 0 0
108
inline void LVecBase2f::operator delete(void *ptr);
inline void LVecBase2f::operator delete(void *, void *);

1623 12 validate_ptr 0 4 2782 24 LVecBase2f::validate_ptr 0 0 0
61
static inline bool LVecBase2f::validate_ptr(void const *ptr);

1624 4 zero 0 4 2782 16 LVecBase2f::zero 0 1 8 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2f const &LVecBase2f::zero(void);

1625 6 unit_x 0 4 2782 18 LVecBase2f::unit_x 0 1 9 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_x(void);

1626 6 unit_y 0 4 2782 18 LVecBase2f::unit_y 0 1 10 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_y(void);

1627 11 ~LVecBase2f 0 4 2782 23 LVecBase2f::~LVecBase2f 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2f::~LVecBase2f(void);

1628 10 __reduce__ 0 4 2782 22 LVecBase2f::__reduce__ 0 1 11 0
62
inline PyObject *LVecBase2f::__reduce__(PyObject *self) const;

1629 11 __getattr__ 0 4 2782 23 LVecBase2f::__getattr__ 0 1 12 0
86
inline PyObject *LVecBase2f::__getattr__(basic_string< char > const &attr_name) const;

1630 11 __setattr__ 0 4 2782 23 LVecBase2f::__setattr__ 0 1 13 0
108
inline int LVecBase2f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1631 11 operator [] 0 4 2782 23 LVecBase2f::operator [] 0 2 14 15 456
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase2f::operator [](int i) const;
inline float &LVecBase2f::operator [](int i);

1632 11 __setitem__ 0 4 2782 23 LVecBase2f::__setitem__ 0 1 16 0
52
inline void LVecBase2f::__setitem__(int i, float v);

1633 4 size 0 4 2782 16 LVecBase2f::size 0 1 17 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2f::size(void);

1634 6 is_nan 0 4 2782 18 LVecBase2f::is_nan 0 1 18 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2f::is_nan(void) const;

1635 8 get_cell 0 4 2782 20 LVecBase2f::get_cell 0 1 19 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase2f::get_cell(int i) const;

1636 5 get_x 0 4 2782 17 LVecBase2f::get_x 0 1 20 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_x(void) const;

1637 5 get_y 0 4 2782 17 LVecBase2f::get_y 0 1 21 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_y(void) const;

1638 8 set_cell 0 4 2782 20 LVecBase2f::set_cell 0 1 22 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase2f::set_cell(int i, float value);

1639 5 set_x 0 4 2782 17 LVecBase2f::set_x 0 1 23 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_x(float value);

1640 5 set_y 0 4 2782 17 LVecBase2f::set_y 0 1 24 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_y(float value);

1641 11 add_to_cell 0 4 2782 23 LVecBase2f::add_to_cell 0 1 25 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase2f::add_to_cell(int i, float value);

1642 5 add_x 0 4 2782 17 LVecBase2f::add_x 0 1 26 371
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_x(float value);

1643 5 add_y 0 4 2782 17 LVecBase2f::add_y 0 1 27 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_y(float value);

1644 8 get_data 0 4 2782 20 LVecBase2f::get_data 0 1 28 395
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase2f::get_data(void) const;

1645 18 get_num_components 0 4 2782 30 LVecBase2f::get_num_components 0 1 29 279
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2f::get_num_components(void) const;

1646 4 fill 0 4 2782 16 LVecBase2f::fill 0 1 30 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase2f::fill(float fill_value);

1647 3 set 0 4 2782 15 LVecBase2f::set 0 1 31 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void LVecBase2f::set(float x, float y);

1648 6 length 0 4 2782 18 LVecBase2f::length 0 1 32 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase2f::length(void) const;

1649 14 length_squared 0 4 2782 26 LVecBase2f::length_squared 0 1 33 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase2f::length_squared(void) const;

1650 9 normalize 0 4 2782 21 LVecBase2f::normalize 0 1 34 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2f::normalize(void);

1651 3 dot 0 4 2782 15 LVecBase2f::dot 0 1 35 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase2f::dot(LVecBase2f const &other) const;

1652 7 project 0 4 2782 19 LVecBase2f::project 0 1 36 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LVecBase2f::project(LVecBase2f const &onto) const;

1653 10 operator < 0 4 2782 22 LVecBase2f::operator < 0 1 37 498
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase2f::operator <(LVecBase2f const &other) const;

1654 11 operator == 0 4 2782 23 LVecBase2f::operator == 0 1 38 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2f::operator ==(LVecBase2f const &other) const;

1655 11 operator != 0 4 2782 23 LVecBase2f::operator != 0 1 39 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2f::operator !=(LVecBase2f const &other) const;

1656 10 compare_to 0 4 2782 22 LVecBase2f::compare_to 0 2 40 41 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase2f::compare_to(LVecBase2f const &other) const;
inline int LVecBase2f::compare_to(LVecBase2f const &other, float threshold) const;

1657 8 get_hash 0 4 2782 20 LVecBase2f::get_hash 0 2 42 43 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase2f::get_hash(void) const;
inline unsigned int LVecBase2f::get_hash(float threshold) const;

1658 8 add_hash 0 4 2782 20 LVecBase2f::add_hash 0 2 44 45 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase2f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase2f::add_hash(unsigned int hash, float threshold) const;

1659 10 operator - 0 68 2782 22 LVecBase2f::operator - 0 1 46 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LVecBase2f::operator -(void) const;

1660 10 operator + 0 4 2782 22 LVecBase2f::operator + 0 1 47 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2f LVecBase2f::operator +(LVecBase2f const &other) const;

1661 10 operator - 0 4 2782 22 LVecBase2f::operator - 0 1 48 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2f LVecBase2f::operator -(LVecBase2f const &other) const;

1662 10 operator * 0 4 2782 22 LVecBase2f::operator * 0 1 49 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase2f LVecBase2f::operator *(float scalar) const;

1663 10 operator / 0 4 2782 22 LVecBase2f::operator / 0 1 50 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase2f LVecBase2f::operator /(float scalar) const;

1664 11 operator += 0 4 2782 23 LVecBase2f::operator += 0 1 51 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2f::operator +=(LVecBase2f const &other);

1665 11 operator -= 0 4 2782 23 LVecBase2f::operator -= 0 1 52 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2f::operator -=(LVecBase2f const &other);

1666 11 operator *= 0 4 2782 23 LVecBase2f::operator *= 0 1 53 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase2f::operator *=(float scalar);

1667 11 operator /= 0 4 2782 23 LVecBase2f::operator /= 0 1 54 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase2f::operator /=(float scalar);

1668 4 fmax 0 4 2782 16 LVecBase2f::fmax 0 1 55 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2f LVecBase2f::fmax(LVecBase2f const &other);

1669 4 fmin 0 4 2782 16 LVecBase2f::fmin 0 1 56 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2f LVecBase2f::fmin(LVecBase2f const &other);

1670 12 almost_equal 0 4 2782 24 LVecBase2f::almost_equal 0 2 57 58 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase2f::almost_equal(LVecBase2f const &other, float threshold) const;
inline bool LVecBase2f::almost_equal(LVecBase2f const &other) const;

1671 6 output 0 4 2782 18 LVecBase2f::output 0 1 59 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2f::output(ostream &out) const;

1672 11 python_repr 0 4 2782 23 LVecBase2f::python_repr 0 1 60 0
96
inline void LVecBase2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1673 13 generate_hash 0 4 2782 25 LVecBase2f::generate_hash 0 2 61 62 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase2f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase2f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

1674 20 write_datagram_fixed 0 4 2782 32 LVecBase2f::write_datagram_fixed 0 1 63 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase2f::write_datagram_fixed(Datagram &destination) const;

1675 19 read_datagram_fixed 0 4 2782 31 LVecBase2f::read_datagram_fixed 0 1 64 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase2f::read_datagram_fixed(DatagramIterator &source);

1676 14 write_datagram 0 4 2782 26 LVecBase2f::write_datagram 0 1 65 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2f::write_datagram(Datagram &destination) const;

1677 13 read_datagram 0 4 2782 25 LVecBase2f::read_datagram 0 1 66 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase2f::read_datagram(DatagramIterator &source);

1678 14 get_class_type 0 4 2782 26 LVecBase2f::get_class_type 0 1 67 0
51
static TypeHandle LVecBase2f::get_class_type(void);

1679 10 LVecBase2d 0 4 2783 22 LVecBase2d::LVecBase2d 0 4 68 69 70 71 1392
// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
192
inline LVecBase2d::LVecBase2d(void);
inline LVecBase2d::LVecBase2d(LVecBase2d const &copy);
inline LVecBase2d::LVecBase2d(double fill_value);
inline LVecBase2d::LVecBase2d(double x, double y);

1680 10 operator = 0 4 2783 22 LVecBase2d::operator = 0 2 72 73 470
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase2d &LVecBase2d::operator =(LVecBase2d const &copy);
inline LVecBase2d &LVecBase2d::operator =(double fill_value);

1681 12 operator new 0 4 2783 24 LVecBase2d::operator new 0 1 74 0
126
inline void *LVecBase2d::operator new(unsigned int size);
inline void *LVecBase2d::operator new(unsigned int size, void *ptr);

1682 15 operator delete 0 4 2783 27 LVecBase2d::operator delete 0 0 0
108
inline void LVecBase2d::operator delete(void *ptr);
inline void LVecBase2d::operator delete(void *, void *);

1683 12 validate_ptr 0 4 2783 24 LVecBase2d::validate_ptr 0 0 0
61
static inline bool LVecBase2d::validate_ptr(void const *ptr);

1684 4 zero 0 4 2783 16 LVecBase2d::zero 0 1 75 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2d const &LVecBase2d::zero(void);

1685 6 unit_x 0 4 2783 18 LVecBase2d::unit_x 0 1 76 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_x(void);

1686 6 unit_y 0 4 2783 18 LVecBase2d::unit_y 0 1 77 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_y(void);

1687 11 ~LVecBase2d 0 4 2783 23 LVecBase2d::~LVecBase2d 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2d::~LVecBase2d(void);

1688 10 __reduce__ 0 4 2783 22 LVecBase2d::__reduce__ 0 1 78 0
62
inline PyObject *LVecBase2d::__reduce__(PyObject *self) const;

1689 11 __getattr__ 0 4 2783 23 LVecBase2d::__getattr__ 0 1 79 0
86
inline PyObject *LVecBase2d::__getattr__(basic_string< char > const &attr_name) const;

1690 11 __setattr__ 0 4 2783 23 LVecBase2d::__setattr__ 0 1 80 0
108
inline int LVecBase2d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1691 11 operator [] 0 4 2783 23 LVecBase2d::operator [] 0 2 81 82 456
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase2d::operator [](int i) const;
inline double &LVecBase2d::operator [](int i);

1692 11 __setitem__ 0 4 2783 23 LVecBase2d::__setitem__ 0 1 83 0
53
inline void LVecBase2d::__setitem__(int i, double v);

1693 4 size 0 4 2783 16 LVecBase2d::size 0 1 84 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2d::size(void);

1694 6 is_nan 0 4 2783 18 LVecBase2d::is_nan 0 1 85 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2d::is_nan(void) const;

1695 8 get_cell 0 4 2783 20 LVecBase2d::get_cell 0 1 86 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase2d::get_cell(int i) const;

1696 5 get_x 0 4 2783 17 LVecBase2d::get_x 0 1 87 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_x(void) const;

1697 5 get_y 0 4 2783 17 LVecBase2d::get_y 0 1 88 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_y(void) const;

1698 8 set_cell 0 4 2783 20 LVecBase2d::set_cell 0 1 89 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase2d::set_cell(int i, double value);

1699 5 set_x 0 4 2783 17 LVecBase2d::set_x 0 1 90 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_x(double value);

1700 5 set_y 0 4 2783 17 LVecBase2d::set_y 0 1 91 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_y(double value);

1701 11 add_to_cell 0 4 2783 23 LVecBase2d::add_to_cell 0 1 92 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase2d::add_to_cell(int i, double value);

1702 5 add_x 0 4 2783 17 LVecBase2d::add_x 0 1 93 371
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_x(double value);

1703 5 add_y 0 4 2783 17 LVecBase2d::add_y 0 1 94 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_y(double value);

1704 8 get_data 0 4 2783 20 LVecBase2d::get_data 0 1 95 395
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase2d::get_data(void) const;

1705 18 get_num_components 0 4 2783 30 LVecBase2d::get_num_components 0 1 96 279
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2d::get_num_components(void) const;

1706 4 fill 0 4 2783 16 LVecBase2d::fill 0 1 97 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::fill(double fill_value);

1707 3 set 0 4 2783 15 LVecBase2d::set 0 1 98 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::set(double x, double y);

1708 6 length 0 4 2783 18 LVecBase2d::length 0 1 99 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase2d::length(void) const;

1709 14 length_squared 0 4 2783 26 LVecBase2d::length_squared 0 1 100 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase2d::length_squared(void) const;

1710 9 normalize 0 4 2783 21 LVecBase2d::normalize 0 1 101 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2d::normalize(void);

1711 3 dot 0 4 2783 15 LVecBase2d::dot 0 1 102 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase2d::dot(LVecBase2d const &other) const;

1712 7 project 0 4 2783 19 LVecBase2d::project 0 1 103 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LVecBase2d::project(LVecBase2d const &onto) const;

1713 10 operator < 0 4 2783 22 LVecBase2d::operator < 0 1 104 498
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase2d::operator <(LVecBase2d const &other) const;

1714 11 operator == 0 4 2783 23 LVecBase2d::operator == 0 1 105 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2d::operator ==(LVecBase2d const &other) const;

1715 11 operator != 0 4 2783 23 LVecBase2d::operator != 0 1 106 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2d::operator !=(LVecBase2d const &other) const;

1716 10 compare_to 0 4 2783 22 LVecBase2d::compare_to 0 2 107 108 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase2d::compare_to(LVecBase2d const &other) const;
inline int LVecBase2d::compare_to(LVecBase2d const &other, double threshold) const;

1717 8 get_hash 0 4 2783 20 LVecBase2d::get_hash 0 2 109 110 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase2d::get_hash(void) const;
inline unsigned int LVecBase2d::get_hash(double threshold) const;

1718 8 add_hash 0 4 2783 20 LVecBase2d::add_hash 0 2 111 112 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase2d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase2d::add_hash(unsigned int hash, double threshold) const;

1719 10 operator - 0 68 2783 22 LVecBase2d::operator - 0 1 113 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LVecBase2d::operator -(void) const;

1720 10 operator + 0 4 2783 22 LVecBase2d::operator + 0 1 114 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2d LVecBase2d::operator +(LVecBase2d const &other) const;

1721 10 operator - 0 4 2783 22 LVecBase2d::operator - 0 1 115 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2d LVecBase2d::operator -(LVecBase2d const &other) const;

1722 10 operator * 0 4 2783 22 LVecBase2d::operator * 0 1 116 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase2d LVecBase2d::operator *(double scalar) const;

1723 10 operator / 0 4 2783 22 LVecBase2d::operator / 0 1 117 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase2d LVecBase2d::operator /(double scalar) const;

1724 11 operator += 0 4 2783 23 LVecBase2d::operator += 0 1 118 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2d::operator +=(LVecBase2d const &other);

1725 11 operator -= 0 4 2783 23 LVecBase2d::operator -= 0 1 119 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2d::operator -=(LVecBase2d const &other);

1726 11 operator *= 0 4 2783 23 LVecBase2d::operator *= 0 1 120 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::operator *=(double scalar);

1727 11 operator /= 0 4 2783 23 LVecBase2d::operator /= 0 1 121 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::operator /=(double scalar);

1728 4 fmax 0 4 2783 16 LVecBase2d::fmax 0 1 122 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2d LVecBase2d::fmax(LVecBase2d const &other);

1729 4 fmin 0 4 2783 16 LVecBase2d::fmin 0 1 123 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2d LVecBase2d::fmin(LVecBase2d const &other);

1730 12 almost_equal 0 4 2783 24 LVecBase2d::almost_equal 0 2 124 125 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase2d::almost_equal(LVecBase2d const &other, double threshold) const;
inline bool LVecBase2d::almost_equal(LVecBase2d const &other) const;

1731 6 output 0 4 2783 18 LVecBase2d::output 0 1 126 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::output(ostream &out) const;

1732 11 python_repr 0 4 2783 23 LVecBase2d::python_repr 0 1 127 0
96
inline void LVecBase2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1733 13 generate_hash 0 4 2783 25 LVecBase2d::generate_hash 0 2 128 129 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase2d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase2d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

1734 20 write_datagram_fixed 0 4 2783 32 LVecBase2d::write_datagram_fixed 0 1 130 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase2d::write_datagram_fixed(Datagram &destination) const;

1735 19 read_datagram_fixed 0 4 2783 31 LVecBase2d::read_datagram_fixed 0 1 131 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase2d::read_datagram_fixed(DatagramIterator &source);

1736 14 write_datagram 0 4 2783 26 LVecBase2d::write_datagram 0 1 132 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2d::write_datagram(Datagram &destination) const;

1737 13 read_datagram 0 4 2783 25 LVecBase2d::read_datagram 0 1 133 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase2d::read_datagram(DatagramIterator &source);

1738 14 get_class_type 0 4 2783 26 LVecBase2d::get_class_type 0 1 134 0
51
static TypeHandle LVecBase2d::get_class_type(void);

1739 9 LVector2f 0 4 2784 20 LVector2f::LVector2f 0 4 135 136 137 138 1375
// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
181
inline LVector2f::LVector2f(void);
inline LVector2f::LVector2f(LVecBase2f const &copy);
inline LVector2f::LVector2f(float fill_value);
inline LVector2f::LVector2f(float x, float y);

1740 10 operator = 0 4 2784 21 LVector2f::operator = 0 2 139 140 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector2f &LVector2f::operator =(LVecBase2f const &copy);
inline LVector2f &LVector2f::operator =(float fill_value);

1741 11 __getattr__ 0 4 2784 22 LVector2f::__getattr__ 0 1 141 0
85
inline PyObject *LVector2f::__getattr__(basic_string< char > const &attr_name) const;

1742 11 __setattr__ 0 4 2784 22 LVector2f::__setattr__ 0 1 142 0
107
inline int LVector2f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1743 4 zero 0 4 2784 15 LVector2f::zero 0 1 143 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2f const &LVector2f::zero(void);

1744 6 unit_x 0 4 2784 17 LVector2f::unit_x 0 1 144 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_x(void);

1745 6 unit_y 0 4 2784 17 LVector2f::unit_y 0 1 145 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_y(void);

1746 10 operator - 0 68 2784 21 LVector2f::operator - 0 1 146 213
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector2f LVector2f::operator -(void) const;

1747 10 operator + 0 4 2784 21 LVector2f::operator + 0 2 147 148 445
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2f LVector2f::operator +(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator +(LVector2f const &other) const;

1748 10 operator - 0 4 2784 21 LVector2f::operator - 0 2 149 150 445
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2f LVector2f::operator -(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator -(LVector2f const &other) const;

1749 10 operator * 0 4 2784 21 LVector2f::operator * 0 1 151 223
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector2f LVector2f::operator *(float scalar) const;

1750 10 operator / 0 4 2784 21 LVector2f::operator / 0 1 152 223
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector2f LVector2f::operator /(float scalar) const;

1751 7 project 0 4 2784 18 LVector2f::project 0 1 153 389
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2f LVector2f::project(LVecBase2f const &onto) const;

1752 16 signed_angle_rad 0 4 2784 27 LVector2f::signed_angle_rad 0 1 154 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_rad(LVector2f const &other) const;

1753 16 signed_angle_deg 0 4 2784 27 LVector2f::signed_angle_deg 0 1 155 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_deg(LVector2f const &other) const;

1754 11 python_repr 0 4 2784 22 LVector2f::python_repr 0 1 156 0
95
inline void LVector2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1755 14 get_class_type 0 4 2784 25 LVector2f::get_class_type 0 1 157 0
50
static TypeHandle LVector2f::get_class_type(void);

1756 10 ~LVector2f 0 4 2784 21 LVector2f::~LVector2f 0 0 0
28
LVector2f::~LVector2f(void);

1757 9 LVector2d 0 4 2785 20 LVector2d::LVector2d 0 4 158 159 160 161 1375
// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
184
inline LVector2d::LVector2d(void);
inline LVector2d::LVector2d(LVecBase2d const &copy);
inline LVector2d::LVector2d(double fill_value);
inline LVector2d::LVector2d(double x, double y);

1758 10 operator = 0 4 2785 21 LVector2d::operator = 0 2 162 163 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector2d &LVector2d::operator =(LVecBase2d const &copy);
inline LVector2d &LVector2d::operator =(double fill_value);

1759 11 __getattr__ 0 4 2785 22 LVector2d::__getattr__ 0 1 164 0
85
inline PyObject *LVector2d::__getattr__(basic_string< char > const &attr_name) const;

1760 11 __setattr__ 0 4 2785 22 LVector2d::__setattr__ 0 1 165 0
107
inline int LVector2d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1761 4 zero 0 4 2785 15 LVector2d::zero 0 1 166 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2d const &LVector2d::zero(void);

1762 6 unit_x 0 4 2785 17 LVector2d::unit_x 0 1 167 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_x(void);

1763 6 unit_y 0 4 2785 17 LVector2d::unit_y 0 1 168 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_y(void);

1764 10 operator - 0 68 2785 21 LVector2d::operator - 0 1 169 213
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector2d LVector2d::operator -(void) const;

1765 10 operator + 0 4 2785 21 LVector2d::operator + 0 2 170 171 445
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2d LVector2d::operator +(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator +(LVector2d const &other) const;

1766 10 operator - 0 4 2785 21 LVector2d::operator - 0 2 172 173 445
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2d LVector2d::operator -(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator -(LVector2d const &other) const;

1767 10 operator * 0 4 2785 21 LVector2d::operator * 0 1 174 223
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector2d LVector2d::operator *(double scalar) const;

1768 10 operator / 0 4 2785 21 LVector2d::operator / 0 1 175 223
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector2d LVector2d::operator /(double scalar) const;

1769 7 project 0 4 2785 18 LVector2d::project 0 1 176 389
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2d LVector2d::project(LVecBase2d const &onto) const;

1770 16 signed_angle_rad 0 4 2785 27 LVector2d::signed_angle_rad 0 1 177 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_rad(LVector2d const &other) const;

1771 16 signed_angle_deg 0 4 2785 27 LVector2d::signed_angle_deg 0 1 178 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_deg(LVector2d const &other) const;

1772 11 python_repr 0 4 2785 22 LVector2d::python_repr 0 1 179 0
95
inline void LVector2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1773 14 get_class_type 0 4 2785 25 LVector2d::get_class_type 0 1 180 0
50
static TypeHandle LVector2d::get_class_type(void);

1774 10 ~LVector2d 0 4 2785 21 LVector2d::~LVector2d 0 0 0
28
LVector2d::~LVector2d(void);

1775 8 LPoint2f 0 4 2786 18 LPoint2f::LPoint2f 0 4 181 182 183 184 1370
// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
173
inline LPoint2f::LPoint2f(void);
inline LPoint2f::LPoint2f(LVecBase2f const &copy);
inline LPoint2f::LPoint2f(float fill_value);
inline LPoint2f::LPoint2f(float x, float y);

1776 10 operator = 0 4 2786 20 LPoint2f::operator = 0 2 185 186 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint2f &LPoint2f::operator =(LVecBase2f const &copy);
inline LPoint2f &LPoint2f::operator =(float fill_value);

1777 11 __getattr__ 0 4 2786 21 LPoint2f::__getattr__ 0 1 187 0
84
inline PyObject *LPoint2f::__getattr__(basic_string< char > const &attr_name) const;

1778 11 __setattr__ 0 4 2786 21 LPoint2f::__setattr__ 0 1 188 0
106
inline int LPoint2f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1779 4 zero 0 4 2786 14 LPoint2f::zero 0 1 189 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2f const &LPoint2f::zero(void);

1780 6 unit_x 0 4 2786 16 LPoint2f::unit_x 0 1 190 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_x(void);

1781 6 unit_y 0 4 2786 16 LPoint2f::unit_y 0 1 191 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_y(void);

1782 10 operator - 0 68 2786 20 LPoint2f::operator - 0 1 192 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint2f LPoint2f::operator -(void) const;

1783 10 operator + 0 4 2786 20 LPoint2f::operator + 0 2 193 194 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase2f LPoint2f::operator +(LVecBase2f const &other) const;
inline LPoint2f LPoint2f::operator +(LVector2f const &other) const;

1784 10 operator - 0 4 2786 20 LPoint2f::operator - 0 3 195 196 197 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase2f LPoint2f::operator -(LVecBase2f const &other) const;
inline LVector2f LPoint2f::operator -(LPoint2f const &other) const;
inline LPoint2f LPoint2f::operator -(LVector2f const &other) const;

1785 10 operator * 0 4 2786 20 LPoint2f::operator * 0 1 198 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint2f LPoint2f::operator *(float scalar) const;

1786 10 operator / 0 4 2786 20 LPoint2f::operator / 0 1 199 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint2f LPoint2f::operator /(float scalar) const;

1787 7 project 0 4 2786 17 LPoint2f::project 0 1 200 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2f LPoint2f::project(LVecBase2f const &onto) const;

1788 11 python_repr 0 4 2786 21 LPoint2f::python_repr 0 1 201 0
94
inline void LPoint2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1789 14 get_class_type 0 4 2786 24 LPoint2f::get_class_type 0 1 202 0
49
static TypeHandle LPoint2f::get_class_type(void);

1790 9 ~LPoint2f 0 4 2786 19 LPoint2f::~LPoint2f 0 0 0
26
LPoint2f::~LPoint2f(void);

1791 8 LPoint2d 0 4 2787 18 LPoint2d::LPoint2d 0 4 203 204 205 206 1370
// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
176
inline LPoint2d::LPoint2d(void);
inline LPoint2d::LPoint2d(LVecBase2d const &copy);
inline LPoint2d::LPoint2d(double fill_value);
inline LPoint2d::LPoint2d(double x, double y);

1792 10 operator = 0 4 2787 20 LPoint2d::operator = 0 2 207 208 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint2d &LPoint2d::operator =(LVecBase2d const &copy);
inline LPoint2d &LPoint2d::operator =(double fill_value);

1793 11 __getattr__ 0 4 2787 21 LPoint2d::__getattr__ 0 1 209 0
84
inline PyObject *LPoint2d::__getattr__(basic_string< char > const &attr_name) const;

1794 11 __setattr__ 0 4 2787 21 LPoint2d::__setattr__ 0 1 210 0
106
inline int LPoint2d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1795 4 zero 0 4 2787 14 LPoint2d::zero 0 1 211 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2d const &LPoint2d::zero(void);

1796 6 unit_x 0 4 2787 16 LPoint2d::unit_x 0 1 212 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_x(void);

1797 6 unit_y 0 4 2787 16 LPoint2d::unit_y 0 1 213 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_y(void);

1798 10 operator - 0 68 2787 20 LPoint2d::operator - 0 1 214 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint2d LPoint2d::operator -(void) const;

1799 10 operator + 0 4 2787 20 LPoint2d::operator + 0 2 215 216 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase2d LPoint2d::operator +(LVecBase2d const &other) const;
inline LPoint2d LPoint2d::operator +(LVector2d const &other) const;

1800 10 operator - 0 4 2787 20 LPoint2d::operator - 0 3 217 218 219 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase2d LPoint2d::operator -(LVecBase2d const &other) const;
inline LVector2d LPoint2d::operator -(LPoint2d const &other) const;
inline LPoint2d LPoint2d::operator -(LVector2d const &other) const;

1801 10 operator * 0 4 2787 20 LPoint2d::operator * 0 1 220 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint2d LPoint2d::operator *(double scalar) const;

1802 10 operator / 0 4 2787 20 LPoint2d::operator / 0 1 221 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint2d LPoint2d::operator /(double scalar) const;

1803 7 project 0 4 2787 17 LPoint2d::project 0 1 222 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2d LPoint2d::project(LVecBase2d const &onto) const;

1804 11 python_repr 0 4 2787 21 LPoint2d::python_repr 0 1 223 0
94
inline void LPoint2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1805 14 get_class_type 0 4 2787 24 LPoint2d::get_class_type 0 1 224 0
49
static TypeHandle LPoint2d::get_class_type(void);

1806 9 ~LPoint2d 0 4 2787 19 LPoint2d::~LPoint2d 0 0 0
26
LPoint2d::~LPoint2d(void);

1807 10 LVecBase3f 0 4 2788 22 LVecBase3f::LVecBase3f 0 4 225 226 227 228 1380
// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
198
inline LVecBase3f::LVecBase3f(void);
inline LVecBase3f::LVecBase3f(LVecBase3f const &copy);
inline LVecBase3f::LVecBase3f(float fill_value);
inline LVecBase3f::LVecBase3f(float x, float y, float z);

1808 10 operator = 0 4 2788 22 LVecBase3f::operator = 0 2 229 230 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase3f &LVecBase3f::operator =(LVecBase3f const &copy);
inline LVecBase3f &LVecBase3f::operator =(float fill_value);

1809 12 operator new 0 4 2788 24 LVecBase3f::operator new 0 1 231 0
126
inline void *LVecBase3f::operator new(unsigned int size);
inline void *LVecBase3f::operator new(unsigned int size, void *ptr);

1810 15 operator delete 0 4 2788 27 LVecBase3f::operator delete 0 0 0
108
inline void LVecBase3f::operator delete(void *ptr);
inline void LVecBase3f::operator delete(void *, void *);

1811 12 validate_ptr 0 4 2788 24 LVecBase3f::validate_ptr 0 0 0
61
static inline bool LVecBase3f::validate_ptr(void const *ptr);

1812 4 zero 0 4 2788 16 LVecBase3f::zero 0 1 232 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3f const &LVecBase3f::zero(void);

1813 6 unit_x 0 4 2788 18 LVecBase3f::unit_x 0 1 233 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_x(void);

1814 6 unit_y 0 4 2788 18 LVecBase3f::unit_y 0 1 234 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_y(void);

1815 6 unit_z 0 4 2788 18 LVecBase3f::unit_z 0 1 235 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_z(void);

1816 11 ~LVecBase3f 0 4 2788 23 LVecBase3f::~LVecBase3f 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3f::~LVecBase3f(void);

1817 10 __reduce__ 0 4 2788 22 LVecBase3f::__reduce__ 0 1 236 0
62
inline PyObject *LVecBase3f::__reduce__(PyObject *self) const;

1818 11 __getattr__ 0 4 2788 23 LVecBase3f::__getattr__ 0 1 237 0
86
inline PyObject *LVecBase3f::__getattr__(basic_string< char > const &attr_name) const;

1819 11 __setattr__ 0 4 2788 23 LVecBase3f::__setattr__ 0 1 238 0
108
inline int LVecBase3f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1820 11 operator [] 0 4 2788 23 LVecBase3f::operator [] 0 2 239 240 450
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase3f::operator [](int i) const;
inline float &LVecBase3f::operator [](int i);

1821 11 __setitem__ 0 4 2788 23 LVecBase3f::__setitem__ 0 1 241 0
52
inline void LVecBase3f::__setitem__(int i, float v);

1822 4 size 0 4 2788 16 LVecBase3f::size 0 1 242 271
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3f::size(void);

1823 6 is_nan 0 4 2788 18 LVecBase3f::is_nan 0 1 243 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3f::is_nan(void) const;

1824 8 get_cell 0 4 2788 20 LVecBase3f::get_cell 0 1 244 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase3f::get_cell(int i) const;

1825 5 get_x 0 4 2788 17 LVecBase3f::get_x 0 1 245 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_x(void) const;

1826 5 get_y 0 4 2788 17 LVecBase3f::get_y 0 1 246 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_y(void) const;

1827 5 get_z 0 4 2788 17 LVecBase3f::get_z 0 1 247 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_z(void) const;

1828 8 set_cell 0 4 2788 20 LVecBase3f::set_cell 0 1 248 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase3f::set_cell(int i, float value);

1829 5 set_x 0 4 2788 17 LVecBase3f::set_x 0 1 249 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_x(float value);

1830 5 set_y 0 4 2788 17 LVecBase3f::set_y 0 1 250 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_y(float value);

1831 5 set_z 0 4 2788 17 LVecBase3f::set_z 0 1 251 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_z(float value);

1832 6 get_xy 0 4 2788 18 LVecBase3f::get_xy 0 1 252 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xy(void) const;

1833 6 get_xz 0 4 2788 18 LVecBase3f::get_xz 0 1 253 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xz(void) const;

1834 6 get_yz 0 4 2788 18 LVecBase3f::get_yz 0 1 254 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_yz(void) const;

1835 11 add_to_cell 0 4 2788 23 LVecBase3f::add_to_cell 0 1 255 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase3f::add_to_cell(int i, float value);

1836 5 add_x 0 4 2788 17 LVecBase3f::add_x 0 1 256 368
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_x(float value);

1837 5 add_y 0 4 2788 17 LVecBase3f::add_y 0 1 257 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_y(float value);

1838 5 add_z 0 4 2788 17 LVecBase3f::add_z 0 1 258 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_z(float value);

1839 8 get_data 0 4 2788 20 LVecBase3f::get_data 0 1 259 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase3f::get_data(void) const;

1840 18 get_num_components 0 4 2788 30 LVecBase3f::get_num_components 0 1 260 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3f::get_num_components(void) const;

1841 4 fill 0 4 2788 16 LVecBase3f::fill 0 1 261 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase3f::fill(float fill_value);

1842 3 set 0 4 2788 15 LVecBase3f::set 0 1 262 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void LVecBase3f::set(float x, float y, float z);

1843 6 length 0 4 2788 18 LVecBase3f::length 0 1 263 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase3f::length(void) const;

1844 14 length_squared 0 4 2788 26 LVecBase3f::length_squared 0 1 264 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase3f::length_squared(void) const;

1845 9 normalize 0 4 2788 21 LVecBase3f::normalize 0 1 265 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3f::normalize(void);

1846 3 dot 0 4 2788 15 LVecBase3f::dot 0 1 266 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase3f::dot(LVecBase3f const &other) const;

1847 5 cross 0 4 2788 17 LVecBase3f::cross 0 1 267 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3f LVecBase3f::cross(LVecBase3f const &other) const;

1848 7 project 0 4 2788 19 LVecBase3f::project 0 1 268 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LVecBase3f::project(LVecBase3f const &onto) const;

1849 10 operator < 0 4 2788 22 LVecBase3f::operator < 0 1 269 498
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase3f::operator <(LVecBase3f const &other) const;

1850 11 operator == 0 4 2788 23 LVecBase3f::operator == 0 1 270 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3f::operator ==(LVecBase3f const &other) const;

1851 11 operator != 0 4 2788 23 LVecBase3f::operator != 0 1 271 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3f::operator !=(LVecBase3f const &other) const;

1852 20 get_standardized_hpr 0 4 2788 32 LVecBase3f::get_standardized_hpr 0 1 272 1030
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3f LVecBase3f::get_standardized_hpr(void) const;

1853 10 compare_to 0 4 2788 22 LVecBase3f::compare_to 0 2 273 274 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase3f::compare_to(LVecBase3f const &other) const;
inline int LVecBase3f::compare_to(LVecBase3f const &other, float threshold) const;

1854 8 get_hash 0 4 2788 20 LVecBase3f::get_hash 0 2 275 276 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase3f::get_hash(void) const;
inline unsigned int LVecBase3f::get_hash(float threshold) const;

1855 8 add_hash 0 4 2788 20 LVecBase3f::add_hash 0 2 277 278 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase3f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase3f::add_hash(unsigned int hash, float threshold) const;

1856 10 operator - 0 68 2788 22 LVecBase3f::operator - 0 1 279 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f LVecBase3f::operator -(void) const;

1857 10 operator + 0 4 2788 22 LVecBase3f::operator + 0 1 280 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3f LVecBase3f::operator +(LVecBase3f const &other) const;

1858 10 operator - 0 4 2788 22 LVecBase3f::operator - 0 1 281 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3f LVecBase3f::operator -(LVecBase3f const &other) const;

1859 10 operator * 0 4 2788 22 LVecBase3f::operator * 0 1 282 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f LVecBase3f::operator *(float scalar) const;

1860 10 operator / 0 4 2788 22 LVecBase3f::operator / 0 1 283 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f LVecBase3f::operator /(float scalar) const;

1861 11 operator += 0 4 2788 23 LVecBase3f::operator += 0 1 284 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3f::operator +=(LVecBase3f const &other);

1862 11 operator -= 0 4 2788 23 LVecBase3f::operator -= 0 1 285 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3f::operator -=(LVecBase3f const &other);

1863 11 operator *= 0 4 2788 23 LVecBase3f::operator *= 0 1 286 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase3f::operator *=(float scalar);

1864 11 operator /= 0 4 2788 23 LVecBase3f::operator /= 0 1 287 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase3f::operator /=(float scalar);

1865 4 fmax 0 4 2788 16 LVecBase3f::fmax 0 1 288 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3f LVecBase3f::fmax(LVecBase3f const &other);

1866 4 fmin 0 4 2788 16 LVecBase3f::fmin 0 1 289 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3f LVecBase3f::fmin(LVecBase3f const &other);

1867 10 cross_into 0 4 2788 22 LVecBase3f::cross_into 0 1 290 241
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3f::cross_into(LVecBase3f const &other);

1868 12 almost_equal 0 4 2788 24 LVecBase3f::almost_equal 0 2 291 292 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase3f::almost_equal(LVecBase3f const &other, float threshold) const;
inline bool LVecBase3f::almost_equal(LVecBase3f const &other) const;

1869 6 output 0 4 2788 18 LVecBase3f::output 0 1 293 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3f::output(ostream &out) const;

1870 11 python_repr 0 4 2788 23 LVecBase3f::python_repr 0 1 294 0
96
inline void LVecBase3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1871 13 generate_hash 0 4 2788 25 LVecBase3f::generate_hash 0 2 295 296 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase3f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase3f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

1872 20 write_datagram_fixed 0 4 2788 32 LVecBase3f::write_datagram_fixed 0 1 297 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase3f::write_datagram_fixed(Datagram &destination) const;

1873 19 read_datagram_fixed 0 4 2788 31 LVecBase3f::read_datagram_fixed 0 1 298 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase3f::read_datagram_fixed(DatagramIterator &source);

1874 14 write_datagram 0 4 2788 26 LVecBase3f::write_datagram 0 1 299 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3f::write_datagram(Datagram &destination) const;

1875 13 read_datagram 0 4 2788 25 LVecBase3f::read_datagram 0 1 300 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase3f::read_datagram(DatagramIterator &source);

1876 14 get_class_type 0 4 2788 26 LVecBase3f::get_class_type 0 1 301 0
51
static TypeHandle LVecBase3f::get_class_type(void);

1877 10 LVecBase3d 0 4 2789 22 LVecBase3d::LVecBase3d 0 4 302 303 304 305 1380
// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
202
inline LVecBase3d::LVecBase3d(void);
inline LVecBase3d::LVecBase3d(LVecBase3d const &copy);
inline LVecBase3d::LVecBase3d(double fill_value);
inline LVecBase3d::LVecBase3d(double x, double y, double z);

1878 10 operator = 0 4 2789 22 LVecBase3d::operator = 0 2 306 307 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase3d &LVecBase3d::operator =(LVecBase3d const &copy);
inline LVecBase3d &LVecBase3d::operator =(double fill_value);

1879 12 operator new 0 4 2789 24 LVecBase3d::operator new 0 1 308 0
126
inline void *LVecBase3d::operator new(unsigned int size);
inline void *LVecBase3d::operator new(unsigned int size, void *ptr);

1880 15 operator delete 0 4 2789 27 LVecBase3d::operator delete 0 0 0
108
inline void LVecBase3d::operator delete(void *ptr);
inline void LVecBase3d::operator delete(void *, void *);

1881 12 validate_ptr 0 4 2789 24 LVecBase3d::validate_ptr 0 0 0
61
static inline bool LVecBase3d::validate_ptr(void const *ptr);

1882 4 zero 0 4 2789 16 LVecBase3d::zero 0 1 309 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3d const &LVecBase3d::zero(void);

1883 6 unit_x 0 4 2789 18 LVecBase3d::unit_x 0 1 310 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_x(void);

1884 6 unit_y 0 4 2789 18 LVecBase3d::unit_y 0 1 311 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_y(void);

1885 6 unit_z 0 4 2789 18 LVecBase3d::unit_z 0 1 312 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_z(void);

1886 11 ~LVecBase3d 0 4 2789 23 LVecBase3d::~LVecBase3d 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3d::~LVecBase3d(void);

1887 10 __reduce__ 0 4 2789 22 LVecBase3d::__reduce__ 0 1 313 0
62
inline PyObject *LVecBase3d::__reduce__(PyObject *self) const;

1888 11 __getattr__ 0 4 2789 23 LVecBase3d::__getattr__ 0 1 314 0
86
inline PyObject *LVecBase3d::__getattr__(basic_string< char > const &attr_name) const;

1889 11 __setattr__ 0 4 2789 23 LVecBase3d::__setattr__ 0 1 315 0
108
inline int LVecBase3d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1890 11 operator [] 0 4 2789 23 LVecBase3d::operator [] 0 2 316 317 450
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase3d::operator [](int i) const;
inline double &LVecBase3d::operator [](int i);

1891 11 __setitem__ 0 4 2789 23 LVecBase3d::__setitem__ 0 1 318 0
53
inline void LVecBase3d::__setitem__(int i, double v);

1892 4 size 0 4 2789 16 LVecBase3d::size 0 1 319 271
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3d::size(void);

1893 6 is_nan 0 4 2789 18 LVecBase3d::is_nan 0 1 320 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3d::is_nan(void) const;

1894 8 get_cell 0 4 2789 20 LVecBase3d::get_cell 0 1 321 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase3d::get_cell(int i) const;

1895 5 get_x 0 4 2789 17 LVecBase3d::get_x 0 1 322 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_x(void) const;

1896 5 get_y 0 4 2789 17 LVecBase3d::get_y 0 1 323 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_y(void) const;

1897 5 get_z 0 4 2789 17 LVecBase3d::get_z 0 1 324 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_z(void) const;

1898 8 set_cell 0 4 2789 20 LVecBase3d::set_cell 0 1 325 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase3d::set_cell(int i, double value);

1899 5 set_x 0 4 2789 17 LVecBase3d::set_x 0 1 326 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_x(double value);

1900 5 set_y 0 4 2789 17 LVecBase3d::set_y 0 1 327 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_y(double value);

1901 5 set_z 0 4 2789 17 LVecBase3d::set_z 0 1 328 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_z(double value);

1902 6 get_xy 0 4 2789 18 LVecBase3d::get_xy 0 1 329 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xy(void) const;

1903 6 get_xz 0 4 2789 18 LVecBase3d::get_xz 0 1 330 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xz(void) const;

1904 6 get_yz 0 4 2789 18 LVecBase3d::get_yz 0 1 331 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_yz(void) const;

1905 11 add_to_cell 0 4 2789 23 LVecBase3d::add_to_cell 0 1 332 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase3d::add_to_cell(int i, double value);

1906 5 add_x 0 4 2789 17 LVecBase3d::add_x 0 1 333 368
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_x(double value);

1907 5 add_y 0 4 2789 17 LVecBase3d::add_y 0 1 334 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_y(double value);

1908 5 add_z 0 4 2789 17 LVecBase3d::add_z 0 1 335 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_z(double value);

1909 8 get_data 0 4 2789 20 LVecBase3d::get_data 0 1 336 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase3d::get_data(void) const;

1910 18 get_num_components 0 4 2789 30 LVecBase3d::get_num_components 0 1 337 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3d::get_num_components(void) const;

1911 4 fill 0 4 2789 16 LVecBase3d::fill 0 1 338 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase3d::fill(double fill_value);

1912 3 set 0 4 2789 15 LVecBase3d::set 0 1 339 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void LVecBase3d::set(double x, double y, double z);

1913 6 length 0 4 2789 18 LVecBase3d::length 0 1 340 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase3d::length(void) const;

1914 14 length_squared 0 4 2789 26 LVecBase3d::length_squared 0 1 341 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase3d::length_squared(void) const;

1915 9 normalize 0 4 2789 21 LVecBase3d::normalize 0 1 342 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3d::normalize(void);

1916 3 dot 0 4 2789 15 LVecBase3d::dot 0 1 343 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase3d::dot(LVecBase3d const &other) const;

1917 5 cross 0 4 2789 17 LVecBase3d::cross 0 1 344 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3d LVecBase3d::cross(LVecBase3d const &other) const;

1918 7 project 0 4 2789 19 LVecBase3d::project 0 1 345 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LVecBase3d::project(LVecBase3d const &onto) const;

1919 10 operator < 0 4 2789 22 LVecBase3d::operator < 0 1 346 498
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase3d::operator <(LVecBase3d const &other) const;

1920 11 operator == 0 4 2789 23 LVecBase3d::operator == 0 1 347 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3d::operator ==(LVecBase3d const &other) const;

1921 11 operator != 0 4 2789 23 LVecBase3d::operator != 0 1 348 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3d::operator !=(LVecBase3d const &other) const;

1922 20 get_standardized_hpr 0 4 2789 32 LVecBase3d::get_standardized_hpr 0 1 349 1030
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3d LVecBase3d::get_standardized_hpr(void) const;

1923 10 compare_to 0 4 2789 22 LVecBase3d::compare_to 0 2 350 351 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase3d::compare_to(LVecBase3d const &other) const;
inline int LVecBase3d::compare_to(LVecBase3d const &other, double threshold) const;

1924 8 get_hash 0 4 2789 20 LVecBase3d::get_hash 0 2 352 353 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase3d::get_hash(void) const;
inline unsigned int LVecBase3d::get_hash(double threshold) const;

1925 8 add_hash 0 4 2789 20 LVecBase3d::add_hash 0 2 354 355 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase3d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase3d::add_hash(unsigned int hash, double threshold) const;

1926 10 operator - 0 68 2789 22 LVecBase3d::operator - 0 1 356 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase3d LVecBase3d::operator -(void) const;

1927 10 operator + 0 4 2789 22 LVecBase3d::operator + 0 1 357 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3d LVecBase3d::operator +(LVecBase3d const &other) const;

1928 10 operator - 0 4 2789 22 LVecBase3d::operator - 0 1 358 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3d LVecBase3d::operator -(LVecBase3d const &other) const;

1929 10 operator * 0 4 2789 22 LVecBase3d::operator * 0 1 359 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LVecBase3d::operator *(double scalar) const;

1930 10 operator / 0 4 2789 22 LVecBase3d::operator / 0 1 360 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LVecBase3d::operator /(double scalar) const;

1931 11 operator += 0 4 2789 23 LVecBase3d::operator += 0 1 361 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3d::operator +=(LVecBase3d const &other);

1932 11 operator -= 0 4 2789 23 LVecBase3d::operator -= 0 1 362 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3d::operator -=(LVecBase3d const &other);

1933 11 operator *= 0 4 2789 23 LVecBase3d::operator *= 0 1 363 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::operator *=(double scalar);

1934 11 operator /= 0 4 2789 23 LVecBase3d::operator /= 0 1 364 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::operator /=(double scalar);

1935 4 fmax 0 4 2789 16 LVecBase3d::fmax 0 1 365 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3d LVecBase3d::fmax(LVecBase3d const &other);

1936 4 fmin 0 4 2789 16 LVecBase3d::fmin 0 1 366 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3d LVecBase3d::fmin(LVecBase3d const &other);

1937 10 cross_into 0 4 2789 22 LVecBase3d::cross_into 0 1 367 241
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3d::cross_into(LVecBase3d const &other);

1938 12 almost_equal 0 4 2789 24 LVecBase3d::almost_equal 0 2 368 369 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase3d::almost_equal(LVecBase3d const &other, double threshold) const;
inline bool LVecBase3d::almost_equal(LVecBase3d const &other) const;

1939 6 output 0 4 2789 18 LVecBase3d::output 0 1 370 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::output(ostream &out) const;

1940 11 python_repr 0 4 2789 23 LVecBase3d::python_repr 0 1 371 0
96
inline void LVecBase3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1941 13 generate_hash 0 4 2789 25 LVecBase3d::generate_hash 0 2 372 373 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase3d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase3d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

1942 20 write_datagram_fixed 0 4 2789 32 LVecBase3d::write_datagram_fixed 0 1 374 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase3d::write_datagram_fixed(Datagram &destination) const;

1943 19 read_datagram_fixed 0 4 2789 31 LVecBase3d::read_datagram_fixed 0 1 375 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase3d::read_datagram_fixed(DatagramIterator &source);

1944 14 write_datagram 0 4 2789 26 LVecBase3d::write_datagram 0 1 376 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3d::write_datagram(Datagram &destination) const;

1945 13 read_datagram 0 4 2789 25 LVecBase3d::read_datagram 0 1 377 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase3d::read_datagram(DatagramIterator &source);

1946 14 get_class_type 0 4 2789 26 LVecBase3d::get_class_type 0 1 378 0
51
static TypeHandle LVecBase3d::get_class_type(void);

1947 29 get_default_coordinate_system 0 1 0 29 get_default_coordinate_system 0 1 1485 0
53
CoordinateSystem get_default_coordinate_system(void);

1948 30 parse_coordinate_system_string 0 1 0 30 parse_coordinate_system_string 0 1 1486 0
81
CoordinateSystem parse_coordinate_system_string(basic_string< char > const &str);

1949 24 format_coordinate_system 0 1 0 24 format_coordinate_system 0 1 1487 0
67
basic_string< char > format_coordinate_system(CoordinateSystem cs);

1950 15 is_right_handed 0 1 0 15 is_right_handed 0 2 1488 1489 0
57
bool is_right_handed(CoordinateSystem cs = (CS_default));

1951 9 LVector3f 0 4 2791 20 LVector3f::LVector3f 0 4 379 380 381 382 1387
// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
190
inline LVector3f::LVector3f(void);
inline LVector3f::LVector3f(LVecBase3f const &copy);
inline LVector3f::LVector3f(float fill_value);
inline LVector3f::LVector3f(float x, float y, float z);

1952 10 operator = 0 4 2791 21 LVector3f::operator = 0 2 383 384 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector3f &LVector3f::operator =(LVecBase3f const &copy);
inline LVector3f &LVector3f::operator =(float fill_value);

1953 11 __getattr__ 0 4 2791 22 LVector3f::__getattr__ 0 1 385 0
85
inline PyObject *LVector3f::__getattr__(basic_string< char > const &attr_name) const;

1954 11 __setattr__ 0 4 2791 22 LVector3f::__setattr__ 0 1 386 0
107
inline int LVector3f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1955 4 zero 0 4 2791 15 LVector3f::zero 0 1 387 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3f const &LVector3f::zero(void);

1956 6 unit_x 0 4 2791 17 LVector3f::unit_x 0 1 388 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_x(void);

1957 6 unit_y 0 4 2791 17 LVector3f::unit_y 0 1 389 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_y(void);

1958 6 unit_z 0 4 2791 17 LVector3f::unit_z 0 1 390 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_z(void);

1959 6 get_xy 0 4 2791 17 LVector3f::get_xy 0 1 391 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xy(void) const;

1960 6 get_xz 0 4 2791 17 LVector3f::get_xz 0 1 392 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xz(void) const;

1961 6 get_yz 0 4 2791 17 LVector3f::get_yz 0 1 393 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_yz(void) const;

1962 10 operator - 0 68 2791 21 LVector3f::operator - 0 1 394 216
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector3f LVector3f::operator -(void) const;

1963 10 operator + 0 4 2791 21 LVector3f::operator + 0 2 395 396 451
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3f LVector3f::operator +(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator +(LVector3f const &other) const;

1964 10 operator - 0 4 2791 21 LVector3f::operator - 0 2 397 398 451
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3f LVector3f::operator -(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator -(LVector3f const &other) const;

1965 5 cross 0 4 2791 16 LVector3f::cross 0 1 399 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3f LVector3f::cross(LVecBase3f const &other) const;

1966 7 project 0 4 2791 18 LVector3f::project 0 1 400 389
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3f LVector3f::project(LVecBase3f const &onto) const;

1967 9 angle_rad 0 4 2791 20 LVector3f::angle_rad 0 1 401 385
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_rad(LVector3f const &other) const;

1968 9 angle_deg 0 4 2791 20 LVector3f::angle_deg 0 1 402 376
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_deg(LVector3f const &other) const;

1969 16 signed_angle_rad 0 4 2791 27 LVector3f::signed_angle_rad 0 1 403 548
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_rad(LVector3f const &other, LVector3f const &ref) const;

1970 16 signed_angle_deg 0 4 2791 27 LVector3f::signed_angle_deg 0 1 404 549
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_deg(LVector3f const &other, LVector3f const &ref) const;

1971 18 relative_angle_rad 0 4 2791 29 LVector3f::relative_angle_rad 0 1 405 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_rad(LVector3f const &other) const;

1972 18 relative_angle_deg 0 4 2791 29 LVector3f::relative_angle_deg 0 1 406 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_deg(LVector3f const &other) const;

1973 10 operator * 0 4 2791 21 LVector3f::operator * 0 1 407 226
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector3f LVector3f::operator *(float scalar) const;

1974 10 operator / 0 4 2791 21 LVector3f::operator / 0 1 408 226
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector3f LVector3f::operator /(float scalar) const;

1975 2 up 0 4 2791 13 LVector3f::up 0 2 409 410 341
// Some special named constructors for LVector3.

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
74
static inline LVector3f LVector3f::up(CoordinateSystem cs = (CS_default));

1976 5 right 0 4 2791 16 LVector3f::right 0 2 411 412 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
77
static inline LVector3f LVector3f::right(CoordinateSystem cs = (CS_default));

1977 7 forward 0 4 2791 18 LVector3f::forward 0 2 413 414 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
79
static inline LVector3f LVector3f::forward(CoordinateSystem cs = (CS_default));

1978 4 down 0 4 2791 15 LVector3f::down 0 2 415 416 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::down(CoordinateSystem cs = (CS_default));

1979 4 left 0 4 2791 15 LVector3f::left 0 2 417 418 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::left(CoordinateSystem cs = (CS_default));

1980 4 back 0 4 2791 15 LVector3f::back 0 2 419 420 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::back(CoordinateSystem cs = (CS_default));

1981 3 rfu 0 4 2791 14 LVector3f::rfu 0 2 421 422 524
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::
109
static inline LVector3f LVector3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (CS_default));

1982 11 python_repr 0 4 2791 22 LVector3f::python_repr 0 1 423 0
95
inline void LVector3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1983 14 get_class_type 0 4 2791 25 LVector3f::get_class_type 0 1 424 0
50
static TypeHandle LVector3f::get_class_type(void);

1984 10 ~LVector3f 0 4 2791 21 LVector3f::~LVector3f 0 0 0
28
LVector3f::~LVector3f(void);

1985 9 LVector3d 0 4 2792 20 LVector3d::LVector3d 0 4 425 426 427 428 1387
// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
194
inline LVector3d::LVector3d(void);
inline LVector3d::LVector3d(LVecBase3d const &copy);
inline LVector3d::LVector3d(double fill_value);
inline LVector3d::LVector3d(double x, double y, double z);

1986 10 operator = 0 4 2792 21 LVector3d::operator = 0 2 429 430 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector3d &LVector3d::operator =(LVecBase3d const &copy);
inline LVector3d &LVector3d::operator =(double fill_value);

1987 11 __getattr__ 0 4 2792 22 LVector3d::__getattr__ 0 1 431 0
85
inline PyObject *LVector3d::__getattr__(basic_string< char > const &attr_name) const;

1988 11 __setattr__ 0 4 2792 22 LVector3d::__setattr__ 0 1 432 0
107
inline int LVector3d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1989 4 zero 0 4 2792 15 LVector3d::zero 0 1 433 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3d const &LVector3d::zero(void);

1990 6 unit_x 0 4 2792 17 LVector3d::unit_x 0 1 434 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_x(void);

1991 6 unit_y 0 4 2792 17 LVector3d::unit_y 0 1 435 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_y(void);

1992 6 unit_z 0 4 2792 17 LVector3d::unit_z 0 1 436 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_z(void);

1993 6 get_xy 0 4 2792 17 LVector3d::get_xy 0 1 437 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xy(void) const;

1994 6 get_xz 0 4 2792 17 LVector3d::get_xz 0 1 438 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xz(void) const;

1995 6 get_yz 0 4 2792 17 LVector3d::get_yz 0 1 439 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_yz(void) const;

1996 10 operator - 0 68 2792 21 LVector3d::operator - 0 1 440 216
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector3d LVector3d::operator -(void) const;

1997 10 operator + 0 4 2792 21 LVector3d::operator + 0 2 441 442 451
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3d LVector3d::operator +(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator +(LVector3d const &other) const;

1998 10 operator - 0 4 2792 21 LVector3d::operator - 0 2 443 444 451
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3d LVector3d::operator -(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator -(LVector3d const &other) const;

1999 5 cross 0 4 2792 16 LVector3d::cross 0 1 445 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3d LVector3d::cross(LVecBase3d const &other) const;

2000 7 project 0 4 2792 18 LVector3d::project 0 1 446 389
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3d LVector3d::project(LVecBase3d const &onto) const;

2001 9 angle_rad 0 4 2792 20 LVector3d::angle_rad 0 1 447 385
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_rad(LVector3d const &other) const;

2002 9 angle_deg 0 4 2792 20 LVector3d::angle_deg 0 1 448 376
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_deg(LVector3d const &other) const;

2003 16 signed_angle_rad 0 4 2792 27 LVector3d::signed_angle_rad 0 1 449 548
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_rad(LVector3d const &other, LVector3d const &ref) const;

2004 16 signed_angle_deg 0 4 2792 27 LVector3d::signed_angle_deg 0 1 450 549
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_deg(LVector3d const &other, LVector3d const &ref) const;

2005 18 relative_angle_rad 0 4 2792 29 LVector3d::relative_angle_rad 0 1 451 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_rad(LVector3d const &other) const;

2006 18 relative_angle_deg 0 4 2792 29 LVector3d::relative_angle_deg 0 1 452 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_deg(LVector3d const &other) const;

2007 10 operator * 0 4 2792 21 LVector3d::operator * 0 1 453 226
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector3d LVector3d::operator *(double scalar) const;

2008 10 operator / 0 4 2792 21 LVector3d::operator / 0 1 454 226
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector3d LVector3d::operator /(double scalar) const;

2009 2 up 0 4 2792 13 LVector3d::up 0 2 455 456 341
// Some special named constructors for LVector3.

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
74
static inline LVector3d LVector3d::up(CoordinateSystem cs = (CS_default));

2010 5 right 0 4 2792 16 LVector3d::right 0 2 457 458 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
77
static inline LVector3d LVector3d::right(CoordinateSystem cs = (CS_default));

2011 7 forward 0 4 2792 18 LVector3d::forward 0 2 459 460 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
79
static inline LVector3d LVector3d::forward(CoordinateSystem cs = (CS_default));

2012 4 down 0 4 2792 15 LVector3d::down 0 2 461 462 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::down(CoordinateSystem cs = (CS_default));

2013 4 left 0 4 2792 15 LVector3d::left 0 2 463 464 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::left(CoordinateSystem cs = (CS_default));

2014 4 back 0 4 2792 15 LVector3d::back 0 2 465 466 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::back(CoordinateSystem cs = (CS_default));

2015 3 rfu 0 4 2792 14 LVector3d::rfu 0 2 467 468 524
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::
112
static inline LVector3d LVector3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (CS_default));

2016 11 python_repr 0 4 2792 22 LVector3d::python_repr 0 1 469 0
95
inline void LVector3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2017 14 get_class_type 0 4 2792 25 LVector3d::get_class_type 0 1 470 0
50
static TypeHandle LVector3d::get_class_type(void);

2018 10 ~LVector3d 0 4 2792 21 LVector3d::~LVector3d 0 0 0
28
LVector3d::~LVector3d(void);

2019 8 LPoint3f 0 4 2793 18 LPoint3f::LPoint3f 0 4 471 472 473 474 1370
// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
182
inline LPoint3f::LPoint3f(void);
inline LPoint3f::LPoint3f(LVecBase3f const &copy);
inline LPoint3f::LPoint3f(float fill_value);
inline LPoint3f::LPoint3f(float x, float y, float z);

2020 10 operator = 0 4 2793 20 LPoint3f::operator = 0 2 475 476 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint3f &LPoint3f::operator =(LVecBase3f const &copy);
inline LPoint3f &LPoint3f::operator =(float fill_value);

2021 11 __getattr__ 0 4 2793 21 LPoint3f::__getattr__ 0 1 477 0
84
inline PyObject *LPoint3f::__getattr__(basic_string< char > const &attr_name) const;

2022 11 __setattr__ 0 4 2793 21 LPoint3f::__setattr__ 0 1 478 0
106
inline int LPoint3f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2023 4 zero 0 4 2793 14 LPoint3f::zero 0 1 479 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3f const &LPoint3f::zero(void);

2024 6 unit_x 0 4 2793 16 LPoint3f::unit_x 0 1 480 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_x(void);

2025 6 unit_y 0 4 2793 16 LPoint3f::unit_y 0 1 481 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_y(void);

2026 6 unit_z 0 4 2793 16 LPoint3f::unit_z 0 1 482 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_z(void);

2027 6 get_xy 0 4 2793 16 LPoint3f::get_xy 0 1 483 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xy(void) const;

2028 6 get_xz 0 4 2793 16 LPoint3f::get_xz 0 1 484 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xz(void) const;

2029 6 get_yz 0 4 2793 16 LPoint3f::get_yz 0 1 485 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_yz(void) const;

2030 10 operator - 0 68 2793 20 LPoint3f::operator - 0 1 486 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint3f LPoint3f::operator -(void) const;

2031 10 operator + 0 4 2793 20 LPoint3f::operator + 0 2 487 488 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase3f LPoint3f::operator +(LVecBase3f const &other) const;
inline LPoint3f LPoint3f::operator +(LVector3f const &other) const;

2032 10 operator - 0 4 2793 20 LPoint3f::operator - 0 3 489 490 491 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase3f LPoint3f::operator -(LVecBase3f const &other) const;
inline LVector3f LPoint3f::operator -(LPoint3f const &other) const;
inline LPoint3f LPoint3f::operator -(LVector3f const &other) const;

2033 5 cross 0 4 2793 15 LPoint3f::cross 0 1 492 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3f LPoint3f::cross(LVecBase3f const &other) const;

2034 7 project 0 4 2793 17 LPoint3f::project 0 1 493 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3f LPoint3f::project(LVecBase3f const &onto) const;

2035 10 operator * 0 4 2793 20 LPoint3f::operator * 0 1 494 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint3f LPoint3f::operator *(float scalar) const;

2036 10 operator / 0 4 2793 20 LPoint3f::operator / 0 1 495 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint3f LPoint3f::operator /(float scalar) const;

2037 6 origin 0 4 2793 16 LPoint3f::origin 0 2 496 497 489
// Some special named constructors for LPoint3.

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
76
static inline LPoint3f LPoint3f::origin(CoordinateSystem cs = (CS_default));

2038 3 rfu 0 4 2793 13 LPoint3f::rfu 0 2 498 499 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
107
static inline LPoint3f LPoint3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (CS_default));

2039 11 python_repr 0 4 2793 21 LPoint3f::python_repr 0 1 500 0
94
inline void LPoint3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2040 14 get_class_type 0 4 2793 24 LPoint3f::get_class_type 0 1 501 0
49
static TypeHandle LPoint3f::get_class_type(void);

2041 9 ~LPoint3f 0 4 2793 19 LPoint3f::~LPoint3f 0 0 0
26
LPoint3f::~LPoint3f(void);

2042 8 LPoint3d 0 4 2794 18 LPoint3d::LPoint3d 0 4 502 503 504 505 1370
// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
186
inline LPoint3d::LPoint3d(void);
inline LPoint3d::LPoint3d(LVecBase3d const &copy);
inline LPoint3d::LPoint3d(double fill_value);
inline LPoint3d::LPoint3d(double x, double y, double z);

2043 10 operator = 0 4 2794 20 LPoint3d::operator = 0 2 506 507 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint3d &LPoint3d::operator =(LVecBase3d const &copy);
inline LPoint3d &LPoint3d::operator =(double fill_value);

2044 11 __getattr__ 0 4 2794 21 LPoint3d::__getattr__ 0 1 508 0
84
inline PyObject *LPoint3d::__getattr__(basic_string< char > const &attr_name) const;

2045 11 __setattr__ 0 4 2794 21 LPoint3d::__setattr__ 0 1 509 0
106
inline int LPoint3d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2046 4 zero 0 4 2794 14 LPoint3d::zero 0 1 510 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3d const &LPoint3d::zero(void);

2047 6 unit_x 0 4 2794 16 LPoint3d::unit_x 0 1 511 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_x(void);

2048 6 unit_y 0 4 2794 16 LPoint3d::unit_y 0 1 512 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_y(void);

2049 6 unit_z 0 4 2794 16 LPoint3d::unit_z 0 1 513 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_z(void);

2050 6 get_xy 0 4 2794 16 LPoint3d::get_xy 0 1 514 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xy(void) const;

2051 6 get_xz 0 4 2794 16 LPoint3d::get_xz 0 1 515 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xz(void) const;

2052 6 get_yz 0 4 2794 16 LPoint3d::get_yz 0 1 516 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_yz(void) const;

2053 10 operator - 0 68 2794 20 LPoint3d::operator - 0 1 517 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint3d LPoint3d::operator -(void) const;

2054 10 operator + 0 4 2794 20 LPoint3d::operator + 0 2 518 519 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase3d LPoint3d::operator +(LVecBase3d const &other) const;
inline LPoint3d LPoint3d::operator +(LVector3d const &other) const;

2055 10 operator - 0 4 2794 20 LPoint3d::operator - 0 3 520 521 522 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase3d LPoint3d::operator -(LVecBase3d const &other) const;
inline LVector3d LPoint3d::operator -(LPoint3d const &other) const;
inline LPoint3d LPoint3d::operator -(LVector3d const &other) const;

2056 5 cross 0 4 2794 15 LPoint3d::cross 0 1 523 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3d LPoint3d::cross(LVecBase3d const &other) const;

2057 7 project 0 4 2794 17 LPoint3d::project 0 1 524 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3d LPoint3d::project(LVecBase3d const &onto) const;

2058 10 operator * 0 4 2794 20 LPoint3d::operator * 0 1 525 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint3d LPoint3d::operator *(double scalar) const;

2059 10 operator / 0 4 2794 20 LPoint3d::operator / 0 1 526 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint3d LPoint3d::operator /(double scalar) const;

2060 6 origin 0 4 2794 16 LPoint3d::origin 0 2 527 528 489
// Some special named constructors for LPoint3.

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
76
static inline LPoint3d LPoint3d::origin(CoordinateSystem cs = (CS_default));

2061 3 rfu 0 4 2794 13 LPoint3d::rfu 0 2 529 530 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
110
static inline LPoint3d LPoint3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (CS_default));

2062 11 python_repr 0 4 2794 21 LPoint3d::python_repr 0 1 531 0
94
inline void LPoint3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2063 14 get_class_type 0 4 2794 24 LPoint3d::get_class_type 0 1 532 0
49
static TypeHandle LPoint3d::get_class_type(void);

2064 9 ~LPoint3d 0 4 2794 19 LPoint3d::~LPoint3d 0 0 0
26
LPoint3d::~LPoint3d(void);

2065 10 LVecBase4f 0 4 2795 22 LVecBase4f::LVecBase4f 0 5 533 534 535 536 537 1617
// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
271
inline LVecBase4f::LVecBase4f(void);
inline LVecBase4f::LVecBase4f(LVecBase4f const &copy);
inline LVecBase4f::LVecBase4f(UnalignedLVecBase4f const &copy);
inline LVecBase4f::LVecBase4f(float fill_value);
inline LVecBase4f::LVecBase4f(float x, float y, float z, float w);

2066 10 operator = 0 4 2795 22 LVecBase4f::operator = 0 3 538 539 540 703
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
203
inline LVecBase4f &LVecBase4f::operator =(LVecBase4f const &copy);
inline LVecBase4f &LVecBase4f::operator =(UnalignedLVecBase4f const &copy);
inline LVecBase4f &LVecBase4f::operator =(float fill_value);

2067 12 operator new 0 4 2795 24 LVecBase4f::operator new 0 1 541 0
126
inline void *LVecBase4f::operator new(unsigned int size);
inline void *LVecBase4f::operator new(unsigned int size, void *ptr);

2068 15 operator delete 0 4 2795 27 LVecBase4f::operator delete 0 0 0
108
inline void LVecBase4f::operator delete(void *ptr);
inline void LVecBase4f::operator delete(void *, void *);

2069 12 validate_ptr 0 4 2795 24 LVecBase4f::validate_ptr 0 0 0
61
static inline bool LVecBase4f::validate_ptr(void const *ptr);

2070 4 zero 0 4 2795 16 LVecBase4f::zero 0 1 542 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4f const &LVecBase4f::zero(void);

2071 6 unit_x 0 4 2795 18 LVecBase4f::unit_x 0 1 543 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_x(void);

2072 6 unit_y 0 4 2795 18 LVecBase4f::unit_y 0 1 544 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_y(void);

2073 6 unit_z 0 4 2795 18 LVecBase4f::unit_z 0 1 545 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_z(void);

2074 6 unit_w 0 4 2795 18 LVecBase4f::unit_w 0 1 546 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_w(void);

2075 11 ~LVecBase4f 0 4 2795 23 LVecBase4f::~LVecBase4f 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4f::~LVecBase4f(void);

2076 10 __reduce__ 0 4 2795 22 LVecBase4f::__reduce__ 0 1 547 0
62
inline PyObject *LVecBase4f::__reduce__(PyObject *self) const;

2077 11 __getattr__ 0 4 2795 23 LVecBase4f::__getattr__ 0 1 548 0
86
inline PyObject *LVecBase4f::__getattr__(basic_string< char > const &attr_name) const;

2078 11 __setattr__ 0 4 2795 23 LVecBase4f::__setattr__ 0 1 549 0
108
inline int LVecBase4f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2079 11 operator [] 0 4 2795 23 LVecBase4f::operator [] 0 2 550 551 456
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase4f::operator [](int i) const;
inline float &LVecBase4f::operator [](int i);

2080 11 __setitem__ 0 4 2795 23 LVecBase4f::__setitem__ 0 1 552 0
52
inline void LVecBase4f::__setitem__(int i, float v);

2081 4 size 0 4 2795 16 LVecBase4f::size 0 1 553 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4f::size(void);

2082 6 is_nan 0 4 2795 18 LVecBase4f::is_nan 0 1 554 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4f::is_nan(void) const;

2083 8 get_cell 0 4 2795 20 LVecBase4f::get_cell 0 1 555 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase4f::get_cell(int i) const;

2084 5 get_x 0 4 2795 17 LVecBase4f::get_x 0 1 556 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_x(void) const;

2085 5 get_y 0 4 2795 17 LVecBase4f::get_y 0 1 557 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_y(void) const;

2086 5 get_z 0 4 2795 17 LVecBase4f::get_z 0 1 558 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_z(void) const;

2087 5 get_w 0 4 2795 17 LVecBase4f::get_w 0 1 559 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_w(void) const;

2088 8 set_cell 0 4 2795 20 LVecBase4f::set_cell 0 1 560 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase4f::set_cell(int i, float value);

2089 5 set_x 0 4 2795 17 LVecBase4f::set_x 0 1 561 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_x(float value);

2090 5 set_y 0 4 2795 17 LVecBase4f::set_y 0 1 562 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_y(float value);

2091 5 set_z 0 4 2795 17 LVecBase4f::set_z 0 1 563 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_z(float value);

2092 5 set_w 0 4 2795 17 LVecBase4f::set_w 0 1 564 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_w(float value);

2093 11 add_to_cell 0 4 2795 23 LVecBase4f::add_to_cell 0 1 565 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase4f::add_to_cell(int i, float value);

2094 5 add_x 0 4 2795 17 LVecBase4f::add_x 0 1 566 371
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_x(float value);

2095 5 add_y 0 4 2795 17 LVecBase4f::add_y 0 1 567 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_y(float value);

2096 5 add_z 0 4 2795 17 LVecBase4f::add_z 0 1 568 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_z(float value);

2097 5 add_w 0 4 2795 17 LVecBase4f::add_w 0 1 569 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_w(float value);

2098 8 get_data 0 4 2795 20 LVecBase4f::get_data 0 1 570 401
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase4f::get_data(void) const;

2099 18 get_num_components 0 4 2795 30 LVecBase4f::get_num_components 0 1 571 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4f::get_num_components(void) const;

2100 4 fill 0 4 2795 16 LVecBase4f::fill 0 1 572 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase4f::fill(float fill_value);

2101 3 set 0 4 2795 15 LVecBase4f::set 0 1 573 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4f::set(float x, float y, float z, float w);

2102 6 length 0 4 2795 18 LVecBase4f::length 0 1 574 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase4f::length(void) const;

2103 14 length_squared 0 4 2795 26 LVecBase4f::length_squared 0 1 575 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase4f::length_squared(void) const;

2104 9 normalize 0 4 2795 21 LVecBase4f::normalize 0 1 576 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4f::normalize(void);

2105 3 dot 0 4 2795 15 LVecBase4f::dot 0 1 577 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase4f::dot(LVecBase4f const &other) const;

2106 7 project 0 4 2795 19 LVecBase4f::project 0 1 578 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4f LVecBase4f::project(LVecBase4f const &onto) const;

2107 10 operator < 0 4 2795 22 LVecBase4f::operator < 0 1 579 498
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase4f::operator <(LVecBase4f const &other) const;

2108 11 operator == 0 4 2795 23 LVecBase4f::operator == 0 1 580 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4f::operator ==(LVecBase4f const &other) const;

2109 11 operator != 0 4 2795 23 LVecBase4f::operator != 0 1 581 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4f::operator !=(LVecBase4f const &other) const;

2110 10 compare_to 0 4 2795 22 LVecBase4f::compare_to 0 2 582 583 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase4f::compare_to(LVecBase4f const &other) const;
inline int LVecBase4f::compare_to(LVecBase4f const &other, float threshold) const;

2111 8 get_hash 0 4 2795 20 LVecBase4f::get_hash 0 2 584 585 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase4f::get_hash(void) const;
inline unsigned int LVecBase4f::get_hash(float threshold) const;

2112 8 add_hash 0 4 2795 20 LVecBase4f::add_hash 0 2 586 587 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase4f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase4f::add_hash(unsigned int hash, float threshold) const;

2113 10 operator - 0 68 2795 22 LVecBase4f::operator - 0 1 588 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase4f LVecBase4f::operator -(void) const;

2114 10 operator + 0 4 2795 22 LVecBase4f::operator + 0 1 589 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4f LVecBase4f::operator +(LVecBase4f const &other) const;

2115 10 operator - 0 4 2795 22 LVecBase4f::operator - 0 1 590 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4f LVecBase4f::operator -(LVecBase4f const &other) const;

2116 10 operator * 0 4 2795 22 LVecBase4f::operator * 0 1 591 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f LVecBase4f::operator *(float scalar) const;

2117 10 operator / 0 4 2795 22 LVecBase4f::operator / 0 1 592 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f LVecBase4f::operator /(float scalar) const;

2118 11 operator += 0 4 2795 23 LVecBase4f::operator += 0 1 593 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4f::operator +=(LVecBase4f const &other);

2119 11 operator -= 0 4 2795 23 LVecBase4f::operator -= 0 1 594 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4f::operator -=(LVecBase4f const &other);

2120 11 operator *= 0 4 2795 23 LVecBase4f::operator *= 0 1 595 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase4f::operator *=(float scalar);

2121 11 operator /= 0 4 2795 23 LVecBase4f::operator /= 0 1 596 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase4f::operator /=(float scalar);

2122 4 fmax 0 4 2795 16 LVecBase4f::fmax 0 1 597 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f LVecBase4f::fmax(LVecBase4f const &other);

2123 4 fmin 0 4 2795 16 LVecBase4f::fmin 0 1 598 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f LVecBase4f::fmin(LVecBase4f const &other);

2124 12 almost_equal 0 4 2795 24 LVecBase4f::almost_equal 0 2 599 600 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase4f::almost_equal(LVecBase4f const &other, float threshold) const;
inline bool LVecBase4f::almost_equal(LVecBase4f const &other) const;

2125 6 output 0 4 2795 18 LVecBase4f::output 0 1 601 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4f::output(ostream &out) const;

2126 11 python_repr 0 4 2795 23 LVecBase4f::python_repr 0 1 602 0
96
inline void LVecBase4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2127 13 generate_hash 0 4 2795 25 LVecBase4f::generate_hash 0 2 603 604 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase4f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase4f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

2128 20 write_datagram_fixed 0 4 2795 32 LVecBase4f::write_datagram_fixed 0 1 605 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase4f::write_datagram_fixed(Datagram &destination) const;

2129 19 read_datagram_fixed 0 4 2795 31 LVecBase4f::read_datagram_fixed 0 1 606 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase4f::read_datagram_fixed(DatagramIterator &source);

2130 14 write_datagram 0 4 2795 26 LVecBase4f::write_datagram 0 1 607 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4f::write_datagram(Datagram &destination) const;

2131 13 read_datagram 0 4 2795 25 LVecBase4f::read_datagram 0 1 608 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4f::read_datagram(DatagramIterator &source);

2132 14 get_class_type 0 4 2795 26 LVecBase4f::get_class_type 0 1 609 0
51
static TypeHandle LVecBase4f::get_class_type(void);

2133 19 UnalignedLVecBase4f 0 4 2796 40 UnalignedLVecBase4f::UnalignedLVecBase4f 0 4 610 611 612 613 932
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
294
inline UnalignedLVecBase4f::UnalignedLVecBase4f(void);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(LVecBase4f const &copy);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(UnalignedLVecBase4f const &copy);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(float x, float y, float z, float w);

2134 10 operator = 0 4 2796 31 UnalignedLVecBase4f::operator = 0 2 614 615 482
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
178
inline UnalignedLVecBase4f &UnalignedLVecBase4f::operator =(LVecBase4f const &copy);
inline UnalignedLVecBase4f &UnalignedLVecBase4f::operator =(UnalignedLVecBase4f const &copy);

2135 3 set 0 4 2796 24 UnalignedLVecBase4f::set 0 1 616 222
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void UnalignedLVecBase4f::set(float x, float y, float z, float w);

2136 11 operator [] 0 4 2796 32 UnalignedLVecBase4f::operator [] 0 2 617 618 468
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
114
inline float UnalignedLVecBase4f::operator [](int i) const;
inline float &UnalignedLVecBase4f::operator [](int i);

2137 11 __setitem__ 0 4 2796 32 UnalignedLVecBase4f::__setitem__ 0 1 619 0
61
inline void UnalignedLVecBase4f::__setitem__(int i, float v);

2138 4 size 0 4 2796 25 UnalignedLVecBase4f::size 0 1 620 280
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
50
static inline int UnalignedLVecBase4f::size(void);

2139 8 get_data 0 4 2796 29 UnalignedLVecBase4f::get_data 0 1 621 408
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
62
inline float const *UnalignedLVecBase4f::get_data(void) const;

2140 18 get_num_components 0 4 2796 39 UnalignedLVecBase4f::get_num_components 0 1 622 283
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////
63
inline int UnalignedLVecBase4f::get_num_components(void) const;

2141 14 get_class_type 0 4 2796 35 UnalignedLVecBase4f::get_class_type 0 1 623 0
60
static TypeHandle UnalignedLVecBase4f::get_class_type(void);

2142 20 ~UnalignedLVecBase4f 0 4 2796 41 UnalignedLVecBase4f::~UnalignedLVecBase4f 0 0 0
48
UnalignedLVecBase4f::~UnalignedLVecBase4f(void);

2143 10 LVecBase4d 0 4 2797 22 LVecBase4d::LVecBase4d 0 5 624 625 626 627 628 1617
// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
276
inline LVecBase4d::LVecBase4d(void);
inline LVecBase4d::LVecBase4d(LVecBase4d const &copy);
inline LVecBase4d::LVecBase4d(UnalignedLVecBase4d const &copy);
inline LVecBase4d::LVecBase4d(double fill_value);
inline LVecBase4d::LVecBase4d(double x, double y, double z, double w);

2144 10 operator = 0 4 2797 22 LVecBase4d::operator = 0 3 629 630 631 703
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
204
inline LVecBase4d &LVecBase4d::operator =(LVecBase4d const &copy);
inline LVecBase4d &LVecBase4d::operator =(UnalignedLVecBase4d const &copy);
inline LVecBase4d &LVecBase4d::operator =(double fill_value);

2145 12 operator new 0 4 2797 24 LVecBase4d::operator new 0 1 632 0
126
inline void *LVecBase4d::operator new(unsigned int size);
inline void *LVecBase4d::operator new(unsigned int size, void *ptr);

2146 15 operator delete 0 4 2797 27 LVecBase4d::operator delete 0 0 0
108
inline void LVecBase4d::operator delete(void *ptr);
inline void LVecBase4d::operator delete(void *, void *);

2147 12 validate_ptr 0 4 2797 24 LVecBase4d::validate_ptr 0 0 0
61
static inline bool LVecBase4d::validate_ptr(void const *ptr);

2148 4 zero 0 4 2797 16 LVecBase4d::zero 0 1 633 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4d const &LVecBase4d::zero(void);

2149 6 unit_x 0 4 2797 18 LVecBase4d::unit_x 0 1 634 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_x(void);

2150 6 unit_y 0 4 2797 18 LVecBase4d::unit_y 0 1 635 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_y(void);

2151 6 unit_z 0 4 2797 18 LVecBase4d::unit_z 0 1 636 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_z(void);

2152 6 unit_w 0 4 2797 18 LVecBase4d::unit_w 0 1 637 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_w(void);

2153 11 ~LVecBase4d 0 4 2797 23 LVecBase4d::~LVecBase4d 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4d::~LVecBase4d(void);

2154 10 __reduce__ 0 4 2797 22 LVecBase4d::__reduce__ 0 1 638 0
62
inline PyObject *LVecBase4d::__reduce__(PyObject *self) const;

2155 11 __getattr__ 0 4 2797 23 LVecBase4d::__getattr__ 0 1 639 0
86
inline PyObject *LVecBase4d::__getattr__(basic_string< char > const &attr_name) const;

2156 11 __setattr__ 0 4 2797 23 LVecBase4d::__setattr__ 0 1 640 0
108
inline int LVecBase4d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2157 11 operator [] 0 4 2797 23 LVecBase4d::operator [] 0 2 641 642 456
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase4d::operator [](int i) const;
inline double &LVecBase4d::operator [](int i);

2158 11 __setitem__ 0 4 2797 23 LVecBase4d::__setitem__ 0 1 643 0
53
inline void LVecBase4d::__setitem__(int i, double v);

2159 4 size 0 4 2797 16 LVecBase4d::size 0 1 644 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4d::size(void);

2160 6 is_nan 0 4 2797 18 LVecBase4d::is_nan 0 1 645 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4d::is_nan(void) const;

2161 8 get_cell 0 4 2797 20 LVecBase4d::get_cell 0 1 646 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase4d::get_cell(int i) const;

2162 5 get_x 0 4 2797 17 LVecBase4d::get_x 0 1 647 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_x(void) const;

2163 5 get_y 0 4 2797 17 LVecBase4d::get_y 0 1 648 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_y(void) const;

2164 5 get_z 0 4 2797 17 LVecBase4d::get_z 0 1 649 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_z(void) const;

2165 5 get_w 0 4 2797 17 LVecBase4d::get_w 0 1 650 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_w(void) const;

2166 8 set_cell 0 4 2797 20 LVecBase4d::set_cell 0 1 651 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase4d::set_cell(int i, double value);

2167 5 set_x 0 4 2797 17 LVecBase4d::set_x 0 1 652 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_x(double value);

2168 5 set_y 0 4 2797 17 LVecBase4d::set_y 0 1 653 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_y(double value);

2169 5 set_z 0 4 2797 17 LVecBase4d::set_z 0 1 654 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_z(double value);

2170 5 set_w 0 4 2797 17 LVecBase4d::set_w 0 1 655 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_w(double value);

2171 11 add_to_cell 0 4 2797 23 LVecBase4d::add_to_cell 0 1 656 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase4d::add_to_cell(int i, double value);

2172 5 add_x 0 4 2797 17 LVecBase4d::add_x 0 1 657 371
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_x(double value);

2173 5 add_y 0 4 2797 17 LVecBase4d::add_y 0 1 658 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_y(double value);

2174 5 add_z 0 4 2797 17 LVecBase4d::add_z 0 1 659 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_z(double value);

2175 5 add_w 0 4 2797 17 LVecBase4d::add_w 0 1 660 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_w(double value);

2176 8 get_data 0 4 2797 20 LVecBase4d::get_data 0 1 661 401
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase4d::get_data(void) const;

2177 18 get_num_components 0 4 2797 30 LVecBase4d::get_num_components 0 1 662 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4d::get_num_components(void) const;

2178 4 fill 0 4 2797 16 LVecBase4d::fill 0 1 663 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase4d::fill(double fill_value);

2179 3 set 0 4 2797 15 LVecBase4d::set 0 1 664 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::set(double x, double y, double z, double w);

2180 6 length 0 4 2797 18 LVecBase4d::length 0 1 665 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase4d::length(void) const;

2181 14 length_squared 0 4 2797 26 LVecBase4d::length_squared 0 1 666 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase4d::length_squared(void) const;

2182 9 normalize 0 4 2797 21 LVecBase4d::normalize 0 1 667 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4d::normalize(void);

2183 3 dot 0 4 2797 15 LVecBase4d::dot 0 1 668 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase4d::dot(LVecBase4d const &other) const;

2184 7 project 0 4 2797 19 LVecBase4d::project 0 1 669 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4d LVecBase4d::project(LVecBase4d const &onto) const;

2185 10 operator < 0 4 2797 22 LVecBase4d::operator < 0 1 670 498
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase4d::operator <(LVecBase4d const &other) const;

2186 11 operator == 0 4 2797 23 LVecBase4d::operator == 0 1 671 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4d::operator ==(LVecBase4d const &other) const;

2187 11 operator != 0 4 2797 23 LVecBase4d::operator != 0 1 672 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4d::operator !=(LVecBase4d const &other) const;

2188 10 compare_to 0 4 2797 22 LVecBase4d::compare_to 0 2 673 674 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase4d::compare_to(LVecBase4d const &other) const;
inline int LVecBase4d::compare_to(LVecBase4d const &other, double threshold) const;

2189 8 get_hash 0 4 2797 20 LVecBase4d::get_hash 0 2 675 676 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase4d::get_hash(void) const;
inline unsigned int LVecBase4d::get_hash(double threshold) const;

2190 8 add_hash 0 4 2797 20 LVecBase4d::add_hash 0 2 677 678 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase4d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase4d::add_hash(unsigned int hash, double threshold) const;

2191 10 operator - 0 68 2797 22 LVecBase4d::operator - 0 1 679 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase4d LVecBase4d::operator -(void) const;

2192 10 operator + 0 4 2797 22 LVecBase4d::operator + 0 1 680 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4d LVecBase4d::operator +(LVecBase4d const &other) const;

2193 10 operator - 0 4 2797 22 LVecBase4d::operator - 0 1 681 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4d LVecBase4d::operator -(LVecBase4d const &other) const;

2194 10 operator * 0 4 2797 22 LVecBase4d::operator * 0 1 682 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LVecBase4d::operator *(double scalar) const;

2195 10 operator / 0 4 2797 22 LVecBase4d::operator / 0 1 683 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LVecBase4d::operator /(double scalar) const;

2196 11 operator += 0 4 2797 23 LVecBase4d::operator += 0 1 684 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4d::operator +=(LVecBase4d const &other);

2197 11 operator -= 0 4 2797 23 LVecBase4d::operator -= 0 1 685 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4d::operator -=(LVecBase4d const &other);

2198 11 operator *= 0 4 2797 23 LVecBase4d::operator *= 0 1 686 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::operator *=(double scalar);

2199 11 operator /= 0 4 2797 23 LVecBase4d::operator /= 0 1 687 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::operator /=(double scalar);

2200 4 fmax 0 4 2797 16 LVecBase4d::fmax 0 1 688 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4d LVecBase4d::fmax(LVecBase4d const &other);

2201 4 fmin 0 4 2797 16 LVecBase4d::fmin 0 1 689 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4d LVecBase4d::fmin(LVecBase4d const &other);

2202 12 almost_equal 0 4 2797 24 LVecBase4d::almost_equal 0 2 690 691 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase4d::almost_equal(LVecBase4d const &other, double threshold) const;
inline bool LVecBase4d::almost_equal(LVecBase4d const &other) const;

2203 6 output 0 4 2797 18 LVecBase4d::output 0 1 692 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::output(ostream &out) const;

2204 11 python_repr 0 4 2797 23 LVecBase4d::python_repr 0 1 693 0
96
inline void LVecBase4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2205 13 generate_hash 0 4 2797 25 LVecBase4d::generate_hash 0 2 694 695 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase4d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase4d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

2206 20 write_datagram_fixed 0 4 2797 32 LVecBase4d::write_datagram_fixed 0 1 696 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase4d::write_datagram_fixed(Datagram &destination) const;

2207 19 read_datagram_fixed 0 4 2797 31 LVecBase4d::read_datagram_fixed 0 1 697 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase4d::read_datagram_fixed(DatagramIterator &source);

2208 14 write_datagram 0 4 2797 26 LVecBase4d::write_datagram 0 1 698 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::write_datagram(Datagram &destination) const;

2209 13 read_datagram 0 4 2797 25 LVecBase4d::read_datagram 0 1 699 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4d::read_datagram(DatagramIterator &source);

2210 14 get_class_type 0 4 2797 26 LVecBase4d::get_class_type 0 1 700 0
51
static TypeHandle LVecBase4d::get_class_type(void);

2211 19 UnalignedLVecBase4d 0 4 2798 40 UnalignedLVecBase4d::UnalignedLVecBase4d 0 4 701 702 703 704 932
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
298
inline UnalignedLVecBase4d::UnalignedLVecBase4d(void);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(LVecBase4d const &copy);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(UnalignedLVecBase4d const &copy);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(double x, double y, double z, double w);

2212 10 operator = 0 4 2798 31 UnalignedLVecBase4d::operator = 0 2 705 706 482
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
178
inline UnalignedLVecBase4d &UnalignedLVecBase4d::operator =(LVecBase4d const &copy);
inline UnalignedLVecBase4d &UnalignedLVecBase4d::operator =(UnalignedLVecBase4d const &copy);

2213 3 set 0 4 2798 24 UnalignedLVecBase4d::set 0 1 707 222
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
inline void UnalignedLVecBase4d::set(double x, double y, double z, double w);

2214 11 operator [] 0 4 2798 32 UnalignedLVecBase4d::operator [] 0 2 708 709 468
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline double UnalignedLVecBase4d::operator [](int i) const;
inline double &UnalignedLVecBase4d::operator [](int i);

2215 11 __setitem__ 0 4 2798 32 UnalignedLVecBase4d::__setitem__ 0 1 710 0
62
inline void UnalignedLVecBase4d::__setitem__(int i, double v);

2216 4 size 0 4 2798 25 UnalignedLVecBase4d::size 0 1 711 280
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
50
static inline int UnalignedLVecBase4d::size(void);

2217 8 get_data 0 4 2798 29 UnalignedLVecBase4d::get_data 0 1 712 408
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
63
inline double const *UnalignedLVecBase4d::get_data(void) const;

2218 18 get_num_components 0 4 2798 39 UnalignedLVecBase4d::get_num_components 0 1 713 283
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////
63
inline int UnalignedLVecBase4d::get_num_components(void) const;

2219 14 get_class_type 0 4 2798 35 UnalignedLVecBase4d::get_class_type 0 1 714 0
60
static TypeHandle UnalignedLVecBase4d::get_class_type(void);

2220 20 ~UnalignedLVecBase4d 0 4 2798 41 UnalignedLVecBase4d::~UnalignedLVecBase4d 0 0 0
48
UnalignedLVecBase4d::~UnalignedLVecBase4d(void);

2221 9 LVector4f 0 4 2799 20 LVector4f::LVector4f 0 4 715 716 717 718 1375
// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
199
inline LVector4f::LVector4f(void);
inline LVector4f::LVector4f(LVecBase4f const &copy);
inline LVector4f::LVector4f(float fill_value);
inline LVector4f::LVector4f(float x, float y, float z, float w);

2222 10 operator = 0 4 2799 21 LVector4f::operator = 0 2 719 720 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector4f &LVector4f::operator =(LVecBase4f const &copy);
inline LVector4f &LVector4f::operator =(float fill_value);

2223 11 __getattr__ 0 4 2799 22 LVector4f::__getattr__ 0 1 721 0
85
inline PyObject *LVector4f::__getattr__(basic_string< char > const &attr_name) const;

2224 11 __setattr__ 0 4 2799 22 LVector4f::__setattr__ 0 1 722 0
107
inline int LVector4f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2225 4 zero 0 4 2799 15 LVector4f::zero 0 1 723 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4f const &LVector4f::zero(void);

2226 6 unit_x 0 4 2799 17 LVector4f::unit_x 0 1 724 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_x(void);

2227 6 unit_y 0 4 2799 17 LVector4f::unit_y 0 1 725 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_y(void);

2228 6 unit_z 0 4 2799 17 LVector4f::unit_z 0 1 726 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_z(void);

2229 6 unit_w 0 4 2799 17 LVector4f::unit_w 0 1 727 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_w(void);

2230 10 operator - 0 68 2799 21 LVector4f::operator - 0 1 728 213
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector4f LVector4f::operator -(void) const;

2231 10 operator + 0 4 2799 21 LVector4f::operator + 0 2 729 730 445
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4f LVector4f::operator +(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator +(LVector4f const &other) const;

2232 10 operator - 0 4 2799 21 LVector4f::operator - 0 2 731 732 445
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4f LVector4f::operator -(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator -(LVector4f const &other) const;

2233 10 operator * 0 4 2799 21 LVector4f::operator * 0 1 733 223
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector4f LVector4f::operator *(float scalar) const;

2234 10 operator / 0 4 2799 21 LVector4f::operator / 0 1 734 223
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector4f LVector4f::operator /(float scalar) const;

2235 7 project 0 4 2799 18 LVector4f::project 0 1 735 389
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4f LVector4f::project(LVecBase4f const &onto) const;

2236 11 python_repr 0 4 2799 22 LVector4f::python_repr 0 1 736 0
95
inline void LVector4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2237 14 get_class_type 0 4 2799 25 LVector4f::get_class_type 0 1 737 0
50
static TypeHandle LVector4f::get_class_type(void);

2238 10 ~LVector4f 0 4 2799 21 LVector4f::~LVector4f 0 0 0
28
LVector4f::~LVector4f(void);

2239 9 LVector4d 0 4 2800 20 LVector4d::LVector4d 0 4 738 739 740 741 1375
// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
204
inline LVector4d::LVector4d(void);
inline LVector4d::LVector4d(LVecBase4d const &copy);
inline LVector4d::LVector4d(double fill_value);
inline LVector4d::LVector4d(double x, double y, double z, double w);

2240 10 operator = 0 4 2800 21 LVector4d::operator = 0 2 742 743 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector4d &LVector4d::operator =(LVecBase4d const &copy);
inline LVector4d &LVector4d::operator =(double fill_value);

2241 11 __getattr__ 0 4 2800 22 LVector4d::__getattr__ 0 1 744 0
85
inline PyObject *LVector4d::__getattr__(basic_string< char > const &attr_name) const;

2242 11 __setattr__ 0 4 2800 22 LVector4d::__setattr__ 0 1 745 0
107
inline int LVector4d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2243 4 zero 0 4 2800 15 LVector4d::zero 0 1 746 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4d const &LVector4d::zero(void);

2244 6 unit_x 0 4 2800 17 LVector4d::unit_x 0 1 747 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_x(void);

2245 6 unit_y 0 4 2800 17 LVector4d::unit_y 0 1 748 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_y(void);

2246 6 unit_z 0 4 2800 17 LVector4d::unit_z 0 1 749 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_z(void);

2247 6 unit_w 0 4 2800 17 LVector4d::unit_w 0 1 750 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_w(void);

2248 10 operator - 0 68 2800 21 LVector4d::operator - 0 1 751 213
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector4d LVector4d::operator -(void) const;

2249 10 operator + 0 4 2800 21 LVector4d::operator + 0 2 752 753 445
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4d LVector4d::operator +(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator +(LVector4d const &other) const;

2250 10 operator - 0 4 2800 21 LVector4d::operator - 0 2 754 755 445
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4d LVector4d::operator -(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator -(LVector4d const &other) const;

2251 10 operator * 0 4 2800 21 LVector4d::operator * 0 1 756 223
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector4d LVector4d::operator *(double scalar) const;

2252 10 operator / 0 4 2800 21 LVector4d::operator / 0 1 757 223
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector4d LVector4d::operator /(double scalar) const;

2253 7 project 0 4 2800 18 LVector4d::project 0 1 758 389
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4d LVector4d::project(LVecBase4d const &onto) const;

2254 11 python_repr 0 4 2800 22 LVector4d::python_repr 0 1 759 0
95
inline void LVector4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2255 14 get_class_type 0 4 2800 25 LVector4d::get_class_type 0 1 760 0
50
static TypeHandle LVector4d::get_class_type(void);

2256 10 ~LVector4d 0 4 2800 21 LVector4d::~LVector4d 0 0 0
28
LVector4d::~LVector4d(void);

2257 8 LPoint4f 0 4 2801 18 LPoint4f::LPoint4f 0 4 761 762 763 764 1370
// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
191
inline LPoint4f::LPoint4f(void);
inline LPoint4f::LPoint4f(LVecBase4f const &copy);
inline LPoint4f::LPoint4f(float fill_value);
inline LPoint4f::LPoint4f(float x, float y, float z, float w);

2258 10 operator = 0 4 2801 20 LPoint4f::operator = 0 2 765 766 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint4f &LPoint4f::operator =(LVecBase4f const &copy);
inline LPoint4f &LPoint4f::operator =(float fill_value);

2259 11 __getattr__ 0 4 2801 21 LPoint4f::__getattr__ 0 1 767 0
84
inline PyObject *LPoint4f::__getattr__(basic_string< char > const &attr_name) const;

2260 11 __setattr__ 0 4 2801 21 LPoint4f::__setattr__ 0 1 768 0
106
inline int LPoint4f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2261 4 zero 0 4 2801 14 LPoint4f::zero 0 1 769 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4f const &LPoint4f::zero(void);

2262 6 unit_x 0 4 2801 16 LPoint4f::unit_x 0 1 770 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_x(void);

2263 6 unit_y 0 4 2801 16 LPoint4f::unit_y 0 1 771 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_y(void);

2264 6 unit_z 0 4 2801 16 LPoint4f::unit_z 0 1 772 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_z(void);

2265 6 unit_w 0 4 2801 16 LPoint4f::unit_w 0 1 773 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_w(void);

2266 10 operator - 0 68 2801 20 LPoint4f::operator - 0 1 774 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint4f LPoint4f::operator -(void) const;

2267 10 operator + 0 4 2801 20 LPoint4f::operator + 0 2 775 776 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase4f LPoint4f::operator +(LVecBase4f const &other) const;
inline LPoint4f LPoint4f::operator +(LVector4f const &other) const;

2268 10 operator - 0 4 2801 20 LPoint4f::operator - 0 3 777 778 779 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase4f LPoint4f::operator -(LVecBase4f const &other) const;
inline LVector4f LPoint4f::operator -(LPoint4f const &other) const;
inline LPoint4f LPoint4f::operator -(LVector4f const &other) const;

2269 10 operator * 0 4 2801 20 LPoint4f::operator * 0 1 780 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint4f LPoint4f::operator *(float scalar) const;

2270 10 operator / 0 4 2801 20 LPoint4f::operator / 0 1 781 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint4f LPoint4f::operator /(float scalar) const;

2271 7 project 0 4 2801 17 LPoint4f::project 0 1 782 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4f LPoint4f::project(LVecBase4f const &onto) const;

2272 11 python_repr 0 4 2801 21 LPoint4f::python_repr 0 1 783 0
94
inline void LPoint4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2273 14 get_class_type 0 4 2801 24 LPoint4f::get_class_type 0 1 784 0
49
static TypeHandle LPoint4f::get_class_type(void);

2274 9 ~LPoint4f 0 4 2801 19 LPoint4f::~LPoint4f 0 0 0
26
LPoint4f::~LPoint4f(void);

2275 8 LPoint4d 0 4 2802 18 LPoint4d::LPoint4d 0 4 785 786 787 788 1370
// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
196
inline LPoint4d::LPoint4d(void);
inline LPoint4d::LPoint4d(LVecBase4d const &copy);
inline LPoint4d::LPoint4d(double fill_value);
inline LPoint4d::LPoint4d(double x, double y, double z, double w);

2276 10 operator = 0 4 2802 20 LPoint4d::operator = 0 2 789 790 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint4d &LPoint4d::operator =(LVecBase4d const &copy);
inline LPoint4d &LPoint4d::operator =(double fill_value);

2277 11 __getattr__ 0 4 2802 21 LPoint4d::__getattr__ 0 1 791 0
84
inline PyObject *LPoint4d::__getattr__(basic_string< char > const &attr_name) const;

2278 11 __setattr__ 0 4 2802 21 LPoint4d::__setattr__ 0 1 792 0
106
inline int LPoint4d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2279 4 zero 0 4 2802 14 LPoint4d::zero 0 1 793 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4d const &LPoint4d::zero(void);

2280 6 unit_x 0 4 2802 16 LPoint4d::unit_x 0 1 794 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_x(void);

2281 6 unit_y 0 4 2802 16 LPoint4d::unit_y 0 1 795 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_y(void);

2282 6 unit_z 0 4 2802 16 LPoint4d::unit_z 0 1 796 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_z(void);

2283 6 unit_w 0 4 2802 16 LPoint4d::unit_w 0 1 797 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_w(void);

2284 10 operator - 0 68 2802 20 LPoint4d::operator - 0 1 798 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint4d LPoint4d::operator -(void) const;

2285 10 operator + 0 4 2802 20 LPoint4d::operator + 0 2 799 800 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase4d LPoint4d::operator +(LVecBase4d const &other) const;
inline LPoint4d LPoint4d::operator +(LVector4d const &other) const;

2286 10 operator - 0 4 2802 20 LPoint4d::operator - 0 3 801 802 803 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase4d LPoint4d::operator -(LVecBase4d const &other) const;
inline LVector4d LPoint4d::operator -(LPoint4d const &other) const;
inline LPoint4d LPoint4d::operator -(LVector4d const &other) const;

2287 10 operator * 0 4 2802 20 LPoint4d::operator * 0 1 804 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint4d LPoint4d::operator *(double scalar) const;

2288 10 operator / 0 4 2802 20 LPoint4d::operator / 0 1 805 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint4d LPoint4d::operator /(double scalar) const;

2289 7 project 0 4 2802 17 LPoint4d::project 0 1 806 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4d LPoint4d::project(LVecBase4d const &onto) const;

2290 11 python_repr 0 4 2802 21 LPoint4d::python_repr 0 1 807 0
94
inline void LPoint4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2291 14 get_class_type 0 4 2802 24 LPoint4d::get_class_type 0 1 808 0
49
static TypeHandle LPoint4d::get_class_type(void);

2292 9 ~LPoint4d 0 4 2802 19 LPoint4d::~LPoint4d 0 0 0
26
LPoint4d::~LPoint4d(void);

2293 11 operator [] 0 4 2804 27 LMatrix3f::Row::operator [] 0 2 918 919 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
104
inline float LMatrix3f::Row::operator [](int i) const;
inline float &LMatrix3f::Row::operator [](int i);

2294 11 __setitem__ 0 4 2804 27 LMatrix3f::Row::__setitem__ 0 1 920 0
56
inline void LMatrix3f::Row::__setitem__(int i, float v);

2295 4 size 0 4 2804 20 LMatrix3f::Row::size 0 1 921 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3f::Row::size(void);

2296 4 ~Row 0 4 2804 20 LMatrix3f::Row::~Row 0 0 0
27
LMatrix3f::Row::~Row(void);

2297 11 operator [] 0 4 2805 28 LMatrix3f::CRow::operator [] 0 1 922 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline float LMatrix3f::CRow::operator [](int i) const;

2298 4 size 0 4 2805 21 LMatrix3f::CRow::size 0 1 923 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3f::CRow::size(void);

2299 5 ~CRow 0 4 2805 22 LMatrix3f::CRow::~CRow 0 0 0
29
LMatrix3f::CRow::~CRow(void);

2300 9 LMatrix3f 0 4 2803 20 LMatrix3f::LMatrix3f 0 3 809 810 811 677
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
215
inline LMatrix3f::LMatrix3f(void);
inline LMatrix3f::LMatrix3f(LMatrix3f const &other);
inline LMatrix3f::LMatrix3f(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

2301 10 operator = 0 4 2803 21 LMatrix3f::operator = 0 2 812 813 468
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LMatrix3f &LMatrix3f::operator =(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator =(float fill_value);

2302 12 operator new 0 4 2803 23 LMatrix3f::operator new 0 1 814 0
124
inline void *LMatrix3f::operator new(unsigned int size);
inline void *LMatrix3f::operator new(unsigned int size, void *ptr);

2303 15 operator delete 0 4 2803 26 LMatrix3f::operator delete 0 0 0
106
inline void LMatrix3f::operator delete(void *ptr);
inline void LMatrix3f::operator delete(void *, void *);

2304 12 validate_ptr 0 4 2803 23 LMatrix3f::validate_ptr 0 0 0
60
static inline bool LMatrix3f::validate_ptr(void const *ptr);

2305 10 __reduce__ 0 4 2803 21 LMatrix3f::__reduce__ 0 1 815 0
61
inline PyObject *LMatrix3f::__reduce__(PyObject *self) const;

2306 4 fill 0 4 2803 15 LMatrix3f::fill 0 1 816 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
39
void LMatrix3f::fill(float fill_value);

2307 3 set 0 4 2803 14 LMatrix3f::set 0 1 817 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
126
inline void LMatrix3f::set(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

2308 7 set_row 0 4 2803 18 LMatrix3f::set_row 0 2 818 819 636
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_row(int row, LVecBase3f const &v);
inline void LMatrix3f::set_row(int row, LVecBase2f const &v);

2309 7 set_col 0 4 2803 18 LMatrix3f::set_col 0 2 820 821 645
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_col(int col, LVecBase3f const &v);
inline void LMatrix3f::set_col(int col, LVecBase2f const &v);

2310 7 get_row 0 4 2803 18 LMatrix3f::get_row 0 2 822 823 638
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3f LMatrix3f::get_row(int row) const;
inline void LMatrix3f::get_row(LVecBase3f &result_vec, int row) const;

2311 7 get_col 0 4 2803 18 LMatrix3f::get_col 0 1 824 305
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3f LMatrix3f::get_col(int col) const;

2312 8 get_row2 0 4 2803 19 LMatrix3f::get_row2 0 1 825 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_row2(int row) const;

2313 8 get_col2 0 4 2803 19 LMatrix3f::get_col2 0 1 826 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_col2(int col) const;

2314 11 operator () 0 4 2803 22 LMatrix3f::operator () 0 2 827 828 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix3f::operator ()(int row, int col);
inline float LMatrix3f::operator ()(int row, int col) const;

2315 11 operator [] 0 4 2803 22 LMatrix3f::operator [] 0 2 829 830 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix3f::CRow LMatrix3f::operator [](int i) const;
inline LMatrix3f::Row LMatrix3f::operator [](int i);

2316 4 size 0 4 2803 15 LMatrix3f::size 0 1 831 266
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3f::size(void);

2317 6 is_nan 0 4 2803 17 LMatrix3f::is_nan 0 1 832 310
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3f::is_nan(void) const;

2318 8 get_cell 0 4 2803 19 LMatrix3f::get_cell 0 1 833 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix3f::get_cell(int row, int col) const;

2319 8 set_cell 0 4 2803 19 LMatrix3f::set_cell 0 1 834 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix3f::set_cell(int row, int col, float value);

2320 8 get_data 0 4 2803 19 LMatrix3f::get_data 0 1 835 401
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix3f::get_data(void) const;

2321 18 get_num_components 0 4 2803 29 LMatrix3f::get_num_components 0 1 836 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3f::get_num_components(void) const;

2322 10 operator < 0 4 2803 21 LMatrix3f::operator < 0 1 837 504
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix3f::operator <(LMatrix3f const &other) const;

2323 11 operator == 0 4 2803 22 LMatrix3f::operator == 0 1 838 226
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3f::operator ==(LMatrix3f const &other) const;

2324 11 operator != 0 4 2803 22 LMatrix3f::operator != 0 1 839 228
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3f::operator !=(LMatrix3f const &other) const;

2325 10 compare_to 0 4 2803 21 LMatrix3f::compare_to 0 2 840 841 826
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix3f::compare_to(LMatrix3f const &other) const;
int LMatrix3f::compare_to(LMatrix3f const &other, float threshold) const;

2326 8 get_hash 0 4 2803 19 LMatrix3f::get_hash 0 2 842 843 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
116
inline unsigned int LMatrix3f::get_hash(void) const;
inline unsigned int LMatrix3f::get_hash(float threshold) const;

2327 8 add_hash 0 4 2803 19 LMatrix3f::add_hash 0 2 844 845 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
148
inline unsigned int LMatrix3f::add_hash(unsigned int hash) const;
inline unsigned int LMatrix3f::add_hash(unsigned int hash, float threshold) const;

2328 5 xform 0 4 2803 16 LMatrix3f::xform 0 1 846 256
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3f LMatrix3f::xform(LVecBase3f const &v) const;

2329 11 xform_point 0 4 2803 22 LMatrix3f::xform_point 0 1 847 403
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LMatrix3f::xform_point(LVecBase2f const &v) const;

2330 9 xform_vec 0 4 2803 20 LMatrix3f::xform_vec 0 2 848 849 849
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2f LMatrix3f::xform_vec(LVecBase2f const &v) const;
inline LVecBase3f LMatrix3f::xform_vec(LVecBase3f const &v) const;

2331 17 xform_vec_general 0 4 2803 28 LMatrix3f::xform_vec_general 0 1 850 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix3f::xform_vec_general(LVecBase3f const &v) const;

2332 14 xform_in_place 0 4 2803 25 LMatrix3f::xform_in_place 0 1 851 265
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix3f::xform_in_place(LVecBase3f &v) const;

2333 20 xform_point_in_place 0 4 2803 31 LMatrix3f::xform_point_in_place 0 1 852 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix3f::xform_point_in_place(LVecBase2f &v) const;

2334 18 xform_vec_in_place 0 4 2803 29 LMatrix3f::xform_vec_in_place 0 2 853 854 804
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
127
inline void LMatrix3f::xform_vec_in_place(LVecBase2f &v) const;
inline void LMatrix3f::xform_vec_in_place(LVecBase3f &v) const;

2335 26 xform_vec_general_in_place 0 4 2803 37 LMatrix3f::xform_vec_general_in_place 0 1 855 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix3f::xform_vec_general_in_place(LVecBase3f &v) const;

2336 8 multiply 0 4 2803 19 LMatrix3f::multiply 0 1 856 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3f::multiply(LMatrix3f const &other1, LMatrix3f const &other2);

2337 10 operator * 0 4 2803 21 LMatrix3f::operator * 0 2 857 858 450
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
129
inline LMatrix3f LMatrix3f::operator *(LMatrix3f const &other) const;
inline LMatrix3f LMatrix3f::operator *(float scalar) const;

2338 10 operator / 0 4 2803 21 LMatrix3f::operator / 0 1 859 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LMatrix3f LMatrix3f::operator /(float scalar) const;

2339 11 operator += 0 4 2803 22 LMatrix3f::operator += 0 1 860 278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator +=(LMatrix3f const &other);

2340 11 operator -= 0 4 2803 22 LMatrix3f::operator -= 0 1 861 281
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator -=(LMatrix3f const &other);

2341 11 operator *= 0 4 2803 22 LMatrix3f::operator *= 0 2 862 863 481
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
121
inline LMatrix3f &LMatrix3f::operator *=(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator *=(float scalar);

2342 11 operator /= 0 4 2803 22 LMatrix3f::operator /= 0 1 864 254
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
55
inline LMatrix3f &LMatrix3f::operator /=(float scalar);

2343 11 determinant 0 4 2803 22 LMatrix3f::determinant 0 1 865 259
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
48
inline float LMatrix3f::determinant(void) const;

2344 14 transpose_from 0 4 2803 25 LMatrix3f::transpose_from 0 1 866 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3f::transpose_from(LMatrix3f const &other);

2345 18 transpose_in_place 0 4 2803 29 LMatrix3f::transpose_in_place 0 1 867 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3f::transpose_in_place(void);

2346 11 invert_from 0 4 2803 22 LMatrix3f::invert_from 0 1 868 808
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3f::invert_from(LMatrix3f const &other);

2347 15 invert_in_place 0 4 2803 26 LMatrix3f::invert_in_place 0 1 869 364
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3f::invert_in_place(void);

2348 21 invert_transpose_from 0 4 2803 32 LMatrix3f::invert_transpose_from 0 2 870 871 698
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3f::invert_transpose_from(LMatrix3f const &other);
inline bool LMatrix3f::invert_transpose_from(LMatrix4f const &other);

2349 9 ident_mat 0 4 2803 20 LMatrix3f::ident_mat 0 1 872 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3f const &LMatrix3f::ident_mat(void);

2350 17 set_translate_mat 0 4 2803 28 LMatrix3f::set_translate_mat 0 1 873 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3f::set_translate_mat(LVecBase2f const &trans);

2351 14 set_rotate_mat 0 4 2803 25 LMatrix3f::set_rotate_mat 0 3 874 875 876 816
// The following named constructors return 3x3 matrices suitable for
// scale/rotate transforms in 3-d coordinate space.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
156
inline void LMatrix3f::set_rotate_mat(float angle);
void LMatrix3f::set_rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2352 13 set_scale_mat 0 4 2803 24 LMatrix3f::set_scale_mat 0 2 877 878 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3f::set_scale_mat(LVecBase2f const &scale);
inline void LMatrix3f::set_scale_mat(LVecBase3f const &scale);

2353 13 translate_mat 0 4 2803 24 LMatrix3f::translate_mat 0 2 879 880 608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
144
static inline LMatrix3f LMatrix3f::translate_mat(LVecBase2f const &trans);
static inline LMatrix3f LMatrix3f::translate_mat(float tx, float ty);

2354 10 rotate_mat 0 4 2803 21 LMatrix3f::rotate_mat 0 3 881 882 883 671
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
179
static inline LMatrix3f LMatrix3f::rotate_mat(float angle);
static inline LMatrix3f LMatrix3f::rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2355 9 scale_mat 0 4 2803 20 LMatrix3f::scale_mat 0 4 884 885 886 887 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
283
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase2f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy);
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase3f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy, float sz);

2356 23 set_rotate_mat_normaxis 0 4 2803 34 LMatrix3f::set_rotate_mat_normaxis 0 2 888 889 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
113
void LMatrix3f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2357 19 rotate_mat_normaxis 0 4 2803 30 LMatrix3f::rotate_mat_normaxis 0 2 890 891 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
128
static inline LMatrix3f LMatrix3f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2358 13 set_shear_mat 0 4 2803 24 LMatrix3f::set_shear_mat 0 2 892 893 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix3f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2359 9 shear_mat 0 4 2803 20 LMatrix3f::shear_mat 0 4 894 895 896 897 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
224
static inline LMatrix3f LMatrix3f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3f LMatrix3f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2360 19 set_scale_shear_mat 0 4 2803 30 LMatrix3f::set_scale_shear_mat 0 2 898 899 312
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
122
void LMatrix3f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2361 15 scale_shear_mat 0 4 2803 26 LMatrix3f::scale_shear_mat 0 4 900 901 902 903 620
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
291
static inline LMatrix3f LMatrix3f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3f LMatrix3f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2362 11 convert_mat 0 4 2803 22 LMatrix3f::convert_mat 0 1 904 350
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3f const &LMatrix3f::convert_mat(CoordinateSystem from, CoordinateSystem to);

2363 12 almost_equal 0 4 2803 23 LMatrix3f::almost_equal 0 2 905 906 813
// We don't have a scale_mat() that takes a single uniform scale
// parameter, because it would be ambiguous whether we mean a 2-d or
// a 3-d scale.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
143
bool LMatrix3f::almost_equal(LMatrix3f const &other, float threshold) const;
inline bool LMatrix3f::almost_equal(LMatrix3f const &other) const;

2364 6 output 0 4 2803 17 LMatrix3f::output 0 1 907 215
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3f::output(ostream &out) const;

2365 5 write 0 4 2803 16 LMatrix3f::write 0 2 908 909 214
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3f::write(ostream &out, int indent_level = (0)) const;

2366 11 python_repr 0 4 2803 22 LMatrix3f::python_repr 0 1 910 0
95
inline void LMatrix3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2367 13 generate_hash 0 4 2803 24 LMatrix3f::generate_hash 0 2 911 912 544
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
161
inline void LMatrix3f::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix3f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

2368 20 write_datagram_fixed 0 4 2803 31 LMatrix3f::write_datagram_fixed 0 1 913 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix3f::write_datagram_fixed(Datagram &destination) const;

2369 19 read_datagram_fixed 0 4 2803 30 LMatrix3f::read_datagram_fixed 0 1 914 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix3f::read_datagram_fixed(DatagramIterator &scan);

2370 14 write_datagram 0 4 2803 25 LMatrix3f::write_datagram 0 1 915 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix3f::write_datagram(Datagram &destination) const;

2371 13 read_datagram 0 4 2803 24 LMatrix3f::read_datagram 0 1 916 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix3f::read_datagram(DatagramIterator &source);

2372 14 get_class_type 0 4 2803 25 LMatrix3f::get_class_type 0 1 917 0
50
static TypeHandle LMatrix3f::get_class_type(void);

2373 10 ~LMatrix3f 0 4 2803 21 LMatrix3f::~LMatrix3f 0 0 0
28
LMatrix3f::~LMatrix3f(void);

2374 9 transpose 0 1 0 9 transpose 0 4 1490 1491 1492 1493 0
191
inline LMatrix3f transpose(LMatrix3f const &a);
inline LMatrix4f transpose(LMatrix4f const &a);
inline LMatrix3d transpose(LMatrix3d const &a);
inline LMatrix4d transpose(LMatrix4d const &a);

2375 6 invert 0 1 0 6 invert 0 6 1494 1495 1496 1497 1498 1499 0
281
inline LMatrix3f invert(LMatrix3f const &a);
inline LMatrix4f invert(LMatrix4f const &a);
inline LMatrix3d invert(LMatrix3d const &a);
inline LMatrix4d invert(LMatrix4d const &a);
inline LQuaternionf invert(LQuaternionf const &a);
inline LQuaterniond invert(LQuaterniond const &a);

2376 11 operator [] 0 4 2807 27 LMatrix4f::Row::operator [] 0 2 1043 1044 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
104
inline float LMatrix4f::Row::operator [](int i) const;
inline float &LMatrix4f::Row::operator [](int i);

2377 11 __setitem__ 0 4 2807 27 LMatrix4f::Row::__setitem__ 0 1 1045 0
56
inline void LMatrix4f::Row::__setitem__(int i, float v);

2378 4 size 0 4 2807 20 LMatrix4f::Row::size 0 1 1046 271
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4f::Row::size(void);

2379 4 ~Row 0 4 2807 20 LMatrix4f::Row::~Row 0 0 0
27
LMatrix4f::Row::~Row(void);

2380 11 operator [] 0 4 2808 28 LMatrix4f::CRow::operator [] 0 1 1047 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline float LMatrix4f::CRow::operator [](int i) const;

2381 4 size 0 4 2808 21 LMatrix4f::CRow::size 0 1 1048 272
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4f::CRow::size(void);

2382 5 ~CRow 0 4 2808 22 LMatrix4f::CRow::~CRow 0 0 0
29
LMatrix4f::CRow::~CRow(void);

2383 9 LMatrix4f 0 4 2806 20 LMatrix4f::LMatrix4f 0 6 924 925 926 927 928 929 1566
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
487
inline LMatrix4f::LMatrix4f(void);
inline LMatrix4f::LMatrix4f(LMatrix4f const &other);
inline LMatrix4f::LMatrix4f(UnalignedLMatrix4f const &other);
inline LMatrix4f::LMatrix4f(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3, LVecBase3f const &trans);

2384 10 operator = 0 4 2806 21 LMatrix4f::operator = 0 3 930 931 932 697
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
197
inline LMatrix4f &LMatrix4f::operator =(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator =(UnalignedLMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator =(float fill_value);

2385 12 operator new 0 4 2806 23 LMatrix4f::operator new 0 1 933 0
124
inline void *LMatrix4f::operator new(unsigned int size);
inline void *LMatrix4f::operator new(unsigned int size, void *ptr);

2386 15 operator delete 0 4 2806 26 LMatrix4f::operator delete 0 0 0
106
inline void LMatrix4f::operator delete(void *ptr);
inline void LMatrix4f::operator delete(void *, void *);

2387 12 validate_ptr 0 4 2806 23 LMatrix4f::validate_ptr 0 0 0
60
static inline bool LMatrix4f::validate_ptr(void const *ptr);

2388 10 __reduce__ 0 4 2806 21 LMatrix4f::__reduce__ 0 1 934 0
61
inline PyObject *LMatrix4f::__reduce__(PyObject *self) const;

2389 4 fill 0 4 2806 15 LMatrix4f::fill 0 1 935 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
46
inline void LMatrix4f::fill(float fill_value);

2390 3 set 0 4 2806 14 LMatrix4f::set 0 1 936 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
203
inline void LMatrix4f::set(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

2391 11 set_upper_3 0 4 2806 22 LMatrix4f::set_upper_3 0 1 937 294
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4f::set_upper_3(LMatrix3f const &upper3);

2392 11 get_upper_3 0 4 2806 22 LMatrix4f::get_upper_3 0 1 938 299
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3f LMatrix4f::get_upper_3(void) const;

2393 7 set_row 0 4 2806 18 LMatrix4f::set_row 0 2 939 940 610
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_row(int row, LVecBase4f const &v);
inline void LMatrix4f::set_row(int row, LVecBase3f const &v);

2394 7 set_col 0 4 2806 18 LMatrix4f::set_col 0 2 941 942 613
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_col(int col, LVecBase4f const &v);
inline void LMatrix4f::set_col(int col, LVecBase3f const &v);

2395 7 get_row 0 4 2806 18 LMatrix4f::get_row 0 2 943 944 626
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4f LMatrix4f::get_row(int row) const;
inline void LMatrix4f::get_row(LVecBase4f &result_vec, int row) const;

2396 7 get_col 0 4 2806 18 LMatrix4f::get_col 0 1 945 300
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f LMatrix4f::get_col(int col) const;

2397 8 get_row3 0 4 2806 19 LMatrix4f::get_row3 0 2 946 947 674
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3f LMatrix4f::get_row3(int row) const;
inline void LMatrix4f::get_row3(LVecBase3f &result_vec, int row) const;

2398 8 get_col3 0 4 2806 19 LMatrix4f::get_col3 0 1 948 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f LMatrix4f::get_col3(int col) const;

2399 11 operator () 0 4 2806 22 LMatrix4f::operator () 0 2 949 950 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix4f::operator ()(int row, int col);
inline float LMatrix4f::operator ()(int row, int col) const;

2400 11 operator [] 0 4 2806 22 LMatrix4f::operator [] 0 2 951 952 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix4f::CRow LMatrix4f::operator [](int i) const;
inline LMatrix4f::Row LMatrix4f::operator [](int i);

2401 4 size 0 4 2806 15 LMatrix4f::size 0 1 953 263
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4f::size(void);

2402 6 is_nan 0 4 2806 17 LMatrix4f::is_nan 0 1 954 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4f::is_nan(void) const;

2403 8 get_cell 0 4 2806 19 LMatrix4f::get_cell 0 1 955 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix4f::get_cell(int row, int col) const;

2404 8 set_cell 0 4 2806 19 LMatrix4f::set_cell 0 1 956 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4f::set_cell(int row, int col, float value);

2405 8 get_data 0 4 2806 19 LMatrix4f::get_data 0 1 957 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix4f::get_data(void) const;

2406 18 get_num_components 0 4 2806 29 LMatrix4f::get_num_components 0 1 958 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4f::get_num_components(void) const;

2407 5 begin 0 4 2806 16 LMatrix4f::begin 0 2 959 960 634
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
93
inline float const *LMatrix4f::begin(void);
inline float const *LMatrix4f::begin(void) const;

2408 3 end 0 4 2806 14 LMatrix4f::end 0 2 961 962 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
89
inline float const *LMatrix4f::end(void);
inline float const *LMatrix4f::end(void) const;

2409 10 operator < 0 4 2806 21 LMatrix4f::operator < 0 1 963 501
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix4f::operator <(LMatrix4f const &other) const;

2410 11 operator == 0 4 2806 22 LMatrix4f::operator == 0 1 964 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4f::operator ==(LMatrix4f const &other) const;

2411 11 operator != 0 4 2806 22 LMatrix4f::operator != 0 1 965 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4f::operator !=(LMatrix4f const &other) const;

2412 10 compare_to 0 4 2806 21 LMatrix4f::compare_to 0 2 966 967 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix4f::compare_to(LMatrix4f const &other) const;
int LMatrix4f::compare_to(LMatrix4f const &other, float threshold) const;

2413 8 get_hash 0 4 2806 19 LMatrix4f::get_hash 0 2 968 969 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
116
inline unsigned int LMatrix4f::get_hash(void) const;
inline unsigned int LMatrix4f::get_hash(float threshold) const;

2414 8 add_hash 0 4 2806 19 LMatrix4f::add_hash 0 2 970 971 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
148
inline unsigned int LMatrix4f::add_hash(unsigned int hash) const;
inline unsigned int LMatrix4f::add_hash(unsigned int hash, float threshold) const;

2415 5 xform 0 4 2806 16 LMatrix4f::xform 0 1 972 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4f LMatrix4f::xform(LVecBase4f const &v) const;

2416 11 xform_point 0 4 2806 22 LMatrix4f::xform_point 0 1 973 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LMatrix4f::xform_point(LVecBase3f const &v) const;

2417 19 xform_point_general 0 4 2806 30 LMatrix4f::xform_point_general 0 1 974 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
76
inline LVecBase3f LMatrix4f::xform_point_general(LVecBase3f const &v) const;

2418 9 xform_vec 0 4 2806 20 LMatrix4f::xform_vec 0 1 975 402
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LMatrix4f::xform_vec(LVecBase3f const &v) const;

2419 17 xform_vec_general 0 4 2806 28 LMatrix4f::xform_vec_general 0 1 976 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix4f::xform_vec_general(LVecBase3f const &v) const;

2420 14 xform_in_place 0 4 2806 25 LMatrix4f::xform_in_place 0 1 977 315
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix4f::xform_in_place(LVecBase4f &v) const;

2421 20 xform_point_in_place 0 4 2806 31 LMatrix4f::xform_point_in_place 0 1 978 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix4f::xform_point_in_place(LVecBase3f &v) const;

2422 28 xform_point_general_in_place 0 4 2806 39 LMatrix4f::xform_point_general_in_place 0 1 979 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
73
inline void LMatrix4f::xform_point_general_in_place(LVecBase3f &v) const;

2423 18 xform_vec_in_place 0 4 2806 29 LMatrix4f::xform_vec_in_place 0 1 980 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4f::xform_vec_in_place(LVecBase3f &v) const;

2424 26 xform_vec_general_in_place 0 4 2806 37 LMatrix4f::xform_vec_general_in_place 0 1 981 355
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix4f::xform_vec_general_in_place(LVecBase3f &v) const;

2425 8 multiply 0 4 2806 19 LMatrix4f::multiply 0 1 982 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4f::multiply(LMatrix4f const &other1, LMatrix4f const &other2);

2426 10 operator * 0 4 2806 21 LMatrix4f::operator * 0 2 983 984 444
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
129
inline LMatrix4f LMatrix4f::operator *(LMatrix4f const &other) const;
inline LMatrix4f LMatrix4f::operator *(float scalar) const;

2427 10 operator / 0 4 2806 21 LMatrix4f::operator / 0 1 985 221
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LMatrix4f LMatrix4f::operator /(float scalar) const;

2428 11 operator += 0 4 2806 22 LMatrix4f::operator += 0 1 986 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator +=(LMatrix4f const &other);

2429 11 operator -= 0 4 2806 22 LMatrix4f::operator -= 0 1 987 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator -=(LMatrix4f const &other);

2430 11 operator *= 0 4 2806 22 LMatrix4f::operator *= 0 2 988 989 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LMatrix4f &LMatrix4f::operator *=(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator *=(float scalar);

2431 11 operator /= 0 4 2806 22 LMatrix4f::operator /= 0 1 990 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline LMatrix4f &LMatrix4f::operator /=(float scalar);

2432 14 transpose_from 0 4 2806 25 LMatrix4f::transpose_from 0 1 991 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::transpose_from(LMatrix4f const &other);

2433 18 transpose_in_place 0 4 2806 29 LMatrix4f::transpose_in_place 0 1 992 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4f::transpose_in_place(void);

2434 11 invert_from 0 4 2806 22 LMatrix4f::invert_from 0 1 993 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4f::invert_from(LMatrix4f const &other);

2435 18 invert_affine_from 0 4 2806 29 LMatrix4f::invert_affine_from 0 1 994 931
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4f::invert_affine_from(LMatrix4f const &other);

2436 15 invert_in_place 0 4 2806 26 LMatrix4f::invert_in_place 0 1 995 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4f::invert_in_place(void);

2437 10 accumulate 0 4 2806 21 LMatrix4f::accumulate 0 1 996 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
////////////////////////////////////////////////////////////////////
72
inline void LMatrix4f::accumulate(LMatrix4f const &other, float weight);

2438 9 ident_mat 0 4 2806 20 LMatrix4f::ident_mat 0 1 997 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::ident_mat(void);

2439 8 ones_mat 0 4 2806 19 LMatrix4f::ones_mat 0 1 998 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4f const &LMatrix4f::ones_mat(void);

2440 9 zeros_mat 0 4 2806 20 LMatrix4f::zeros_mat 0 1 999 260
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::zeros_mat(void);

2441 17 set_translate_mat 0 4 2806 28 LMatrix4f::set_translate_mat 0 1 1000 303
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4f::set_translate_mat(LVecBase3f const &trans);

2442 14 set_rotate_mat 0 4 2806 25 LMatrix4f::set_rotate_mat 0 2 1001 1002 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
104
void LMatrix4f::set_rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2443 23 set_rotate_mat_normaxis 0 4 2806 34 LMatrix4f::set_rotate_mat_normaxis 0 2 1003 1004 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
113
void LMatrix4f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2444 13 set_scale_mat 0 4 2806 24 LMatrix4f::set_scale_mat 0 1 1005 319
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::set_scale_mat(LVecBase3f const &scale);

2445 13 set_shear_mat 0 4 2806 24 LMatrix4f::set_shear_mat 0 2 1006 1007 321
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix4f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2446 19 set_scale_shear_mat 0 4 2806 30 LMatrix4f::set_scale_shear_mat 0 2 1008 1009 317
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
129
inline void LMatrix4f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2447 13 translate_mat 0 4 2806 24 LMatrix4f::translate_mat 0 2 1010 1011 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
154
static inline LMatrix4f LMatrix4f::translate_mat(LVecBase3f const &trans);
static inline LMatrix4f LMatrix4f::translate_mat(float tx, float ty, float tz);

2448 10 rotate_mat 0 4 2806 21 LMatrix4f::rotate_mat 0 2 1012 1013 345
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
119
static inline LMatrix4f LMatrix4f::rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2449 19 rotate_mat_normaxis 0 4 2806 30 LMatrix4f::rotate_mat_normaxis 0 2 1014 1015 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
128
static inline LMatrix4f LMatrix4f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2450 9 scale_mat 0 4 2806 20 LMatrix4f::scale_mat 0 3 1016 1017 1018 934
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
205
static inline LMatrix4f LMatrix4f::scale_mat(LVecBase3f const &scale);
static inline LMatrix4f LMatrix4f::scale_mat(float sx, float sy, float sz);
static inline LMatrix4f LMatrix4f::scale_mat(float scale);

2451 9 shear_mat 0 4 2806 20 LMatrix4f::shear_mat 0 4 1019 1020 1021 1022 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
224
static inline LMatrix4f LMatrix4f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4f LMatrix4f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2452 15 scale_shear_mat 0 4 2806 26 LMatrix4f::scale_shear_mat 0 4 1023 1024 1025 1026 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
291
static inline LMatrix4f LMatrix4f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4f LMatrix4f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2453 13 y_to_z_up_mat 0 4 2806 24 LMatrix4f::y_to_z_up_mat 0 1 1027 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::y_to_z_up_mat(void);

2454 13 z_to_y_up_mat 0 4 2806 24 LMatrix4f::z_to_y_up_mat 0 1 1028 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::z_to_y_up_mat(void);

2455 11 convert_mat 0 4 2806 22 LMatrix4f::convert_mat 0 1 1029 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4f const &LMatrix4f::convert_mat(CoordinateSystem from, CoordinateSystem to);

2456 12 almost_equal 0 4 2806 23 LMatrix4f::almost_equal 0 2 1030 1031 656
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
143
bool LMatrix4f::almost_equal(LMatrix4f const &other, float threshold) const;
inline bool LMatrix4f::almost_equal(LMatrix4f const &other) const;

2457 6 output 0 4 2806 17 LMatrix4f::output 0 1 1032 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4f::output(ostream &out) const;

2458 5 write 0 4 2806 16 LMatrix4f::write 0 2 1033 1034 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4f::write(ostream &out, int indent_level = (0)) const;

2459 11 python_repr 0 4 2806 22 LMatrix4f::python_repr 0 1 1035 0
95
inline void LMatrix4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2460 13 generate_hash 0 4 2806 24 LMatrix4f::generate_hash 0 2 1036 1037 538
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
157
inline void LMatrix4f::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix4f::generate_hash(ChecksumHashGenerator &hashgen, float scale) const;

2461 20 write_datagram_fixed 0 4 2806 31 LMatrix4f::write_datagram_fixed 0 1 1038 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix4f::write_datagram_fixed(Datagram &destination) const;

2462 19 read_datagram_fixed 0 4 2806 30 LMatrix4f::read_datagram_fixed 0 1 1039 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix4f::read_datagram_fixed(DatagramIterator &scan);

2463 14 write_datagram 0 4 2806 25 LMatrix4f::write_datagram 0 1 1040 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix4f::write_datagram(Datagram &destination) const;

2464 13 read_datagram 0 4 2806 24 LMatrix4f::read_datagram 0 1 1041 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix4f::read_datagram(DatagramIterator &source);

2465 14 get_class_type 0 4 2806 25 LMatrix4f::get_class_type 0 1 1042 0
50
static TypeHandle LMatrix4f::get_class_type(void);

2466 10 ~LMatrix4f 0 4 2806 21 LMatrix4f::~LMatrix4f 0 0 0
28
LMatrix4f::~LMatrix4f(void);

2467 18 UnalignedLMatrix4f 0 4 2809 38 UnalignedLMatrix4f::UnalignedLMatrix4f 0 4 1049 1050 1051 1052 928
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
424
inline UnalignedLMatrix4f::UnalignedLMatrix4f(void);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(LMatrix4f const &copy);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(UnalignedLMatrix4f const &copy);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

2468 10 operator = 0 4 2809 30 UnalignedLMatrix4f::operator = 0 2 1053 1054 480
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
172
inline UnalignedLMatrix4f &UnalignedLMatrix4f::operator =(LMatrix4f const &copy);
inline UnalignedLMatrix4f &UnalignedLMatrix4f::operator =(UnalignedLMatrix4f const &copy);

2469 3 set 0 4 2809 23 UnalignedLMatrix4f::set 0 1 1055 221
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
212
inline void UnalignedLMatrix4f::set(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

2470 11 operator () 0 4 2809 31 UnalignedLMatrix4f::operator () 0 2 1056 1057 472
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
134
inline float &UnalignedLMatrix4f::operator ()(int row, int col);
inline float UnalignedLMatrix4f::operator ()(int row, int col) const;

2471 8 get_data 0 4 2809 28 UnalignedLMatrix4f::get_data 0 1 1058 410
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
61
inline float const *UnalignedLMatrix4f::get_data(void) const;

2472 18 get_num_components 0 4 2809 38 UnalignedLMatrix4f::get_num_components 0 1 1059 291
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
////////////////////////////////////////////////////////////////////
62
inline int UnalignedLMatrix4f::get_num_components(void) const;

2473 14 get_class_type 0 4 2809 34 UnalignedLMatrix4f::get_class_type 0 1 1060 0
59
static TypeHandle UnalignedLMatrix4f::get_class_type(void);

2474 19 ~UnalignedLMatrix4f 0 4 2809 39 UnalignedLMatrix4f::~UnalignedLMatrix4f 0 0 0
46
UnalignedLMatrix4f::~UnalignedLMatrix4f(void);

2475 11 operator [] 0 4 2811 27 LMatrix3d::Row::operator [] 0 2 1170 1171 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
106
inline double LMatrix3d::Row::operator [](int i) const;
inline double &LMatrix3d::Row::operator [](int i);

2476 11 __setitem__ 0 4 2811 27 LMatrix3d::Row::__setitem__ 0 1 1172 0
57
inline void LMatrix3d::Row::__setitem__(int i, double v);

2477 4 size 0 4 2811 20 LMatrix3d::Row::size 0 1 1173 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3d::Row::size(void);

2478 4 ~Row 0 4 2811 20 LMatrix3d::Row::~Row 0 0 0
27
LMatrix3d::Row::~Row(void);

2479 11 operator [] 0 4 2812 28 LMatrix3d::CRow::operator [] 0 1 1174 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline double LMatrix3d::CRow::operator [](int i) const;

2480 4 size 0 4 2812 21 LMatrix3d::CRow::size 0 1 1175 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3d::CRow::size(void);

2481 5 ~CRow 0 4 2812 22 LMatrix3d::CRow::~CRow 0 0 0
29
LMatrix3d::CRow::~CRow(void);

2482 9 LMatrix3d 0 4 2810 20 LMatrix3d::LMatrix3d 0 3 1061 1062 1063 677
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
224
inline LMatrix3d::LMatrix3d(void);
inline LMatrix3d::LMatrix3d(LMatrix3d const &other);
inline LMatrix3d::LMatrix3d(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

2483 10 operator = 0 4 2810 21 LMatrix3d::operator = 0 2 1064 1065 468
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LMatrix3d &LMatrix3d::operator =(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator =(double fill_value);

2484 12 operator new 0 4 2810 23 LMatrix3d::operator new 0 1 1066 0
124
inline void *LMatrix3d::operator new(unsigned int size);
inline void *LMatrix3d::operator new(unsigned int size, void *ptr);

2485 15 operator delete 0 4 2810 26 LMatrix3d::operator delete 0 0 0
106
inline void LMatrix3d::operator delete(void *ptr);
inline void LMatrix3d::operator delete(void *, void *);

2486 12 validate_ptr 0 4 2810 23 LMatrix3d::validate_ptr 0 0 0
60
static inline bool LMatrix3d::validate_ptr(void const *ptr);

2487 10 __reduce__ 0 4 2810 21 LMatrix3d::__reduce__ 0 1 1067 0
61
inline PyObject *LMatrix3d::__reduce__(PyObject *self) const;

2488 4 fill 0 4 2810 15 LMatrix3d::fill 0 1 1068 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
40
void LMatrix3d::fill(double fill_value);

2489 3 set 0 4 2810 14 LMatrix3d::set 0 1 1069 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
135
inline void LMatrix3d::set(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

2490 7 set_row 0 4 2810 18 LMatrix3d::set_row 0 2 1070 1071 636
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_row(int row, LVecBase3d const &v);
inline void LMatrix3d::set_row(int row, LVecBase2d const &v);

2491 7 set_col 0 4 2810 18 LMatrix3d::set_col 0 2 1072 1073 645
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_col(int col, LVecBase3d const &v);
inline void LMatrix3d::set_col(int col, LVecBase2d const &v);

2492 7 get_row 0 4 2810 18 LMatrix3d::get_row 0 2 1074 1075 638
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3d LMatrix3d::get_row(int row) const;
inline void LMatrix3d::get_row(LVecBase3d &result_vec, int row) const;

2493 7 get_col 0 4 2810 18 LMatrix3d::get_col 0 1 1076 305
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3d LMatrix3d::get_col(int col) const;

2494 8 get_row2 0 4 2810 19 LMatrix3d::get_row2 0 1 1077 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_row2(int row) const;

2495 8 get_col2 0 4 2810 19 LMatrix3d::get_col2 0 1 1078 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_col2(int col) const;

2496 11 operator () 0 4 2810 22 LMatrix3d::operator () 0 2 1079 1080 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix3d::operator ()(int row, int col);
inline double LMatrix3d::operator ()(int row, int col) const;

2497 11 operator [] 0 4 2810 22 LMatrix3d::operator [] 0 2 1081 1082 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix3d::CRow LMatrix3d::operator [](int i) const;
inline LMatrix3d::Row LMatrix3d::operator [](int i);

2498 4 size 0 4 2810 15 LMatrix3d::size 0 1 1083 266
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3d::size(void);

2499 6 is_nan 0 4 2810 17 LMatrix3d::is_nan 0 1 1084 310
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3d::is_nan(void) const;

2500 8 get_cell 0 4 2810 19 LMatrix3d::get_cell 0 1 1085 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix3d::get_cell(int row, int col) const;

2501 8 set_cell 0 4 2810 19 LMatrix3d::set_cell 0 1 1086 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix3d::set_cell(int row, int col, double value);

2502 8 get_data 0 4 2810 19 LMatrix3d::get_data 0 1 1087 401
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix3d::get_data(void) const;

2503 18 get_num_components 0 4 2810 29 LMatrix3d::get_num_components 0 1 1088 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3d::get_num_components(void) const;

2504 10 operator < 0 4 2810 21 LMatrix3d::operator < 0 1 1089 504
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix3d::operator <(LMatrix3d const &other) const;

2505 11 operator == 0 4 2810 22 LMatrix3d::operator == 0 1 1090 226
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3d::operator ==(LMatrix3d const &other) const;

2506 11 operator != 0 4 2810 22 LMatrix3d::operator != 0 1 1091 228
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3d::operator !=(LMatrix3d const &other) const;

2507 10 compare_to 0 4 2810 21 LMatrix3d::compare_to 0 2 1092 1093 826
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
138
inline int LMatrix3d::compare_to(LMatrix3d const &other) const;
int LMatrix3d::compare_to(LMatrix3d const &other, double threshold) const;

2508 8 get_hash 0 4 2810 19 LMatrix3d::get_hash 0 2 1094 1095 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
117
inline unsigned int LMatrix3d::get_hash(void) const;
inline unsigned int LMatrix3d::get_hash(double threshold) const;

2509 8 add_hash 0 4 2810 19 LMatrix3d::add_hash 0 2 1096 1097 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
149
inline unsigned int LMatrix3d::add_hash(unsigned int hash) const;
inline unsigned int LMatrix3d::add_hash(unsigned int hash, double threshold) const;

2510 5 xform 0 4 2810 16 LMatrix3d::xform 0 1 1098 256
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LMatrix3d::xform(LVecBase3d const &v) const;

2511 11 xform_point 0 4 2810 22 LMatrix3d::xform_point 0 1 1099 403
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LMatrix3d::xform_point(LVecBase2d const &v) const;

2512 9 xform_vec 0 4 2810 20 LMatrix3d::xform_vec 0 2 1100 1101 849
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2d LMatrix3d::xform_vec(LVecBase2d const &v) const;
inline LVecBase3d LMatrix3d::xform_vec(LVecBase3d const &v) const;

2513 17 xform_vec_general 0 4 2810 28 LMatrix3d::xform_vec_general 0 1 1102 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix3d::xform_vec_general(LVecBase3d const &v) const;

2514 14 xform_in_place 0 4 2810 25 LMatrix3d::xform_in_place 0 1 1103 265
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix3d::xform_in_place(LVecBase3d &v) const;

2515 20 xform_point_in_place 0 4 2810 31 LMatrix3d::xform_point_in_place 0 1 1104 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix3d::xform_point_in_place(LVecBase2d &v) const;

2516 18 xform_vec_in_place 0 4 2810 29 LMatrix3d::xform_vec_in_place 0 2 1105 1106 804
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
127
inline void LMatrix3d::xform_vec_in_place(LVecBase2d &v) const;
inline void LMatrix3d::xform_vec_in_place(LVecBase3d &v) const;

2517 26 xform_vec_general_in_place 0 4 2810 37 LMatrix3d::xform_vec_general_in_place 0 1 1107 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix3d::xform_vec_general_in_place(LVecBase3d &v) const;

2518 8 multiply 0 4 2810 19 LMatrix3d::multiply 0 1 1108 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3d::multiply(LMatrix3d const &other1, LMatrix3d const &other2);

2519 10 operator * 0 4 2810 21 LMatrix3d::operator * 0 2 1109 1110 450
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
130
inline LMatrix3d LMatrix3d::operator *(LMatrix3d const &other) const;
inline LMatrix3d LMatrix3d::operator *(double scalar) const;

2520 10 operator / 0 4 2810 21 LMatrix3d::operator / 0 1 1111 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LMatrix3d LMatrix3d::operator /(double scalar) const;

2521 11 operator += 0 4 2810 22 LMatrix3d::operator += 0 1 1112 278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator +=(LMatrix3d const &other);

2522 11 operator -= 0 4 2810 22 LMatrix3d::operator -= 0 1 1113 281
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator -=(LMatrix3d const &other);

2523 11 operator *= 0 4 2810 22 LMatrix3d::operator *= 0 2 1114 1115 481
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
122
inline LMatrix3d &LMatrix3d::operator *=(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator *=(double scalar);

2524 11 operator /= 0 4 2810 22 LMatrix3d::operator /= 0 1 1116 254
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
56
inline LMatrix3d &LMatrix3d::operator /=(double scalar);

2525 11 determinant 0 4 2810 22 LMatrix3d::determinant 0 1 1117 259
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
49
inline double LMatrix3d::determinant(void) const;

2526 14 transpose_from 0 4 2810 25 LMatrix3d::transpose_from 0 1 1118 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3d::transpose_from(LMatrix3d const &other);

2527 18 transpose_in_place 0 4 2810 29 LMatrix3d::transpose_in_place 0 1 1119 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3d::transpose_in_place(void);

2528 11 invert_from 0 4 2810 22 LMatrix3d::invert_from 0 1 1120 808
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3d::invert_from(LMatrix3d const &other);

2529 15 invert_in_place 0 4 2810 26 LMatrix3d::invert_in_place 0 1 1121 364
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3d::invert_in_place(void);

2530 21 invert_transpose_from 0 4 2810 32 LMatrix3d::invert_transpose_from 0 2 1122 1123 698
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3d::invert_transpose_from(LMatrix3d const &other);
inline bool LMatrix3d::invert_transpose_from(LMatrix4d const &other);

2531 9 ident_mat 0 4 2810 20 LMatrix3d::ident_mat 0 1 1124 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3d const &LMatrix3d::ident_mat(void);

2532 17 set_translate_mat 0 4 2810 28 LMatrix3d::set_translate_mat 0 1 1125 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3d::set_translate_mat(LVecBase2d const &trans);

2533 14 set_rotate_mat 0 4 2810 25 LMatrix3d::set_rotate_mat 0 3 1126 1127 1128 816
// The following named constructors return 3x3 matrices suitable for
// scale/rotate transforms in 3-d coordinate space.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
158
inline void LMatrix3d::set_rotate_mat(double angle);
void LMatrix3d::set_rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2534 13 set_scale_mat 0 4 2810 24 LMatrix3d::set_scale_mat 0 2 1129 1130 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3d::set_scale_mat(LVecBase2d const &scale);
inline void LMatrix3d::set_scale_mat(LVecBase3d const &scale);

2535 13 translate_mat 0 4 2810 24 LMatrix3d::translate_mat 0 2 1131 1132 608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
146
static inline LMatrix3d LMatrix3d::translate_mat(LVecBase2d const &trans);
static inline LMatrix3d LMatrix3d::translate_mat(double tx, double ty);

2536 10 rotate_mat 0 4 2810 21 LMatrix3d::rotate_mat 0 3 1133 1134 1135 671
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
181
static inline LMatrix3d LMatrix3d::rotate_mat(double angle);
static inline LMatrix3d LMatrix3d::rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2537 9 scale_mat 0 4 2810 20 LMatrix3d::scale_mat 0 4 1136 1137 1138 1139 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
288
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase2d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy);
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase3d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy, double sz);

2538 23 set_rotate_mat_normaxis 0 4 2810 34 LMatrix3d::set_rotate_mat_normaxis 0 2 1140 1141 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
114
void LMatrix3d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2539 19 rotate_mat_normaxis 0 4 2810 30 LMatrix3d::rotate_mat_normaxis 0 2 1142 1143 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
129
static inline LMatrix3d LMatrix3d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2540 13 set_shear_mat 0 4 2810 24 LMatrix3d::set_shear_mat 0 2 1144 1145 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix3d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2541 9 shear_mat 0 4 2810 20 LMatrix3d::shear_mat 0 4 1146 1147 1148 1149 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
227
static inline LMatrix3d LMatrix3d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3d LMatrix3d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2542 19 set_scale_shear_mat 0 4 2810 30 LMatrix3d::set_scale_shear_mat 0 2 1150 1151 312
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
122
void LMatrix3d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2543 15 scale_shear_mat 0 4 2810 26 LMatrix3d::scale_shear_mat 0 4 1152 1153 1154 1155 620
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
297
static inline LMatrix3d LMatrix3d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3d LMatrix3d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2544 11 convert_mat 0 4 2810 22 LMatrix3d::convert_mat 0 1 1156 350
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3d const &LMatrix3d::convert_mat(CoordinateSystem from, CoordinateSystem to);

2545 12 almost_equal 0 4 2810 23 LMatrix3d::almost_equal 0 2 1157 1158 813
// We don't have a scale_mat() that takes a single uniform scale
// parameter, because it would be ambiguous whether we mean a 2-d or
// a 3-d scale.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
144
bool LMatrix3d::almost_equal(LMatrix3d const &other, double threshold) const;
inline bool LMatrix3d::almost_equal(LMatrix3d const &other) const;

2546 6 output 0 4 2810 17 LMatrix3d::output 0 1 1159 215
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3d::output(ostream &out) const;

2547 5 write 0 4 2810 16 LMatrix3d::write 0 2 1160 1161 214
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3d::write(ostream &out, int indent_level = (0)) const;

2548 11 python_repr 0 4 2810 22 LMatrix3d::python_repr 0 1 1162 0
95
inline void LMatrix3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2549 13 generate_hash 0 4 2810 24 LMatrix3d::generate_hash 0 2 1163 1164 544
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
162
inline void LMatrix3d::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix3d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

2550 20 write_datagram_fixed 0 4 2810 31 LMatrix3d::write_datagram_fixed 0 1 1165 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix3d::write_datagram_fixed(Datagram &destination) const;

2551 19 read_datagram_fixed 0 4 2810 30 LMatrix3d::read_datagram_fixed 0 1 1166 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix3d::read_datagram_fixed(DatagramIterator &scan);

2552 14 write_datagram 0 4 2810 25 LMatrix3d::write_datagram 0 1 1167 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix3d::write_datagram(Datagram &destination) const;

2553 13 read_datagram 0 4 2810 24 LMatrix3d::read_datagram 0 1 1168 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix3d::read_datagram(DatagramIterator &source);

2554 14 get_class_type 0 4 2810 25 LMatrix3d::get_class_type 0 1 1169 0
50
static TypeHandle LMatrix3d::get_class_type(void);

2555 10 ~LMatrix3d 0 4 2810 21 LMatrix3d::~LMatrix3d 0 0 0
28
LMatrix3d::~LMatrix3d(void);

2556 11 operator [] 0 4 2814 27 LMatrix4d::Row::operator [] 0 2 1295 1296 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
106
inline double LMatrix4d::Row::operator [](int i) const;
inline double &LMatrix4d::Row::operator [](int i);

2557 11 __setitem__ 0 4 2814 27 LMatrix4d::Row::__setitem__ 0 1 1297 0
57
inline void LMatrix4d::Row::__setitem__(int i, double v);

2558 4 size 0 4 2814 20 LMatrix4d::Row::size 0 1 1298 271
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4d::Row::size(void);

2559 4 ~Row 0 4 2814 20 LMatrix4d::Row::~Row 0 0 0
27
LMatrix4d::Row::~Row(void);

2560 11 operator [] 0 4 2815 28 LMatrix4d::CRow::operator [] 0 1 1299 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline double LMatrix4d::CRow::operator [](int i) const;

2561 4 size 0 4 2815 21 LMatrix4d::CRow::size 0 1 1300 272
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4d::CRow::size(void);

2562 5 ~CRow 0 4 2815 22 LMatrix4d::CRow::~CRow 0 0 0
29
LMatrix4d::CRow::~CRow(void);

2563 9 LMatrix4d 0 4 2813 20 LMatrix4d::LMatrix4d 0 6 1176 1177 1178 1179 1180 1181 1566
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
503
inline LMatrix4d::LMatrix4d(void);
inline LMatrix4d::LMatrix4d(LMatrix4d const &other);
inline LMatrix4d::LMatrix4d(UnalignedLMatrix4d const &other);
inline LMatrix4d::LMatrix4d(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3, LVecBase3d const &trans);

2564 10 operator = 0 4 2813 21 LMatrix4d::operator = 0 3 1182 1183 1184 697
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
198
inline LMatrix4d &LMatrix4d::operator =(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator =(UnalignedLMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator =(double fill_value);

2565 12 operator new 0 4 2813 23 LMatrix4d::operator new 0 1 1185 0
124
inline void *LMatrix4d::operator new(unsigned int size);
inline void *LMatrix4d::operator new(unsigned int size, void *ptr);

2566 15 operator delete 0 4 2813 26 LMatrix4d::operator delete 0 0 0
106
inline void LMatrix4d::operator delete(void *ptr);
inline void LMatrix4d::operator delete(void *, void *);

2567 12 validate_ptr 0 4 2813 23 LMatrix4d::validate_ptr 0 0 0
60
static inline bool LMatrix4d::validate_ptr(void const *ptr);

2568 10 __reduce__ 0 4 2813 21 LMatrix4d::__reduce__ 0 1 1186 0
61
inline PyObject *LMatrix4d::__reduce__(PyObject *self) const;

2569 4 fill 0 4 2813 15 LMatrix4d::fill 0 1 1187 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LMatrix4d::fill(double fill_value);

2570 3 set 0 4 2813 14 LMatrix4d::set 0 1 1188 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
219
inline void LMatrix4d::set(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

2571 11 set_upper_3 0 4 2813 22 LMatrix4d::set_upper_3 0 1 1189 294
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4d::set_upper_3(LMatrix3d const &upper3);

2572 11 get_upper_3 0 4 2813 22 LMatrix4d::get_upper_3 0 1 1190 299
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3d LMatrix4d::get_upper_3(void) const;

2573 7 set_row 0 4 2813 18 LMatrix4d::set_row 0 2 1191 1192 610
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_row(int row, LVecBase4d const &v);
inline void LMatrix4d::set_row(int row, LVecBase3d const &v);

2574 7 set_col 0 4 2813 18 LMatrix4d::set_col 0 2 1193 1194 613
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_col(int col, LVecBase4d const &v);
inline void LMatrix4d::set_col(int col, LVecBase3d const &v);

2575 7 get_row 0 4 2813 18 LMatrix4d::get_row 0 2 1195 1196 626
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4d LMatrix4d::get_row(int row) const;
inline void LMatrix4d::get_row(LVecBase4d &result_vec, int row) const;

2576 7 get_col 0 4 2813 18 LMatrix4d::get_col 0 1 1197 300
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4d LMatrix4d::get_col(int col) const;

2577 8 get_row3 0 4 2813 19 LMatrix4d::get_row3 0 2 1198 1199 674
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3d LMatrix4d::get_row3(int row) const;
inline void LMatrix4d::get_row3(LVecBase3d &result_vec, int row) const;

2578 8 get_col3 0 4 2813 19 LMatrix4d::get_col3 0 1 1200 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3d LMatrix4d::get_col3(int col) const;

2579 11 operator () 0 4 2813 22 LMatrix4d::operator () 0 2 1201 1202 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix4d::operator ()(int row, int col);
inline double LMatrix4d::operator ()(int row, int col) const;

2580 11 operator [] 0 4 2813 22 LMatrix4d::operator [] 0 2 1203 1204 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix4d::CRow LMatrix4d::operator [](int i) const;
inline LMatrix4d::Row LMatrix4d::operator [](int i);

2581 4 size 0 4 2813 15 LMatrix4d::size 0 1 1205 263
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4d::size(void);

2582 6 is_nan 0 4 2813 17 LMatrix4d::is_nan 0 1 1206 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4d::is_nan(void) const;

2583 8 get_cell 0 4 2813 19 LMatrix4d::get_cell 0 1 1207 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix4d::get_cell(int row, int col) const;

2584 8 set_cell 0 4 2813 19 LMatrix4d::set_cell 0 1 1208 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix4d::set_cell(int row, int col, double value);

2585 8 get_data 0 4 2813 19 LMatrix4d::get_data 0 1 1209 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix4d::get_data(void) const;

2586 18 get_num_components 0 4 2813 29 LMatrix4d::get_num_components 0 1 1210 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4d::get_num_components(void) const;

2587 5 begin 0 4 2813 16 LMatrix4d::begin 0 2 1211 1212 634
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
95
inline double const *LMatrix4d::begin(void);
inline double const *LMatrix4d::begin(void) const;

2588 3 end 0 4 2813 14 LMatrix4d::end 0 2 1213 1214 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
91
inline double const *LMatrix4d::end(void);
inline double const *LMatrix4d::end(void) const;

2589 10 operator < 0 4 2813 21 LMatrix4d::operator < 0 1 1215 501
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix4d::operator <(LMatrix4d const &other) const;

2590 11 operator == 0 4 2813 22 LMatrix4d::operator == 0 1 1216 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4d::operator ==(LMatrix4d const &other) const;

2591 11 operator != 0 4 2813 22 LMatrix4d::operator != 0 1 1217 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4d::operator !=(LMatrix4d const &other) const;

2592 10 compare_to 0 4 2813 21 LMatrix4d::compare_to 0 2 1218 1219 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
138
inline int LMatrix4d::compare_to(LMatrix4d const &other) const;
int LMatrix4d::compare_to(LMatrix4d const &other, double threshold) const;

2593 8 get_hash 0 4 2813 19 LMatrix4d::get_hash 0 2 1220 1221 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
117
inline unsigned int LMatrix4d::get_hash(void) const;
inline unsigned int LMatrix4d::get_hash(double threshold) const;

2594 8 add_hash 0 4 2813 19 LMatrix4d::add_hash 0 2 1222 1223 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
149
inline unsigned int LMatrix4d::add_hash(unsigned int hash) const;
inline unsigned int LMatrix4d::add_hash(unsigned int hash, double threshold) const;

2595 5 xform 0 4 2813 16 LMatrix4d::xform 0 1 1224 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LMatrix4d::xform(LVecBase4d const &v) const;

2596 11 xform_point 0 4 2813 22 LMatrix4d::xform_point 0 1 1225 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LMatrix4d::xform_point(LVecBase3d const &v) const;

2597 19 xform_point_general 0 4 2813 30 LMatrix4d::xform_point_general 0 1 1226 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
76
inline LVecBase3d LMatrix4d::xform_point_general(LVecBase3d const &v) const;

2598 9 xform_vec 0 4 2813 20 LMatrix4d::xform_vec 0 1 1227 402
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LMatrix4d::xform_vec(LVecBase3d const &v) const;

2599 17 xform_vec_general 0 4 2813 28 LMatrix4d::xform_vec_general 0 1 1228 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix4d::xform_vec_general(LVecBase3d const &v) const;

2600 14 xform_in_place 0 4 2813 25 LMatrix4d::xform_in_place 0 1 1229 315
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix4d::xform_in_place(LVecBase4d &v) const;

2601 20 xform_point_in_place 0 4 2813 31 LMatrix4d::xform_point_in_place 0 1 1230 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix4d::xform_point_in_place(LVecBase3d &v) const;

2602 28 xform_point_general_in_place 0 4 2813 39 LMatrix4d::xform_point_general_in_place 0 1 1231 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
73
inline void LMatrix4d::xform_point_general_in_place(LVecBase3d &v) const;

2603 18 xform_vec_in_place 0 4 2813 29 LMatrix4d::xform_vec_in_place 0 1 1232 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4d::xform_vec_in_place(LVecBase3d &v) const;

2604 26 xform_vec_general_in_place 0 4 2813 37 LMatrix4d::xform_vec_general_in_place 0 1 1233 355
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix4d::xform_vec_general_in_place(LVecBase3d &v) const;

2605 8 multiply 0 4 2813 19 LMatrix4d::multiply 0 1 1234 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4d::multiply(LMatrix4d const &other1, LMatrix4d const &other2);

2606 10 operator * 0 4 2813 21 LMatrix4d::operator * 0 2 1235 1236 444
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
inline LMatrix4d LMatrix4d::operator *(LMatrix4d const &other) const;
inline LMatrix4d LMatrix4d::operator *(double scalar) const;

2607 10 operator / 0 4 2813 21 LMatrix4d::operator / 0 1 1237 221
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LMatrix4d LMatrix4d::operator /(double scalar) const;

2608 11 operator += 0 4 2813 22 LMatrix4d::operator += 0 1 1238 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator +=(LMatrix4d const &other);

2609 11 operator -= 0 4 2813 22 LMatrix4d::operator -= 0 1 1239 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator -=(LMatrix4d const &other);

2610 11 operator *= 0 4 2813 22 LMatrix4d::operator *= 0 2 1240 1241 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
122
inline LMatrix4d &LMatrix4d::operator *=(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator *=(double scalar);

2611 11 operator /= 0 4 2813 22 LMatrix4d::operator /= 0 1 1242 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline LMatrix4d &LMatrix4d::operator /=(double scalar);

2612 14 transpose_from 0 4 2813 25 LMatrix4d::transpose_from 0 1 1243 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::transpose_from(LMatrix4d const &other);

2613 18 transpose_in_place 0 4 2813 29 LMatrix4d::transpose_in_place 0 1 1244 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4d::transpose_in_place(void);

2614 11 invert_from 0 4 2813 22 LMatrix4d::invert_from 0 1 1245 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4d::invert_from(LMatrix4d const &other);

2615 18 invert_affine_from 0 4 2813 29 LMatrix4d::invert_affine_from 0 1 1246 931
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4d::invert_affine_from(LMatrix4d const &other);

2616 15 invert_in_place 0 4 2813 26 LMatrix4d::invert_in_place 0 1 1247 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4d::invert_in_place(void);

2617 10 accumulate 0 4 2813 21 LMatrix4d::accumulate 0 1 1248 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
////////////////////////////////////////////////////////////////////
73
inline void LMatrix4d::accumulate(LMatrix4d const &other, double weight);

2618 9 ident_mat 0 4 2813 20 LMatrix4d::ident_mat 0 1 1249 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::ident_mat(void);

2619 8 ones_mat 0 4 2813 19 LMatrix4d::ones_mat 0 1 1250 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4d const &LMatrix4d::ones_mat(void);

2620 9 zeros_mat 0 4 2813 20 LMatrix4d::zeros_mat 0 1 1251 260
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::zeros_mat(void);

2621 17 set_translate_mat 0 4 2813 28 LMatrix4d::set_translate_mat 0 1 1252 303
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4d::set_translate_mat(LVecBase3d const &trans);

2622 14 set_rotate_mat 0 4 2813 25 LMatrix4d::set_rotate_mat 0 2 1253 1254 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
105
void LMatrix4d::set_rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2623 23 set_rotate_mat_normaxis 0 4 2813 34 LMatrix4d::set_rotate_mat_normaxis 0 2 1255 1256 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
114
void LMatrix4d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2624 13 set_scale_mat 0 4 2813 24 LMatrix4d::set_scale_mat 0 1 1257 319
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::set_scale_mat(LVecBase3d const &scale);

2625 13 set_shear_mat 0 4 2813 24 LMatrix4d::set_shear_mat 0 2 1258 1259 321
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix4d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2626 19 set_scale_shear_mat 0 4 2813 30 LMatrix4d::set_scale_shear_mat 0 2 1260 1261 317
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
129
inline void LMatrix4d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2627 13 translate_mat 0 4 2813 24 LMatrix4d::translate_mat 0 2 1262 1263 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
157
static inline LMatrix4d LMatrix4d::translate_mat(LVecBase3d const &trans);
static inline LMatrix4d LMatrix4d::translate_mat(double tx, double ty, double tz);

2628 10 rotate_mat 0 4 2813 21 LMatrix4d::rotate_mat 0 2 1264 1265 345
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
120
static inline LMatrix4d LMatrix4d::rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2629 19 rotate_mat_normaxis 0 4 2813 30 LMatrix4d::rotate_mat_normaxis 0 2 1266 1267 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
129
static inline LMatrix4d LMatrix4d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2630 9 scale_mat 0 4 2813 20 LMatrix4d::scale_mat 0 3 1268 1269 1270 934
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
209
static inline LMatrix4d LMatrix4d::scale_mat(LVecBase3d const &scale);
static inline LMatrix4d LMatrix4d::scale_mat(double sx, double sy, double sz);
static inline LMatrix4d LMatrix4d::scale_mat(double scale);

2631 9 shear_mat 0 4 2813 20 LMatrix4d::shear_mat 0 4 1271 1272 1273 1274 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
227
static inline LMatrix4d LMatrix4d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4d LMatrix4d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2632 15 scale_shear_mat 0 4 2813 26 LMatrix4d::scale_shear_mat 0 4 1275 1276 1277 1278 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
297
static inline LMatrix4d LMatrix4d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4d LMatrix4d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2633 13 y_to_z_up_mat 0 4 2813 24 LMatrix4d::y_to_z_up_mat 0 1 1279 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::y_to_z_up_mat(void);

2634 13 z_to_y_up_mat 0 4 2813 24 LMatrix4d::z_to_y_up_mat 0 1 1280 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::z_to_y_up_mat(void);

2635 11 convert_mat 0 4 2813 22 LMatrix4d::convert_mat 0 1 1281 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4d const &LMatrix4d::convert_mat(CoordinateSystem from, CoordinateSystem to);

2636 12 almost_equal 0 4 2813 23 LMatrix4d::almost_equal 0 2 1282 1283 656
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
144
bool LMatrix4d::almost_equal(LMatrix4d const &other, double threshold) const;
inline bool LMatrix4d::almost_equal(LMatrix4d const &other) const;

2637 6 output 0 4 2813 17 LMatrix4d::output 0 1 1284 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4d::output(ostream &out) const;

2638 5 write 0 4 2813 16 LMatrix4d::write 0 2 1285 1286 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4d::write(ostream &out, int indent_level = (0)) const;

2639 11 python_repr 0 4 2813 22 LMatrix4d::python_repr 0 1 1287 0
95
inline void LMatrix4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2640 13 generate_hash 0 4 2813 24 LMatrix4d::generate_hash 0 2 1288 1289 538
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
158
inline void LMatrix4d::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix4d::generate_hash(ChecksumHashGenerator &hashgen, double scale) const;

2641 20 write_datagram_fixed 0 4 2813 31 LMatrix4d::write_datagram_fixed 0 1 1290 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix4d::write_datagram_fixed(Datagram &destination) const;

2642 19 read_datagram_fixed 0 4 2813 30 LMatrix4d::read_datagram_fixed 0 1 1291 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix4d::read_datagram_fixed(DatagramIterator &scan);

2643 14 write_datagram 0 4 2813 25 LMatrix4d::write_datagram 0 1 1292 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix4d::write_datagram(Datagram &destination) const;

2644 13 read_datagram 0 4 2813 24 LMatrix4d::read_datagram 0 1 1293 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix4d::read_datagram(DatagramIterator &source);

2645 14 get_class_type 0 4 2813 25 LMatrix4d::get_class_type 0 1 1294 0
50
static TypeHandle LMatrix4d::get_class_type(void);

2646 10 ~LMatrix4d 0 4 2813 21 LMatrix4d::~LMatrix4d 0 0 0
28
LMatrix4d::~LMatrix4d(void);

2647 18 UnalignedLMatrix4d 0 4 2816 38 UnalignedLMatrix4d::UnalignedLMatrix4d 0 4 1301 1302 1303 1304 928
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
440
inline UnalignedLMatrix4d::UnalignedLMatrix4d(void);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(LMatrix4d const &copy);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(UnalignedLMatrix4d const &copy);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

2648 10 operator = 0 4 2816 30 UnalignedLMatrix4d::operator = 0 2 1305 1306 480
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
172
inline UnalignedLMatrix4d &UnalignedLMatrix4d::operator =(LMatrix4d const &copy);
inline UnalignedLMatrix4d &UnalignedLMatrix4d::operator =(UnalignedLMatrix4d const &copy);

2649 3 set 0 4 2816 23 UnalignedLMatrix4d::set 0 1 1307 221
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
228
inline void UnalignedLMatrix4d::set(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

2650 11 operator () 0 4 2816 31 UnalignedLMatrix4d::operator () 0 2 1308 1309 472
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
136
inline double &UnalignedLMatrix4d::operator ()(int row, int col);
inline double UnalignedLMatrix4d::operator ()(int row, int col) const;

2651 8 get_data 0 4 2816 28 UnalignedLMatrix4d::get_data 0 1 1310 410
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
62
inline double const *UnalignedLMatrix4d::get_data(void) const;

2652 18 get_num_components 0 4 2816 38 UnalignedLMatrix4d::get_num_components 0 1 1311 291
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
////////////////////////////////////////////////////////////////////
62
inline int UnalignedLMatrix4d::get_num_components(void) const;

2653 14 get_class_type 0 4 2816 34 UnalignedLMatrix4d::get_class_type 0 1 1312 0
59
static TypeHandle UnalignedLMatrix4d::get_class_type(void);

2654 19 ~UnalignedLMatrix4d 0 4 2816 39 UnalignedLMatrix4d::~UnalignedLMatrix4d 0 0 0
46
UnalignedLMatrix4d::~UnalignedLMatrix4d(void);

2655 10 operator * 0 1 0 10 operator * 0 24 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 0
1659
inline LVecBase3f operator *(LVecBase3f const &v, LMatrix3f const &m);
inline LVector3f operator *(LVector3f const &v, LMatrix3f const &m);
inline LPoint3f operator *(LPoint3f const &v, LMatrix3f const &m);
inline LVector2f operator *(LVector2f const &v, LMatrix3f const &m);
inline LPoint2f operator *(LPoint2f const &v, LMatrix3f const &m);
inline LVecBase4f operator *(LVecBase4f const &v, LMatrix4f const &m);
inline LPoint4f operator *(LPoint4f const &v, LMatrix4f const &m);
inline LVector4f operator *(LVector4f const &v, LMatrix4f const &m);
inline LVector3f operator *(LVector3f const &v, LMatrix4f const &m);
inline LPoint3f operator *(LPoint3f const &v, LMatrix4f const &m);
inline LVecBase3d operator *(LVecBase3d const &v, LMatrix3d const &m);
inline LVector3d operator *(LVector3d const &v, LMatrix3d const &m);
inline LPoint3d operator *(LPoint3d const &v, LMatrix3d const &m);
inline LVector2d operator *(LVector2d const &v, LMatrix3d const &m);
inline LPoint2d operator *(LPoint2d const &v, LMatrix3d const &m);
inline LVecBase4d operator *(LVecBase4d const &v, LMatrix4d const &m);
inline LPoint4d operator *(LPoint4d const &v, LMatrix4d const &m);
inline LVector4d operator *(LVector4d const &v, LMatrix4d const &m);
inline LVector3d operator *(LVector3d const &v, LMatrix4d const &m);
inline LPoint3d operator *(LPoint3d const &v, LMatrix4d const &m);
inline LMatrix3f operator *(LMatrix3f const &m, LQuaternionf const &q);
inline LMatrix4f operator *(LMatrix4f const &m, LQuaternionf const &q);
inline LMatrix3d operator *(LMatrix3d const &m, LQuaterniond const &q);
inline LMatrix4d operator *(LMatrix4d const &m, LQuaterniond const &q);

2656 11 operator *= 0 1 0 11 operator *= 0 16 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 0
941
inline void operator *=(LVecBase3f &v, LMatrix3f const &m);
inline void operator *=(LVector3f &v, LMatrix3f const &m);
inline void operator *=(LPoint3f &v, LMatrix3f const &m);
inline void operator *=(LVector2f &v, LMatrix3f const &m);
inline void operator *=(LPoint2f &v, LMatrix3f const &m);
inline void operator *=(LVecBase4f &v, LMatrix4f const &m);
inline void operator *=(LVector3f &v, LMatrix4f const &m);
inline void operator *=(LPoint3f &v, LMatrix4f const &m);
inline void operator *=(LVecBase3d &v, LMatrix3d const &m);
inline void operator *=(LVector3d &v, LMatrix3d const &m);
inline void operator *=(LPoint3d &v, LMatrix3d const &m);
inline void operator *=(LVector2d &v, LMatrix3d const &m);
inline void operator *=(LPoint2d &v, LMatrix3d const &m);
inline void operator *=(LVecBase4d &v, LMatrix4d const &m);
inline void operator *=(LVector3d &v, LMatrix4d const &m);
inline void operator *=(LPoint3d &v, LMatrix4d const &m);

2657 22 generic_write_datagram 0 1 0 22 generic_write_datagram 0 4 1540 1541 1542 1543 0
303
inline void generic_write_datagram(Datagram &dest, LMatrix3f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix3d const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4d const &value);

2658 21 generic_read_datagram 0 1 0 21 generic_read_datagram 0 4 1544 1545 1546 1547 0
319
inline void generic_read_datagram(LMatrix3f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix3d &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4d &result, DatagramIterator &source);

2659 14 compose_matrix 0 1 0 14 compose_matrix 0 16 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 0
1494
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4f &mat, float const components[num_matrix_components], CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4d &mat, double const components[num_matrix_components], CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));

2660 16 decompose_matrix 0 1 0 16 decompose_matrix 0 16 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 0
1418
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4f const &mat, float components[num_matrix_components], CoordinateSystem CS = (CS_default));
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4d const &mat, double components[num_matrix_components], CoordinateSystem CS = (CS_default));
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));

2661 22 compose_matrix_old_hpr 0 1 0 22 compose_matrix_old_hpr 0 8 1580 1581 1582 1583 1584 1585 1586 1587 1530
// Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////

// Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////
958
void compose_matrix_old_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4f &mat, float const components[num_matrix_components], CoordinateSystem cs = (CS_default));
void compose_matrix_old_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4d &mat, double const components[num_matrix_components], CoordinateSystem cs = (CS_default));

2662 24 decompose_matrix_old_hpr 0 1 0 24 decompose_matrix_old_hpr 0 8 1588 1589 1590 1591 1592 1593 1594 1595 1050
////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////
910
bool decompose_matrix_old_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, float components[num_matrix_components], CoordinateSystem CS = (CS_default));
bool decompose_matrix_old_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, double components[num_matrix_components], CoordinateSystem CS = (CS_default));

2663 22 compose_matrix_new_hpr 0 1 0 22 compose_matrix_new_hpr 0 8 1596 1597 1598 1599 1600 1601 1602 1603 538
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////
958
void compose_matrix_new_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4f &mat, float const components[num_matrix_components], CoordinateSystem cs = (CS_default));
void compose_matrix_new_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4d &mat, double const components[num_matrix_components], CoordinateSystem cs = (CS_default));

2664 24 decompose_matrix_new_hpr 0 1 0 24 decompose_matrix_new_hpr 0 8 1604 1605 1606 1607 1608 1609 1610 1611 1050
////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////
910
bool decompose_matrix_new_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, float components[num_matrix_components], CoordinateSystem CS = (CS_default));
bool decompose_matrix_new_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, double components[num_matrix_components], CoordinateSystem CS = (CS_default));

2665 14 old_to_new_hpr 0 1 0 14 old_to_new_hpr 0 2 1612 1613 1012
////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////
107
LVecBase3f old_to_new_hpr(LVecBase3f const &old_hpr);
LVecBase3d old_to_new_hpr(LVecBase3d const &old_hpr);

2666 14 new_to_old_hpr 0 1 0 14 new_to_old_hpr 0 2 1614 1615 1072
////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////
107
LVecBase3f new_to_old_hpr(LVecBase3f const &new_hpr);
LVecBase3d new_to_old_hpr(LVecBase3d const &new_hpr);

2667 12 LQuaternionf 0 4 2817 26 LQuaternionf::LQuaternionf 0 4 1313 1314 1315 1316 1395
// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
233
inline LQuaternionf::LQuaternionf(void);
inline LQuaternionf::LQuaternionf(LVecBase4f const &copy);
inline LQuaternionf::LQuaternionf(float , LVecBase3f const &copy);
inline LQuaternionf::LQuaternionf(float , float , float , float );

2668 14 pure_imaginary 0 4 2817 28 LQuaternionf::pure_imaginary 0 1 1317 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaternionf LQuaternionf::pure_imaginary(LVector3f const &);

2669 9 conjugate 0 4 2817 23 LQuaternionf::conjugate 0 1 1318 265
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaternionf LQuaternionf::conjugate(void) const;

2670 5 xform 0 4 2817 19 LQuaternionf::xform 0 2 1319 1320 536
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3f LQuaternionf::xform(LVecBase3f const &v) const;
inline LVecBase4f LQuaternionf::xform(LVecBase4f const &v) const;

2671 8 multiply 0 4 2817 22 LQuaternionf::multiply 0 1 1321 255
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaternionf LQuaternionf::multiply(LQuaternionf const &rhs) const;

2672 10 operator - 0 68 2817 24 LQuaternionf::operator - 0 1 1322 216
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LQuaternionf LQuaternionf::operator -(void) const;

2673 10 operator + 0 4 2817 24 LQuaternionf::operator + 0 1 1323 232
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaternionf LQuaternionf::operator +(LQuaternionf const &other) const;

2674 10 operator - 0 4 2817 24 LQuaternionf::operator - 0 1 1324 232
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaternionf LQuaternionf::operator -(LQuaternionf const &other) const;

2675 9 angle_rad 0 4 2817 23 LQuaternionf::angle_rad 0 1 1325 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_rad(LQuaternionf const &other) const;

2676 9 angle_deg 0 4 2817 23 LQuaternionf::angle_deg 0 1 1326 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_deg(LQuaternionf const &other) const;

2677 10 operator * 0 4 2817 24 LQuaternionf::operator * 0 4 1327 1328 1329 1330 958
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////
263
inline LQuaternionf LQuaternionf::operator *(float scalar) const;
inline LQuaternionf LQuaternionf::operator *(LQuaternionf const &) const;
inline LMatrix3f LQuaternionf::operator *(LMatrix3f const &);
inline LMatrix4f LQuaternionf::operator *(LMatrix4f const &);

2678 10 operator / 0 4 2817 24 LQuaternionf::operator / 0 1 1331 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LQuaternionf LQuaternionf::operator /(float scalar) const;

2679 11 operator *= 0 4 2817 25 LQuaternionf::operator *= 0 1 1332 237
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaternionf &LQuaternionf::operator *=(LQuaternionf const &);

2680 12 almost_equal 0 4 2817 26 LQuaternionf::almost_equal 0 2 1333 1334 668
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
162
inline bool LQuaternionf::almost_equal(LQuaternionf const &other) const;
inline bool LQuaternionf::almost_equal(LQuaternionf const &other, float threshold) const;

2681 17 is_same_direction 0 4 2817 31 LQuaternionf::is_same_direction 0 1 1335 374
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaternionf::is_same_direction(LQuaternionf const &other) const;

2682 21 almost_same_direction 0 4 2817 35 LQuaternionf::almost_same_direction 0 1 1336 337
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
98
inline bool LQuaternionf::almost_same_direction(LQuaternionf const &other, float threshold) const;

2683 6 output 0 4 2817 20 LQuaternionf::output 0 1 1337 215
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaternionf::output(ostream &) const;

2684 17 extract_to_matrix 0 4 2817 31 LQuaternionf::extract_to_matrix 0 2 1338 1339 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaternionf::extract_to_matrix(LMatrix3f &m) const;
void LQuaternionf::extract_to_matrix(LMatrix4f &m) const;

2685 15 set_from_matrix 0 4 2817 29 LQuaternionf::set_from_matrix 0 2 1340 1341 729
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
118
void LQuaternionf::set_from_matrix(LMatrix3f const &m);
inline void LQuaternionf::set_from_matrix(LMatrix4f const &m);

2686 7 set_hpr 0 4 2817 21 LQuaternionf::set_hpr 0 2 1342 1343 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
86
void LQuaternionf::set_hpr(LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));

2687 7 get_hpr 0 4 2817 21 LQuaternionf::get_hpr 0 2 1344 1345 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
75
LVecBase3f LQuaternionf::get_hpr(CoordinateSystem cs = (CS_default)) const;

2688 8 get_axis 0 4 2817 22 LQuaternionf::get_axis 0 1 1346 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3f LQuaternionf::get_axis(void) const;

2689 19 get_axis_normalized 0 4 2817 33 LQuaternionf::get_axis_normalized 0 1 1347 415
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3f LQuaternionf::get_axis_normalized(void) const;

2690 13 get_angle_rad 0 4 2817 27 LQuaternionf::get_angle_rad 0 1 1348 645
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
53
inline float LQuaternionf::get_angle_rad(void) const;

2691 9 get_angle 0 4 2817 23 LQuaternionf::get_angle 0 1 1349 641
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
49
inline float LQuaternionf::get_angle(void) const;

2692 23 set_from_axis_angle_rad 0 4 2817 37 LQuaternionf::set_from_axis_angle_rad 0 1 1350 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
90
inline void LQuaternionf::set_from_axis_angle_rad(float angle_rad, LVector3f const &axis);

2693 19 set_from_axis_angle 0 4 2817 33 LQuaternionf::set_from_axis_angle 0 1 1351 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
86
inline void LQuaternionf::set_from_axis_angle(float angle_deg, LVector3f const &axis);

2694 6 get_up 0 4 2817 20 LQuaternionf::get_up 0 2 1352 1353 315
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
80
inline LVector3f LQuaternionf::get_up(CoordinateSystem cs = (CS_default)) const;

2695 9 get_right 0 4 2817 23 LQuaternionf::get_right 0 2 1354 1355 320
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
83
inline LVector3f LQuaternionf::get_right(CoordinateSystem cs = (CS_default)) const;

2696 11 get_forward 0 4 2817 25 LQuaternionf::get_forward 0 2 1356 1357 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
85
inline LVector3f LQuaternionf::get_forward(CoordinateSystem cs = (CS_default)) const;

2697 5 get_r 0 4 2817 19 LQuaternionf::get_r 0 1 1358 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_r(void) const;

2698 5 get_i 0 4 2817 19 LQuaternionf::get_i 0 1 1359 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_i(void) const;

2699 5 get_j 0 4 2817 19 LQuaternionf::get_j 0 1 1360 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_j(void) const;

2700 5 get_k 0 4 2817 19 LQuaternionf::get_k 0 1 1361 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_k(void) const;

2701 5 set_r 0 4 2817 19 LQuaternionf::set_r 0 1 1362 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_r(float r);

2702 5 set_i 0 4 2817 19 LQuaternionf::set_i 0 1 1363 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_i(float i);

2703 5 set_j 0 4 2817 19 LQuaternionf::set_j 0 1 1364 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_j(float j);

2704 5 set_k 0 4 2817 19 LQuaternionf::set_k 0 1 1365 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_k(float k);

2705 9 normalize 0 4 2817 23 LQuaternionf::normalize 0 1 1366 218
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaternionf::normalize(void);

2706 14 conjugate_from 0 4 2817 28 LQuaternionf::conjugate_from 0 1 1367 817
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::conjugate_from(LQuaternionf const &other);

2707 18 conjugate_in_place 0 4 2817 32 LQuaternionf::conjugate_in_place 0 1 1368 379
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaternionf::conjugate_in_place(void);

2708 11 invert_from 0 4 2817 25 LQuaternionf::invert_from 0 1 1369 794
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaternionf::invert_from(LQuaternionf const &other);

2709 15 invert_in_place 0 4 2817 29 LQuaternionf::invert_in_place 0 1 1370 360
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaternionf::invert_in_place(void);

2710 11 is_identity 0 4 2817 25 LQuaternionf::is_identity 0 1 1371 322
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaternionf::is_identity(void) const;

2711 18 is_almost_identity 0 4 2817 32 LQuaternionf::is_almost_identity 0 1 1372 341
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::is_almost_identity(float tolerance) const;

2712 10 ident_quat 0 4 2817 24 LQuaternionf::ident_quat 0 1 1373 259
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaternionf const &LQuaternionf::ident_quat(void);

2713 14 get_class_type 0 4 2817 28 LQuaternionf::get_class_type 0 1 1374 0
53
static TypeHandle LQuaternionf::get_class_type(void);

2714 13 ~LQuaternionf 0 4 2817 27 LQuaternionf::~LQuaternionf 0 0 0
34
LQuaternionf::~LQuaternionf(void);

2715 12 LQuaterniond 0 4 2818 26 LQuaterniond::LQuaterniond 0 4 1375 1376 1377 1378 1395
// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
238
inline LQuaterniond::LQuaterniond(void);
inline LQuaterniond::LQuaterniond(LVecBase4d const &copy);
inline LQuaterniond::LQuaterniond(double , LVecBase3d const &copy);
inline LQuaterniond::LQuaterniond(double , double , double , double );

2716 14 pure_imaginary 0 4 2818 28 LQuaterniond::pure_imaginary 0 1 1379 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaterniond LQuaterniond::pure_imaginary(LVector3d const &);

2717 9 conjugate 0 4 2818 23 LQuaterniond::conjugate 0 1 1380 265
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaterniond LQuaterniond::conjugate(void) const;

2718 5 xform 0 4 2818 19 LQuaterniond::xform 0 2 1381 1382 536
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3d LQuaterniond::xform(LVecBase3d const &v) const;
inline LVecBase4d LQuaterniond::xform(LVecBase4d const &v) const;

2719 8 multiply 0 4 2818 22 LQuaterniond::multiply 0 1 1383 255
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaterniond LQuaterniond::multiply(LQuaterniond const &rhs) const;

2720 10 operator - 0 68 2818 24 LQuaterniond::operator - 0 1 1384 216
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LQuaterniond LQuaterniond::operator -(void) const;

2721 10 operator + 0 4 2818 24 LQuaterniond::operator + 0 1 1385 232
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaterniond LQuaterniond::operator +(LQuaterniond const &other) const;

2722 10 operator - 0 4 2818 24 LQuaterniond::operator - 0 1 1386 232
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaterniond LQuaterniond::operator -(LQuaterniond const &other) const;

2723 9 angle_rad 0 4 2818 23 LQuaterniond::angle_rad 0 1 1387 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_rad(LQuaterniond const &other) const;

2724 9 angle_deg 0 4 2818 23 LQuaterniond::angle_deg 0 1 1388 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_deg(LQuaterniond const &other) const;

2725 10 operator * 0 4 2818 24 LQuaterniond::operator * 0 4 1389 1390 1391 1392 958
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////
264
inline LQuaterniond LQuaterniond::operator *(double scalar) const;
inline LQuaterniond LQuaterniond::operator *(LQuaterniond const &) const;
inline LMatrix3d LQuaterniond::operator *(LMatrix3d const &);
inline LMatrix4d LQuaterniond::operator *(LMatrix4d const &);

2726 10 operator / 0 4 2818 24 LQuaterniond::operator / 0 1 1393 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LQuaterniond LQuaterniond::operator /(double scalar) const;

2727 11 operator *= 0 4 2818 25 LQuaterniond::operator *= 0 1 1394 237
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaterniond &LQuaterniond::operator *=(LQuaterniond const &);

2728 12 almost_equal 0 4 2818 26 LQuaterniond::almost_equal 0 2 1395 1396 668
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
163
inline bool LQuaterniond::almost_equal(LQuaterniond const &other) const;
inline bool LQuaterniond::almost_equal(LQuaterniond const &other, double threshold) const;

2729 17 is_same_direction 0 4 2818 31 LQuaterniond::is_same_direction 0 1 1397 374
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaterniond::is_same_direction(LQuaterniond const &other) const;

2730 21 almost_same_direction 0 4 2818 35 LQuaterniond::almost_same_direction 0 1 1398 337
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
99
inline bool LQuaterniond::almost_same_direction(LQuaterniond const &other, double threshold) const;

2731 6 output 0 4 2818 20 LQuaterniond::output 0 1 1399 215
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaterniond::output(ostream &) const;

2732 17 extract_to_matrix 0 4 2818 31 LQuaterniond::extract_to_matrix 0 2 1400 1401 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaterniond::extract_to_matrix(LMatrix3d &m) const;
void LQuaterniond::extract_to_matrix(LMatrix4d &m) const;

2733 15 set_from_matrix 0 4 2818 29 LQuaterniond::set_from_matrix 0 2 1402 1403 729
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
118
void LQuaterniond::set_from_matrix(LMatrix3d const &m);
inline void LQuaterniond::set_from_matrix(LMatrix4d const &m);

2734 7 set_hpr 0 4 2818 21 LQuaterniond::set_hpr 0 2 1404 1405 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
86
void LQuaterniond::set_hpr(LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));

2735 7 get_hpr 0 4 2818 21 LQuaterniond::get_hpr 0 2 1406 1407 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
75
LVecBase3d LQuaterniond::get_hpr(CoordinateSystem cs = (CS_default)) const;

2736 8 get_axis 0 4 2818 22 LQuaterniond::get_axis 0 1 1408 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3d LQuaterniond::get_axis(void) const;

2737 19 get_axis_normalized 0 4 2818 33 LQuaterniond::get_axis_normalized 0 1 1409 415
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3d LQuaterniond::get_axis_normalized(void) const;

2738 13 get_angle_rad 0 4 2818 27 LQuaterniond::get_angle_rad 0 1 1410 645
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
54
inline double LQuaterniond::get_angle_rad(void) const;

2739 9 get_angle 0 4 2818 23 LQuaterniond::get_angle 0 1 1411 641
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
50
inline double LQuaterniond::get_angle(void) const;

2740 23 set_from_axis_angle_rad 0 4 2818 37 LQuaterniond::set_from_axis_angle_rad 0 1 1412 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
91
inline void LQuaterniond::set_from_axis_angle_rad(double angle_rad, LVector3d const &axis);

2741 19 set_from_axis_angle 0 4 2818 33 LQuaterniond::set_from_axis_angle 0 1 1413 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
87
inline void LQuaterniond::set_from_axis_angle(double angle_deg, LVector3d const &axis);

2742 6 get_up 0 4 2818 20 LQuaterniond::get_up 0 2 1414 1415 315
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
80
inline LVector3d LQuaterniond::get_up(CoordinateSystem cs = (CS_default)) const;

2743 9 get_right 0 4 2818 23 LQuaterniond::get_right 0 2 1416 1417 320
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
83
inline LVector3d LQuaterniond::get_right(CoordinateSystem cs = (CS_default)) const;

2744 11 get_forward 0 4 2818 25 LQuaterniond::get_forward 0 2 1418 1419 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
85
inline LVector3d LQuaterniond::get_forward(CoordinateSystem cs = (CS_default)) const;

2745 5 get_r 0 4 2818 19 LQuaterniond::get_r 0 1 1420 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_r(void) const;

2746 5 get_i 0 4 2818 19 LQuaterniond::get_i 0 1 1421 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_i(void) const;

2747 5 get_j 0 4 2818 19 LQuaterniond::get_j 0 1 1422 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_j(void) const;

2748 5 get_k 0 4 2818 19 LQuaterniond::get_k 0 1 1423 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_k(void) const;

2749 5 set_r 0 4 2818 19 LQuaterniond::set_r 0 1 1424 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_r(double r);

2750 5 set_i 0 4 2818 19 LQuaterniond::set_i 0 1 1425 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_i(double i);

2751 5 set_j 0 4 2818 19 LQuaterniond::set_j 0 1 1426 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_j(double j);

2752 5 set_k 0 4 2818 19 LQuaterniond::set_k 0 1 1427 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_k(double k);

2753 9 normalize 0 4 2818 23 LQuaterniond::normalize 0 1 1428 218
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaterniond::normalize(void);

2754 14 conjugate_from 0 4 2818 28 LQuaterniond::conjugate_from 0 1 1429 817
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaterniond::conjugate_from(LQuaterniond const &other);

2755 18 conjugate_in_place 0 4 2818 32 LQuaterniond::conjugate_in_place 0 1 1430 379
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaterniond::conjugate_in_place(void);

2756 11 invert_from 0 4 2818 25 LQuaterniond::invert_from 0 1 1431 794
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaterniond::invert_from(LQuaterniond const &other);

2757 15 invert_in_place 0 4 2818 29 LQuaterniond::invert_in_place 0 1 1432 360
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaterniond::invert_in_place(void);

2758 11 is_identity 0 4 2818 25 LQuaterniond::is_identity 0 1 1433 322
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaterniond::is_identity(void) const;

2759 18 is_almost_identity 0 4 2818 32 LQuaterniond::is_almost_identity 0 1 1434 341
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
69
inline bool LQuaterniond::is_almost_identity(double tolerance) const;

2760 10 ident_quat 0 4 2818 24 LQuaterniond::ident_quat 0 1 1435 259
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaterniond const &LQuaterniond::ident_quat(void);

2761 14 get_class_type 0 4 2818 28 LQuaterniond::get_class_type 0 1 1436 0
53
static TypeHandle LQuaterniond::get_class_type(void);

2762 13 ~LQuaterniond 0 4 2818 27 LQuaterniond::~LQuaterniond 0 0 0
34
LQuaterniond::~LQuaterniond(void);

2763 10 LRotationf 0 4 2819 22 LRotationf::LRotationf 0 8 1437 1438 1439 1440 1441 1442 1443 1444 2365
// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
420
inline LRotationf::LRotationf(void);
inline LRotationf::LRotationf(LQuaternionf const &);
inline LRotationf::LRotationf(LVecBase4f const &copy);
inline LRotationf::LRotationf(float , float , float , float );
inline LRotationf::LRotationf(LVector3f const &, float );
inline LRotationf::LRotationf(LMatrix3f const &);
inline LRotationf::LRotationf(LMatrix4f const &);
inline LRotationf::LRotationf(float , float , float );

2764 10 operator * 0 4 2819 22 LRotationf::operator * 0 3 1445 1446 1447 853
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////
211
inline LRotationf LRotationf::operator *(float scalar) const;
inline LRotationf LRotationf::operator *(LRotationf const &other) const;
inline LQuaternionf LRotationf::operator *(LQuaternionf const &other) const;

2765 10 operator / 0 4 2819 22 LRotationf::operator / 0 1 1448 224
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LRotationf LRotationf::operator /(float scalar) const;

2766 14 get_class_type 0 4 2819 26 LRotationf::get_class_type 0 1 1449 0
51
static TypeHandle LRotationf::get_class_type(void);

2767 11 ~LRotationf 0 4 2819 23 LRotationf::~LRotationf 0 0 0
30
LRotationf::~LRotationf(void);

2768 10 LRotationd 0 4 2820 22 LRotationd::LRotationd 0 8 1450 1451 1452 1453 1454 1455 1456 1457 2365
// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
428
inline LRotationd::LRotationd(void);
inline LRotationd::LRotationd(LQuaterniond const &);
inline LRotationd::LRotationd(LVecBase4d const &copy);
inline LRotationd::LRotationd(double , double , double , double );
inline LRotationd::LRotationd(LVector3d const &, double );
inline LRotationd::LRotationd(LMatrix3d const &);
inline LRotationd::LRotationd(LMatrix4d const &);
inline LRotationd::LRotationd(double , double , double );

2769 10 operator * 0 4 2820 22 LRotationd::operator * 0 3 1458 1459 1460 853
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////
212
inline LRotationd LRotationd::operator *(double scalar) const;
inline LRotationd LRotationd::operator *(LRotationd const &other) const;
inline LQuaterniond LRotationd::operator *(LQuaterniond const &other) const;

2770 10 operator / 0 4 2820 22 LRotationd::operator / 0 1 1461 224
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LRotationd LRotationd::operator /(double scalar) const;

2771 14 get_class_type 0 4 2820 26 LRotationd::get_class_type 0 1 1462 0
51
static TypeHandle LRotationd::get_class_type(void);

2772 11 ~LRotationd 0 4 2820 23 LRotationd::~LRotationd 0 0 0
30
LRotationd::~LRotationd(void);

2773 13 LOrientationf 0 4 2821 28 LOrientationf::LOrientationf 0 6 1463 1464 1465 1466 1467 1468 1881
// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
346
inline LOrientationf::LOrientationf(void);
inline LOrientationf::LOrientationf(LQuaternionf const &);
inline LOrientationf::LOrientationf(float , float , float , float );
inline LOrientationf::LOrientationf(LVector3f const &, float );
inline LOrientationf::LOrientationf(LMatrix3f const &);
inline LOrientationf::LOrientationf(LMatrix4f const &);

2774 10 operator * 0 4 2821 25 LOrientationf::operator * 0 2 1469 1470 666
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////
159
inline LOrientationf LOrientationf::operator *(LRotationf const &other) const;
inline LOrientationf LOrientationf::operator *(LQuaternionf const &other) const;

2775 14 get_class_type 0 4 2821 29 LOrientationf::get_class_type 0 1 1471 0
54
static TypeHandle LOrientationf::get_class_type(void);

2776 14 ~LOrientationf 0 4 2821 29 LOrientationf::~LOrientationf 0 0 0
36
LOrientationf::~LOrientationf(void);

2777 13 LOrientationd 0 4 2822 28 LOrientationd::LOrientationd 0 6 1472 1473 1474 1475 1476 1477 1881
// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
350
inline LOrientationd::LOrientationd(void);
inline LOrientationd::LOrientationd(LQuaterniond const &);
inline LOrientationd::LOrientationd(double , double , double , double );
inline LOrientationd::LOrientationd(LVector3d const &, float );
inline LOrientationd::LOrientationd(LMatrix3d const &);
inline LOrientationd::LOrientationd(LMatrix4d const &);

2778 10 operator * 0 4 2822 25 LOrientationd::operator * 0 2 1478 1479 666
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////
159
inline LOrientationd LOrientationd::operator *(LRotationd const &other) const;
inline LOrientationd LOrientationd::operator *(LQuaterniond const &other) const;

2779 14 get_class_type 0 4 2822 29 LOrientationd::get_class_type 0 1 1480 0
54
static TypeHandle LOrientationd::get_class_type(void);

2780 14 ~LOrientationd 0 4 2822 29 LOrientationd::~LOrientationd 0 0 0
36
LOrientationd::~LOrientationd(void);

1615
1 14 Dtool_Ns0bgaIU 0 7 6 2823 1627 14 Dtool_Ns0bgaIU 718 // Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2 14 Dtool_Ns0bVQfL 0 7 6 2823 1627 14 Dtool_Ns0bVQfL 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2824  
3 14 Dtool_Ns0blRq3 0 7 6 2823 1627 14 Dtool_Ns0blRq3 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2826  
4 14 Dtool_Ns0boQsK 0 7 6 2823 1627 14 Dtool_Ns0boQsK 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2826  1 y 1 2826  
5 14 Dtool_Ns0b_ub0 0 6 7 2823 0 14 Dtool_Ns0b_ub0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  4 copy 1 2824  
6 14 Dtool_Ns0b_fng 0 6 7 2823 0 14 Dtool_Ns0b_fng 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  10 fill_value 1 2826  
7 14 Dtool_Ns0bxPnZ 0 4 8 2828 0 14 Dtool_Ns0bxPnZ 0 2 4 this 3 2823  4 size 1 2827  
8 14 Dtool_Ns0bfGvP 0 6 11 2824 0 14 Dtool_Ns0bfGvP 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
9 14 Dtool_Ns0baClz 0 6 12 2824 0 14 Dtool_Ns0baClz 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
10 14 Dtool_Ns0bVCzP 0 6 13 2824 0 14 Dtool_Ns0bVCzP 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
11 14 Dtool_Ns0btjEl 0 6 15 2829 0 14 Dtool_Ns0btjEl 0 2 4 this 3 2824  4 self 1 2829  
12 14 Dtool_Ns0bHRz6 0 6 16 2829 0 14 Dtool_Ns0bHRz6 0 2 4 this 3 2824  9 attr_name 1 2831  
13 14 Dtool_Ns0bHRo3 0 6 17 2832 0 14 Dtool_Ns0bHRo3 0 4 4 this 3 2823  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
14 14 Dtool_Ns0bY1X1 0 4 18 2828 0 14 Dtool_Ns0bY1X1 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  1 i 1 2832  
15 14 Dtool_Ns0b6qLS 0 6 18 2826 0 14 Dtool_Ns0b6qLS 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  1 i 1 2832  
16 14 Dtool_Ns0bxNZF 0 4 19 2828 0 14 Dtool_Ns0bxNZF 0 3 4 this 3 2823  1 i 1 2832  1 v 1 2826  
17 14 Dtool_Ns0boYf5 0 6 20 2832 0 14 Dtool_Ns0boYf5 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
18 14 Dtool_Ns0bI5WA 0 6 21 2833 0 14 Dtool_Ns0bI5WA 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2824  
19 14 Dtool_Ns0by_vl 0 6 22 2826 0 14 Dtool_Ns0by_vl 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  1 i 1 2832  
20 14 Dtool_Ns0buYPR 0 6 23 2826 0 14 Dtool_Ns0buYPR 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2824  
21 14 Dtool_Ns0bu8IW 0 6 24 2826 0 14 Dtool_Ns0bu8IW 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2824  
22 14 Dtool_Ns0bnQnT 0 4 25 2828 0 14 Dtool_Ns0bnQnT 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2823  1 i 1 2832  5 value 1 2826  
23 14 Dtool_Ns0bgvpl 0 4 26 2828 0 14 Dtool_Ns0bgvpl 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  5 value 1 2826  
24 14 Dtool_Ns0bgLiq 0 4 27 2828 0 14 Dtool_Ns0bgLiq 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  5 value 1 2826  
25 14 Dtool_Ns0bqznS 0 4 28 2828 0 14 Dtool_Ns0bqznS 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2823  1 i 1 2832  5 value 1 2826  
26 14 Dtool_Ns0bBpGk 0 4 29 2828 0 14 Dtool_Ns0bBpGk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  5 value 1 2826  
27 14 Dtool_Ns0bBN_o 0 4 30 2828 0 14 Dtool_Ns0bBN_o 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  5 value 1 2826  
28 14 Dtool_Ns0bMuTE 0 4 31 2828 0 14 Dtool_Ns0bMuTE 395 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2824  
29 14 Dtool_Ns0bdEX3 0 6 32 2832 0 14 Dtool_Ns0bdEX3 279 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2824  
30 14 Dtool_Ns0b91nF 0 4 33 2828 0 14 Dtool_Ns0b91nF 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  10 fill_value 1 2826  
31 14 Dtool_Ns0bmT_9 0 4 34 2828 0 14 Dtool_Ns0bmT_9 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2823  1 x 1 2826  1 y 1 2826  
32 14 Dtool_Ns0bvbI8 0 6 35 2826 0 14 Dtool_Ns0bvbI8 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2824  
33 14 Dtool_Ns0bIV8b 0 6 36 2826 0 14 Dtool_Ns0bIV8b 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2824  
34 14 Dtool_Ns0b7siR 0 6 37 2833 0 14 Dtool_Ns0b7siR 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2823  
35 14 Dtool_Ns0b9RXz 0 6 38 2826 0 14 Dtool_Ns0b9RXz 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  5 other 1 2824  
36 14 Dtool_Ns0bkm2c 0 7 39 2823 1627 14 Dtool_Ns0bkm2c 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  4 onto 1 2824  
37 14 Dtool_Ns0bJkIg 0 6 40 2833 0 14 Dtool_Ns0bJkIg 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  5 other 1 2824  
38 14 Dtool_Ns0bssYs 0 6 41 2833 0 14 Dtool_Ns0bssYs 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  5 other 1 2824  
39 14 Dtool_Ns0boMAb 0 6 42 2833 0 14 Dtool_Ns0boMAb 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  5 other 1 2824  
40 14 Dtool_Ns0bVWAg 0 6 43 2832 0 14 Dtool_Ns0bVWAg 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  5 other 1 2824  
41 14 Dtool_Ns0bgmxE 0 6 43 2832 0 14 Dtool_Ns0bgmxE 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2824  5 other 1 2824  9 threshold 1 2826  
42 14 Dtool_Ns0bit5w 0 6 44 2827 0 14 Dtool_Ns0bit5w 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2824  
43 14 Dtool_Ns0bcmf3 0 6 44 2827 0 14 Dtool_Ns0bcmf3 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  9 threshold 1 2826  
44 14 Dtool_Ns0bT3v_ 0 6 45 2827 0 14 Dtool_Ns0bT3v_ 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  4 hash 1 2827  
45 14 Dtool_Ns0bkEhk 0 6 45 2827 0 14 Dtool_Ns0bkEhk 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2824  4 hash 1 2827  9 threshold 1 2826  
46 14 Dtool_Ns0bWPOu 0 7 46 2823 1627 14 Dtool_Ns0bWPOu 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2824  
47 14 Dtool_Ns0bKsJ6 0 7 47 2823 1627 14 Dtool_Ns0bKsJ6 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  5 other 1 2824  
48 14 Dtool_Ns0bLcrN 0 7 48 2823 1627 14 Dtool_Ns0bLcrN 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  5 other 1 2824  
49 14 Dtool_Ns0b0d1B 0 7 49 2823 1627 14 Dtool_Ns0b0d1B 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  6 scalar 1 2826  
50 14 Dtool_Ns0b01py 0 7 50 2823 1627 14 Dtool_Ns0b01py 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  6 scalar 1 2826  
51 14 Dtool_Ns0b_q3M 0 6 51 2823 0 14 Dtool_Ns0b_q3M 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  5 other 1 2824  
52 14 Dtool_Ns0b_aZg 0 6 52 2823 0 14 Dtool_Ns0b_aZg 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  5 other 1 2824  
53 14 Dtool_Ns0biYvI 0 6 53 2823 0 14 Dtool_Ns0biYvI 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  6 scalar 1 2826  
54 14 Dtool_Ns0bigj5 0 6 54 2823 0 14 Dtool_Ns0bigj5 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  6 scalar 1 2826  
55 14 Dtool_Ns0bKIsE 0 7 55 2823 1627 14 Dtool_Ns0bKIsE 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  5 other 1 2824  
56 14 Dtool_Ns0boFND 0 7 56 2823 1627 14 Dtool_Ns0boFND 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  5 other 1 2824  
57 14 Dtool_Ns0bNeTt 0 6 57 2833 0 14 Dtool_Ns0bNeTt 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  5 other 1 2824  
58 14 Dtool_Ns0bnTFd 0 6 57 2833 0 14 Dtool_Ns0bnTFd 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2824  5 other 1 2824  9 threshold 1 2826  
59 14 Dtool_Ns0bpO8G 0 4 58 2828 0 14 Dtool_Ns0bpO8G 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  3 out 1 2834  
60 14 Dtool_Ns0biNXa 0 4 59 2828 0 14 Dtool_Ns0biNXa 0 3 4 this 3 2824  3 out 1 2834  10 class_name 1 2831  
61 14 Dtool_Ns0bsW5B 0 4 60 2828 0 14 Dtool_Ns0bsW5B 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  7 hashgen 1 2836  
62 14 Dtool_Ns0biO1N 0 4 60 2828 0 14 Dtool_Ns0biO1N 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2824  7 hashgen 1 2836  9 threshold 1 2826  
63 14 Dtool_Ns0bO_h0 0 4 61 2828 0 14 Dtool_Ns0bO_h0 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  11 destination 1 2838  
64 14 Dtool_Ns0bOJCx 0 4 62 2828 0 14 Dtool_Ns0bOJCx 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  6 source 1 2840  
65 14 Dtool_Ns0b2Mbx 0 4 63 2828 0 14 Dtool_Ns0b2Mbx 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2824  11 destination 1 2838  
66 14 Dtool_Ns0b3ccD 0 4 64 2828 0 14 Dtool_Ns0b3ccD 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2823  6 source 1 2840  
67 14 Dtool_Ns0bKNOA 0 7 65 2843 0 14 Dtool_Ns0bKNOA 0 0 
68 14 Dtool_Ns0bGdnQ 0 7 67 2844 1687 14 Dtool_Ns0bGdnQ 718 // Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
69 14 Dtool_Ns0bCUdE 0 7 67 2844 1687 14 Dtool_Ns0bCUdE 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2845  
70 14 Dtool_Ns0bi9B6 0 7 67 2844 1687 14 Dtool_Ns0bi9B6 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2847  
71 14 Dtool_Ns0bCY0M 0 7 67 2844 1687 14 Dtool_Ns0bCY0M 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2847  1 y 1 2847  
72 14 Dtool_Ns0bG77A 0 6 68 2844 0 14 Dtool_Ns0bG77A 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  4 copy 1 2845  
73 14 Dtool_Ns0bjNf2 0 6 68 2844 0 14 Dtool_Ns0bjNf2 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  10 fill_value 1 2847  
74 14 Dtool_Ns0bv7np 0 4 69 2828 0 14 Dtool_Ns0bv7np 0 2 4 this 3 2844  4 size 1 2827  
75 14 Dtool_Ns0bxrvf 0 6 72 2845 0 14 Dtool_Ns0bxrvf 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
76 14 Dtool_Ns0b52lD 0 6 73 2845 0 14 Dtool_Ns0b52lD 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
77 14 Dtool_Ns0b72zf 0 6 74 2845 0 14 Dtool_Ns0b72zf 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
78 14 Dtool_Ns0bPOE1 0 6 76 2829 0 14 Dtool_Ns0bPOE1 0 2 4 this 3 2845  4 self 1 2829  
79 14 Dtool_Ns0b5eyK 0 6 77 2829 0 14 Dtool_Ns0b5eyK 0 2 4 this 3 2845  9 attr_name 1 2831  
80 14 Dtool_Ns0bpLpH 0 6 78 2832 0 14 Dtool_Ns0bpLpH 0 4 4 this 3 2844  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
81 14 Dtool_Ns0b5ZXF 0 4 79 2828 0 14 Dtool_Ns0b5ZXF 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  1 i 1 2832  
82 14 Dtool_Ns0bcHLi 0 6 79 2847 0 14 Dtool_Ns0bcHLi 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  1 i 1 2832  
83 14 Dtool_Ns0bJisN 0 4 80 2828 0 14 Dtool_Ns0bJisN 0 3 4 this 3 2844  1 i 1 2832  1 v 1 2847  
84 14 Dtool_Ns0bP1fJ 0 6 81 2832 0 14 Dtool_Ns0bP1fJ 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
85 14 Dtool_Ns0bmuWQ 0 6 82 2833 0 14 Dtool_Ns0bmuWQ 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2845  
86 14 Dtool_Ns0bUrv1 0 6 83 2847 0 14 Dtool_Ns0bUrv1 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  1 i 1 2832  
87 14 Dtool_Ns0bQsPh 0 6 84 2847 0 14 Dtool_Ns0bQsPh 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2845  
88 14 Dtool_Ns0bQIIm 0 6 85 2847 0 14 Dtool_Ns0bQIIm 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2845  
89 14 Dtool_Ns0b3_g8 0 4 86 2828 0 14 Dtool_Ns0b3_g8 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2844  1 i 1 2832  5 value 1 2847  
90 14 Dtool_Ns0bKZlY 0 4 87 2828 0 14 Dtool_Ns0bKZlY 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 value 1 2847  
91 14 Dtool_Ns0bK9dd 0 4 88 2828 0 14 Dtool_Ns0bK9dd 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 value 1 2847  
92 14 Dtool_Ns0b0P6a 0 4 89 2828 0 14 Dtool_Ns0b0P6a 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2844  1 i 1 2832  5 value 1 2847  
93 14 Dtool_Ns0brQCX 0 4 90 2828 0 14 Dtool_Ns0brQCX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 value 1 2847  
94 14 Dtool_Ns0br06b 0 4 91 2828 0 14 Dtool_Ns0br06b 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 value 1 2847  
95 14 Dtool_Ns0bu9TU 0 4 92 2828 0 14 Dtool_Ns0bu9TU 395 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2845  
96 14 Dtool_Ns0b8xWH 0 6 93 2832 0 14 Dtool_Ns0b8xWH 279 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2845  
97 14 Dtool_Ns0bsasc 0 4 94 2828 0 14 Dtool_Ns0bsasc 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  10 fill_value 1 2847  
98 14 Dtool_Ns0bbAy_ 0 4 95 2828 0 14 Dtool_Ns0bbAy_ 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2844  1 x 1 2847  1 y 1 2847  
99 14 Dtool_Ns0bMHIM 0 6 96 2847 0 14 Dtool_Ns0bMHIM 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2845  
100 14 Dtool_Ns0bqI8r 0 6 97 2847 0 14 Dtool_Ns0bqI8r 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2845  
101 14 Dtool_Ns0bZAih 0 6 98 2833 0 14 Dtool_Ns0bZAih 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2844  
102 14 Dtool_Ns0bcCJC 0 6 99 2847 0 14 Dtool_Ns0bcCJC 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  5 other 1 2845  
103 14 Dtool_Ns0bmCxs 0 7 100 2844 1687 14 Dtool_Ns0bmCxs 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  4 onto 1 2845  
104 14 Dtool_Ns0bLeos 0 6 101 2833 0 14 Dtool_Ns0bLeos 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  5 other 1 2845  
105 14 Dtool_Ns0bgLYM 0 6 102 2833 0 14 Dtool_Ns0bgLYM 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  5 other 1 2845  
106 14 Dtool_Ns0btrA7 0 6 103 2833 0 14 Dtool_Ns0btrA7 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  5 other 1 2845  
107 14 Dtool_Ns0bcKgs 0 6 104 2832 0 14 Dtool_Ns0bcKgs 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  5 other 1 2845  
108 14 Dtool_Ns0be1W3 0 6 104 2832 0 14 Dtool_Ns0be1W3 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2845  5 other 1 2845  9 threshold 1 2847  
109 14 Dtool_Ns0bF_5A 0 6 105 2827 0 14 Dtool_Ns0bF_5A 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2845  
110 14 Dtool_Ns0b1_3f 0 6 105 2827 0 14 Dtool_Ns0b1_3f 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  9 threshold 1 2847  
111 14 Dtool_Ns0bwrvP 0 6 106 2827 0 14 Dtool_Ns0bwrvP 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  4 hash 1 2827  
112 14 Dtool_Ns0b_Zma 0 6 106 2827 0 14 Dtool_Ns0b_Zma 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2845  4 hash 1 2827  9 threshold 1 2847  
113 14 Dtool_Ns0b4yP_ 0 7 107 2844 1687 14 Dtool_Ns0b4yP_ 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2845  
114 14 Dtool_Ns0bFWpG 0 7 108 2844 1687 14 Dtool_Ns0bFWpG 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  5 other 1 2845  
115 14 Dtool_Ns0bFmLa 0 7 109 2844 1687 14 Dtool_Ns0bFmLa 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  5 other 1 2845  
116 14 Dtool_Ns0bP52U 0 7 110 2844 1687 14 Dtool_Ns0bP52U 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  6 scalar 1 2847  
117 14 Dtool_Ns0bIRtF 0 7 111 2844 1687 14 Dtool_Ns0bIRtF 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  6 scalar 1 2847  
118 14 Dtool_Ns0bzz2s 0 6 112 2844 0 14 Dtool_Ns0bzz2s 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 other 1 2845  
119 14 Dtool_Ns0b8DYA 0 6 113 2844 0 14 Dtool_Ns0b8DYA 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 other 1 2845  
120 14 Dtool_Ns0bWC3U 0 6 114 2844 0 14 Dtool_Ns0bWC3U 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  6 scalar 1 2847  
121 14 Dtool_Ns0bX6rF 0 6 115 2844 0 14 Dtool_Ns0bX6rF 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  6 scalar 1 2847  
122 14 Dtool_Ns0bmSot 0 7 116 2844 1687 14 Dtool_Ns0bmSot 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 other 1 2845  
123 14 Dtool_Ns0bEfJs 0 7 117 2844 1687 14 Dtool_Ns0bEfJs 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  5 other 1 2845  
124 14 Dtool_Ns0bnTK9 0 6 118 2833 0 14 Dtool_Ns0bnTK9 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  5 other 1 2845  
125 14 Dtool_Ns0b_OqN 0 6 118 2833 0 14 Dtool_Ns0b_OqN 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2845  5 other 1 2845  9 threshold 1 2847  
126 14 Dtool_Ns0bSB9W 0 4 119 2828 0 14 Dtool_Ns0bSB9W 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  3 out 1 2834  
127 14 Dtool_Ns0bHCWq 0 4 120 2828 0 14 Dtool_Ns0bHCWq 0 3 4 this 3 2845  3 out 1 2834  10 class_name 1 2831  
128 14 Dtool_Ns0bC65R 0 4 121 2828 0 14 Dtool_Ns0bC65R 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  7 hashgen 1 2836  
129 14 Dtool_Ns0b1h_1 0 4 121 2828 0 14 Dtool_Ns0b1h_1 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2845  7 hashgen 1 2836  9 threshold 1 2847  
130 14 Dtool_Ns0bvThE 0 4 122 2828 0 14 Dtool_Ns0bvThE 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  11 destination 1 2838  
131 14 Dtool_Ns0bvkCB 0 4 123 2828 0 14 Dtool_Ns0bvkCB 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  6 source 1 2840  
132 14 Dtool_Ns0bYKaB 0 4 124 2828 0 14 Dtool_Ns0bYKaB 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2845  11 destination 1 2838  
133 14 Dtool_Ns0bYCdT 0 4 125 2828 0 14 Dtool_Ns0bYCdT 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  6 source 1 2840  
134 14 Dtool_Ns0bvAPQ 0 7 126 2843 0 14 Dtool_Ns0bvAPQ 0 0 
135 14 Dtool_Ns0bQv_8 0 7 128 2848 1756 14 Dtool_Ns0bQv_8 713 // Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
136 14 Dtool_Ns0b_wFf 0 7 128 2848 1756 14 Dtool_Ns0b_wFf 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2824  
137 14 Dtool_Ns0btvIb 0 7 128 2848 1756 14 Dtool_Ns0btvIb 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2826  
138 14 Dtool_Ns0bOs00 0 7 128 2848 1756 14 Dtool_Ns0bOs00 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2826  1 y 1 2826  
139 14 Dtool_Ns0brg1b 0 6 129 2848 0 14 Dtool_Ns0brg1b 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2848  4 copy 1 2824  
140 14 Dtool_Ns0bOfPd 0 6 129 2848 0 14 Dtool_Ns0bOfPd 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2848  10 fill_value 1 2826  
141 14 Dtool_Ns0bs393 0 6 130 2829 0 14 Dtool_Ns0bs393 0 2 4 this 3 2849  9 attr_name 1 2831  
142 14 Dtool_Ns0brq0B 0 6 131 2832 0 14 Dtool_Ns0brq0B 0 4 4 this 3 2848  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
143 14 Dtool_Ns0bMCtA 0 6 132 2849 0 14 Dtool_Ns0bMCtA 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
144 14 Dtool_Ns0byI1V 0 6 133 2849 0 14 Dtool_Ns0byI1V 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
145 14 Dtool_Ns0bykua 0 6 134 2849 0 14 Dtool_Ns0bykua 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
146 14 Dtool_Ns0bVMph 0 7 135 2848 1756 14 Dtool_Ns0bVMph 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2849  
147 14 Dtool_Ns0bJC_P 0 7 136 2823 1627 14 Dtool_Ns0bJC_P 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2849  5 other 1 2824  
148 14 Dtool_Ns0bjfKg 0 7 136 2848 1756 14 Dtool_Ns0bjfKg 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2849  5 other 1 2849  
149 14 Dtool_Ns0bpPmQ 0 7 137 2823 1627 14 Dtool_Ns0bpPmQ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2849  5 other 1 2824  
150 14 Dtool_Ns0bDbxg 0 7 137 2848 1756 14 Dtool_Ns0bDbxg 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2849  5 other 1 2849  
151 14 Dtool_Ns0bdPP0 0 7 138 2848 1756 14 Dtool_Ns0bdPP0 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2849  6 scalar 1 2826  
152 14 Dtool_Ns0btnx1 0 7 139 2848 1756 14 Dtool_Ns0btnx1 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2849  6 scalar 1 2826  
153 14 Dtool_Ns0bpiFZ 0 7 140 2848 1756 14 Dtool_Ns0bpiFZ 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2849  4 onto 1 2824  
154 14 Dtool_Ns0be9_x 0 6 141 2826 0 14 Dtool_Ns0be9_x 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2849  5 other 1 2849  
155 14 Dtool_Ns0b_avu 0 6 142 2826 0 14 Dtool_Ns0b_avu 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2849  5 other 1 2849  
156 14 Dtool_Ns0bfA9I 0 4 143 2828 0 14 Dtool_Ns0bfA9I 0 3 4 this 3 2849  3 out 1 2834  10 class_name 1 2831  
157 14 Dtool_Ns0bhYMy 0 7 144 2843 0 14 Dtool_Ns0bhYMy 0 0 
158 14 Dtool_Ns0bwcd5 0 7 147 2851 1774 14 Dtool_Ns0bwcd5 713 // Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
159 14 Dtool_Ns0bqdIZ 0 7 147 2851 1774 14 Dtool_Ns0bqdIZ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2845  
160 14 Dtool_Ns0beGDk 0 7 147 2851 1774 14 Dtool_Ns0beGDk 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2847  
161 14 Dtool_Ns0bAy7S 0 7 147 2851 1774 14 Dtool_Ns0bAy7S 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2847  1 y 1 2847  
162 14 Dtool_Ns0bzhOK 0 6 148 2851 0 14 Dtool_Ns0bzhOK 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2851  4 copy 1 2845  
163 14 Dtool_Ns0b2_5n 0 6 148 2851 0 14 Dtool_Ns0b2_5n 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2851  10 fill_value 1 2847  
164 14 Dtool_Ns0bH0d0 0 6 149 2829 0 14 Dtool_Ns0bH0d0 0 2 4 this 3 2852  9 attr_name 1 2831  
165 14 Dtool_Ns0bzrU_ 0 6 150 2832 0 14 Dtool_Ns0bzrU_ 0 4 4 this 3 2851  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
166 14 Dtool_Ns0b0FN9 0 6 151 2852 0 14 Dtool_Ns0b0FN9 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
167 14 Dtool_Ns0bpXVS 0 6 152 2852 0 14 Dtool_Ns0bpXVS 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
168 14 Dtool_Ns0bp7OX 0 6 153 2852 0 14 Dtool_Ns0bp7OX 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
169 14 Dtool_Ns0bONJe 0 7 154 2851 1774 14 Dtool_Ns0bONJe 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
170 14 Dtool_Ns0bgDY_ 0 7 155 2844 1687 14 Dtool_Ns0bgDY_ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 other 1 2845  
171 14 Dtool_Ns0bKsOa 0 7 155 2851 1774 14 Dtool_Ns0bKsOa 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 other 1 2852  
172 14 Dtool_Ns0bAO__ 0 7 156 2844 1687 14 Dtool_Ns0bAO__ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 other 1 2845  
173 14 Dtool_Ns0bqo1a 0 7 156 2851 1774 14 Dtool_Ns0bqo1a 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 other 1 2852  
174 14 Dtool_Ns0b_Z18 0 7 157 2851 1774 14 Dtool_Ns0b_Z18 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  6 scalar 1 2847  
175 14 Dtool_Ns0bvwW_ 0 7 158 2851 1774 14 Dtool_Ns0bvwW_ 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  6 scalar 1 2847  
176 14 Dtool_Ns0bYmkd 0 7 159 2851 1774 14 Dtool_Ns0bYmkd 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  4 onto 1 2845  
177 14 Dtool_Ns0bH_RS 0 6 160 2847 0 14 Dtool_Ns0bH_RS 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 other 1 2852  
178 14 Dtool_Ns0boZBP 0 6 161 2847 0 14 Dtool_Ns0boZBP 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  5 other 1 2852  
179 14 Dtool_Ns0b2DdF 0 4 162 2828 0 14 Dtool_Ns0b2DdF 0 3 4 this 3 2852  3 out 1 2834  10 class_name 1 2831  
180 14 Dtool_Ns0b4Zsu 0 7 163 2843 0 14 Dtool_Ns0b4Zsu 0 0 
181 14 Dtool_Ns0bzKKY 0 7 166 2854 1790 14 Dtool_Ns0bzKKY 711 // Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
182 14 Dtool_Ns0btY8N 0 7 166 2854 1790 14 Dtool_Ns0btY8N 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2824  
183 14 Dtool_Ns0bCtvQ 0 7 166 2854 1790 14 Dtool_Ns0bCtvQ 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2826  
184 14 Dtool_Ns0bqlQB 0 7 166 2854 1790 14 Dtool_Ns0bqlQB 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2826  1 y 1 2826  
185 14 Dtool_Ns0b_egO 0 6 167 2854 0 14 Dtool_Ns0b_egO 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2854  4 copy 1 2824  
186 14 Dtool_Ns0bqvjK 0 6 167 2854 0 14 Dtool_Ns0bqvjK 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2854  10 fill_value 1 2826  
187 14 Dtool_Ns0bP_UN 0 6 168 2829 0 14 Dtool_Ns0bP_UN 0 2 4 this 3 2855  9 attr_name 1 2831  
188 14 Dtool_Ns0bbAlh 0 6 169 2832 0 14 Dtool_Ns0bbAlh 0 4 4 this 3 2854  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
189 14 Dtool_Ns0bqnt3 0 6 170 2855 0 14 Dtool_Ns0bqnt3 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
190 14 Dtool_Ns0bCGWE 0 6 171 2855 0 14 Dtool_Ns0bCGWE 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
191 14 Dtool_Ns0baRgE 0 6 172 2855 0 14 Dtool_Ns0baRgE 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
192 14 Dtool_Ns0b01sU 0 7 173 2854 1790 14 Dtool_Ns0b01sU 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2855  
193 14 Dtool_Ns0bsVHw 0 7 174 2823 1627 14 Dtool_Ns0bsVHw 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 other 1 2824  
194 14 Dtool_Ns0bf_os 0 7 174 2854 1790 14 Dtool_Ns0bf_os 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 other 1 2849  
195 14 Dtool_Ns0bYCqi 0 7 175 2848 1756 14 Dtool_Ns0bYCqi 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 other 1 2855  
196 14 Dtool_Ns0b3nIw 0 7 175 2823 1627 14 Dtool_Ns0b3nIw 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 other 1 2824  
197 14 Dtool_Ns0bggps 0 7 175 2854 1790 14 Dtool_Ns0bggps 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  5 other 1 2849  
198 14 Dtool_Ns0bULR7 0 7 176 2854 1790 14 Dtool_Ns0bULR7 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  6 scalar 1 2826  
199 14 Dtool_Ns0brFUb 0 7 177 2854 1790 14 Dtool_Ns0brFUb 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  6 scalar 1 2826  
200 14 Dtool_Ns0bP_bo 0 7 178 2854 1790 14 Dtool_Ns0bP_bo 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  4 onto 1 2824  
201 14 Dtool_Ns0bFi0t 0 4 179 2828 0 14 Dtool_Ns0bFi0t 0 3 4 this 3 2855  3 out 1 2834  10 class_name 1 2831  
202 14 Dtool_Ns0bntNT 0 7 180 2843 0 14 Dtool_Ns0bntNT 0 0 
203 14 Dtool_Ns0btKnR 0 7 183 2857 1806 14 Dtool_Ns0btKnR 711 // Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
204 14 Dtool_Ns0bkCZP 0 7 183 2857 1806 14 Dtool_Ns0bkCZP 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2845  
205 14 Dtool_Ns0b38Ro 0 7 183 2857 1806 14 Dtool_Ns0b38Ro 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2847  
206 14 Dtool_Ns0bVLaV 0 7 183 2857 1806 14 Dtool_Ns0bVLaV 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2847  1 y 1 2847  
207 14 Dtool_Ns0b9M99 0 6 184 2857 0 14 Dtool_Ns0b9M99 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2857  4 copy 1 2845  
208 14 Dtool_Ns0bMH4I 0 6 184 2857 0 14 Dtool_Ns0bMH4I 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2857  10 fill_value 1 2847  
209 14 Dtool_Ns0bx_N_ 0 6 185 2829 0 14 Dtool_Ns0bx_N_ 0 2 4 this 3 2858  9 attr_name 1 2831  
210 14 Dtool_Ns0baAeT 0 6 186 2832 0 14 Dtool_Ns0baAeT 0 4 4 this 3 2857  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
211 14 Dtool_Ns0brnmp 0 6 187 2858 0 14 Dtool_Ns0brnmp 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
212 14 Dtool_Ns0bAGP2 0 6 188 2858 0 14 Dtool_Ns0bAGP2 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
213 14 Dtool_Ns0bYRZ2 0 6 189 2858 0 14 Dtool_Ns0bYRZ2 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
214 14 Dtool_Ns0b11lG 0 7 190 2857 1806 14 Dtool_Ns0b11lG 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
215 14 Dtool_Ns0bvLkf 0 7 191 2844 1687 14 Dtool_Ns0bvLkf 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2858  5 other 1 2845  
216 14 Dtool_Ns0bCmce 0 7 191 2857 1806 14 Dtool_Ns0bCmce 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2858  5 other 1 2852  
217 14 Dtool_Ns0bNGic 0 7 192 2851 1774 14 Dtool_Ns0bNGic 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2858  5 other 1 2858  
218 14 Dtool_Ns0b0Vlf 0 7 192 2844 1687 14 Dtool_Ns0b0Vlf 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2858  5 other 1 2845  
219 14 Dtool_Ns0bFode 0 7 192 2857 1806 14 Dtool_Ns0bFode 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2858  5 other 1 2852  
220 14 Dtool_Ns0brAiF 0 7 193 2857 1806 14 Dtool_Ns0brAiF 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2858  6 scalar 1 2847  
221 14 Dtool_Ns0b6Vkl 0 7 194 2857 1806 14 Dtool_Ns0b6Vkl 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2858  6 scalar 1 2847  
222 14 Dtool_Ns0bi_k4 0 7 195 2857 1806 14 Dtool_Ns0bi_k4 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2858  4 onto 1 2845  
223 14 Dtool_Ns0bEitf 0 4 196 2828 0 14 Dtool_Ns0bEitf 0 3 4 this 3 2858  3 out 1 2834  10 class_name 1 2831  
224 14 Dtool_Ns0bmtGF 0 7 197 2843 0 14 Dtool_Ns0bmtGF 0 0 
225 14 Dtool_Ns0b9GM2 0 7 200 2860 1816 14 Dtool_Ns0b9GM2 715 // Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
226 14 Dtool_Ns0bRRmU 0 7 200 2860 1816 14 Dtool_Ns0bRRmU 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2861  
227 14 Dtool_Ns0bBPuZ 0 7 200 2860 1816 14 Dtool_Ns0bBPuZ 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2826  
228 14 Dtool_Ns0bnj6v 0 7 200 2860 1816 14 Dtool_Ns0bnj6v 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2826  1 y 1 2826  1 z 1 2826  
229 14 Dtool_Ns0bqOP9 0 6 201 2860 0 14 Dtool_Ns0bqOP9 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  4 copy 1 2861  
230 14 Dtool_Ns0brfXC 0 6 201 2860 0 14 Dtool_Ns0brfXC 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  10 fill_value 1 2826  
231 14 Dtool_Ns0bkPX7 0 4 202 2828 0 14 Dtool_Ns0bkPX7 0 2 4 this 3 2860  4 size 1 2827  
232 14 Dtool_Ns0bKGfx 0 6 205 2861 0 14 Dtool_Ns0bKGfx 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
233 14 Dtool_Ns0bmCVV 0 6 206 2861 0 14 Dtool_Ns0bmCVV 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
234 14 Dtool_Ns0bgCjx 0 6 207 2861 0 14 Dtool_Ns0bgCjx 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
235 14 Dtool_Ns0bjCxN 0 6 208 2861 0 14 Dtool_Ns0bjCxN 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
236 14 Dtool_Ns0bBi0G 0 6 210 2829 0 14 Dtool_Ns0bBi0G 0 2 4 this 3 2861  4 self 1 2829  
237 14 Dtool_Ns0brQjc 0 6 211 2829 0 14 Dtool_Ns0brQjc 0 2 4 this 3 2861  9 attr_name 1 2831  
238 14 Dtool_Ns0bbRYZ 0 6 212 2832 0 14 Dtool_Ns0bbRYZ 0 4 4 this 3 2860  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
239 14 Dtool_Ns0b01HX 0 4 213 2828 0 14 Dtool_Ns0b01HX 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  1 i 1 2832  
240 14 Dtool_Ns0bnq7z 0 6 213 2826 0 14 Dtool_Ns0bnq7z 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  1 i 1 2832  
241 14 Dtool_Ns0bCMJn 0 4 214 2828 0 14 Dtool_Ns0bCMJn 0 3 4 this 3 2860  1 i 1 2832  1 v 1 2826  
242 14 Dtool_Ns0bEZPb 0 6 215 2832 0 14 Dtool_Ns0bEZPb 271 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
243 14 Dtool_Ns0bd5Gi 0 6 216 2833 0 14 Dtool_Ns0bd5Gi 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
244 14 Dtool_Ns0bO_fH 0 6 217 2826 0 14 Dtool_Ns0bO_fH 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  1 i 1 2832  
245 14 Dtool_Ns0bdY_y 0 6 218 2826 0 14 Dtool_Ns0bdY_y 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
246 14 Dtool_Ns0bd843 0 6 219 2826 0 14 Dtool_Ns0bd843 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
247 14 Dtool_Ns0bdQw8 0 6 220 2826 0 14 Dtool_Ns0bdQw8 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
248 14 Dtool_Ns0bUQX1 0 4 221 2828 0 14 Dtool_Ns0bUQX1 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2860  1 i 1 2832  5 value 1 2826  
249 14 Dtool_Ns0bcuZH 0 4 222 2828 0 14 Dtool_Ns0bcuZH 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  5 value 1 2826  
250 14 Dtool_Ns0bcKSM 0 4 223 2828 0 14 Dtool_Ns0bcKSM 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  5 value 1 2826  
251 14 Dtool_Ns0bcWKR 0 4 224 2828 0 14 Dtool_Ns0bcWKR 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  5 value 1 2826  
252 14 Dtool_Ns0bWJYp 0 7 225 2823 1627 14 Dtool_Ns0bWJYp 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
253 14 Dtool_Ns0bbJmF 0 7 226 2823 1627 14 Dtool_Ns0bbJmF 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
254 14 Dtool_Ns0bbleK 0 7 227 2823 1627 14 Dtool_Ns0bbleK 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
255 14 Dtool_Ns0bHyX0 0 4 228 2828 0 14 Dtool_Ns0bHyX0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2860  1 i 1 2832  5 value 1 2826  
256 14 Dtool_Ns0b1m2F 0 4 229 2828 0 14 Dtool_Ns0b1m2F 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  5 value 1 2826  
257 14 Dtool_Ns0b1CvK 0 4 230 2828 0 14 Dtool_Ns0b1CvK 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  5 value 1 2826  
258 14 Dtool_Ns0b1unP 0 4 231 2828 0 14 Dtool_Ns0b1unP 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  5 value 1 2826  
259 14 Dtool_Ns0bjRCm 0 4 232 2828 0 14 Dtool_Ns0bjRCm 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
260 14 Dtool_Ns0bpFHZ 0 6 233 2832 0 14 Dtool_Ns0bpFHZ 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
261 14 Dtool_Ns0bq1Xn 0 4 234 2828 0 14 Dtool_Ns0bq1Xn 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  10 fill_value 1 2826  
262 14 Dtool_Ns0bOavy 0 4 235 2828 0 14 Dtool_Ns0bOavy 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2860  1 x 1 2826  1 y 1 2826  1 z 1 2826  
263 14 Dtool_Ns0bbb4d 0 6 236 2826 0 14 Dtool_Ns0bbb4d 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
264 14 Dtool_Ns0blUs9 0 6 237 2826 0 14 Dtool_Ns0blUs9 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
265 14 Dtool_Ns0bOsSz 0 6 238 2833 0 14 Dtool_Ns0bOsSz 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
266 14 Dtool_Ns0baDIV 0 6 239 2826 0 14 Dtool_Ns0baDIV 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  5 other 1 2861  
267 14 Dtool_Ns0baJ6l 0 7 240 2860 1816 14 Dtool_Ns0baJ6l 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  5 other 1 2861  
268 14 Dtool_Ns0bQhma 0 7 241 2860 1816 14 Dtool_Ns0bQhma 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  4 onto 1 2861  
269 14 Dtool_Ns0bdE8o 0 6 242 2833 0 14 Dtool_Ns0bdE8o 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  5 other 1 2861  
270 14 Dtool_Ns0bFt4v 0 6 243 2833 0 14 Dtool_Ns0bFt4v 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  5 other 1 2861  
271 14 Dtool_Ns0bBNge 0 6 244 2833 0 14 Dtool_Ns0bBNge 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  5 other 1 2861  
272 14 Dtool_Ns0bW_5p 0 7 245 2860 1816 14 Dtool_Ns0bW_5p 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
273 14 Dtool_Ns0b53zo 0 6 246 2832 0 14 Dtool_Ns0b53zo 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  5 other 1 2861  
274 14 Dtool_Ns0b8GlN 0 6 246 2832 0 14 Dtool_Ns0b8GlN 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2861  5 other 1 2861  9 threshold 1 2826  
275 14 Dtool_Ns0bOipS 0 6 247 2827 0 14 Dtool_Ns0bOipS 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
276 14 Dtool_Ns0bgnPZ 0 6 247 2827 0 14 Dtool_Ns0bgnPZ 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  9 threshold 1 2826  
277 14 Dtool_Ns0bH3fh 0 6 248 2827 0 14 Dtool_Ns0bH3fh 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  4 hash 1 2827  
278 14 Dtool_Ns0bwERG 0 6 248 2827 0 14 Dtool_Ns0bwERG 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2861  4 hash 1 2827  9 threshold 1 2826  
279 14 Dtool_Ns0biO_P 0 7 249 2860 1816 14 Dtool_Ns0biO_P 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2861  
280 14 Dtool_Ns0bfM9C 0 7 250 2860 1816 14 Dtool_Ns0bfM9C 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  5 other 1 2861  
281 14 Dtool_Ns0bf8eW 0 7 251 2860 1816 14 Dtool_Ns0bf8eW 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  5 other 1 2861  
282 14 Dtool_Ns0bHdlj 0 7 252 2860 1816 14 Dtool_Ns0bHdlj 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  6 scalar 1 2826  
283 14 Dtool_Ns0bY1ZU 0 7 253 2860 1816 14 Dtool_Ns0bY1ZU 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  6 scalar 1 2826  
284 14 Dtool_Ns0bGqXQ 0 6 254 2860 0 14 Dtool_Ns0bGqXQ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  5 other 1 2861  
285 14 Dtool_Ns0bGa5j 0 6 255 2860 0 14 Dtool_Ns0bGa5j 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  5 other 1 2861  
286 14 Dtool_Ns0bPZfq 0 6 256 2860 0 14 Dtool_Ns0bPZfq 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  6 scalar 1 2826  
287 14 Dtool_Ns0bOhTb 0 6 257 2860 0 14 Dtool_Ns0bOhTb 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  6 scalar 1 2826  
288 14 Dtool_Ns0bXVDn 0 7 258 2860 1816 14 Dtool_Ns0bXVDn 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  5 other 1 2861  
289 14 Dtool_Ns0b1Bkl 0 7 259 2860 1816 14 Dtool_Ns0b1Bkl 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  5 other 1 2861  
290 14 Dtool_Ns0bvCKa 0 4 260 2828 0 14 Dtool_Ns0bvCKa 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  5 other 1 2861  
291 14 Dtool_Ns0b2ADH 0 6 261 2833 0 14 Dtool_Ns0b2ADH 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  5 other 1 2861  
292 14 Dtool_Ns0bjJ12 0 6 261 2833 0 14 Dtool_Ns0bjJ12 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2861  5 other 1 2861  9 threshold 1 2826  
293 14 Dtool_Ns0b8Oso 0 4 262 2828 0 14 Dtool_Ns0b8Oso 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  3 out 1 2834  
294 14 Dtool_Ns0bRMH8 0 4 263 2828 0 14 Dtool_Ns0bRMH8 0 3 4 this 3 2861  3 out 1 2834  10 class_name 1 2831  
295 14 Dtool_Ns0bZWpj 0 4 264 2828 0 14 Dtool_Ns0bZWpj 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  7 hashgen 1 2836  
296 14 Dtool_Ns0bRJlv 0 4 264 2828 0 14 Dtool_Ns0bRJlv 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2861  7 hashgen 1 2836  9 threshold 1 2826  
297 14 Dtool_Ns0bi_RW 0 4 265 2828 0 14 Dtool_Ns0bi_RW 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  11 destination 1 2838  
298 14 Dtool_Ns0baJyS 0 4 266 2828 0 14 Dtool_Ns0baJyS 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  6 source 1 2840  
299 14 Dtool_Ns0bqMLT 0 4 267 2828 0 14 Dtool_Ns0bqMLT 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2861  11 destination 1 2838  
300 14 Dtool_Ns0bKcMl 0 4 268 2828 0 14 Dtool_Ns0bKcMl 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  6 source 1 2840  
301 14 Dtool_Ns0bdN_h 0 7 269 2843 0 14 Dtool_Ns0bdN_h 0 0 
302 14 Dtool_Ns0bjiry 0 7 271 2863 1886 14 Dtool_Ns0bjiry 715 // Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
303 14 Dtool_Ns0buakN 0 7 271 2863 1886 14 Dtool_Ns0buakN 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2864  
304 14 Dtool_Ns0b_fFc 0 7 271 2863 1886 14 Dtool_Ns0b_fFc 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2847  
305 14 Dtool_Ns0bpccq 0 7 271 2863 1886 14 Dtool_Ns0bpccq 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2847  1 y 1 2847  1 z 1 2847  
306 14 Dtool_Ns0byavJ 0 6 272 2863 0 14 Dtool_Ns0byavJ 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  4 copy 1 2864  
307 14 Dtool_Ns0b_NPY 0 6 272 2863 0 14 Dtool_Ns0b_NPY 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  10 fill_value 1 2847  
308 14 Dtool_Ns0bD6XL 0 4 273 2828 0 14 Dtool_Ns0bD6XL 0 2 4 this 3 2863  4 size 1 2827  
309 14 Dtool_Ns0btrfB 0 6 276 2864 0 14 Dtool_Ns0btrfB 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
310 14 Dtool_Ns0bExVl 0 6 277 2864 0 14 Dtool_Ns0bExVl 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
311 14 Dtool_Ns0bHxjB 0 6 278 2864 0 14 Dtool_Ns0bHxjB 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
312 14 Dtool_Ns0bBxxd 0 6 279 2864 0 14 Dtool_Ns0bBxxd 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
313 14 Dtool_Ns0bjO0W 0 6 281 2829 0 14 Dtool_Ns0bjO0W 0 2 4 this 3 2864  4 self 1 2829  
314 14 Dtool_Ns0bMeis 0 6 282 2829 0 14 Dtool_Ns0bMeis 0 2 4 this 3 2864  9 attr_name 1 2831  
315 14 Dtool_Ns0b8LZp 0 6 283 2832 0 14 Dtool_Ns0b8LZp 0 4 4 this 3 2863  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
316 14 Dtool_Ns0bKmHn 0 4 284 2828 0 14 Dtool_Ns0bKmHn 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  1 i 1 2832  
317 14 Dtool_Ns0bIH7D 0 6 284 2847 0 14 Dtool_Ns0bIH7D 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  1 i 1 2832  
318 14 Dtool_Ns0bUicv 0 4 285 2828 0 14 Dtool_Ns0bUicv 0 3 4 this 3 2863  1 i 1 2832  1 v 1 2847  
319 14 Dtool_Ns0b61Pr 0 6 286 2832 0 14 Dtool_Ns0b61Pr 271 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
320 14 Dtool_Ns0b7uGy 0 6 287 2833 0 14 Dtool_Ns0b7uGy 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
321 14 Dtool_Ns0bgqfX 0 6 288 2847 0 14 Dtool_Ns0bgqfX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  1 i 1 2832  
322 14 Dtool_Ns0b8t_C 0 6 289 2847 0 14 Dtool_Ns0b8t_C 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
323 14 Dtool_Ns0b8J4H 0 6 290 2847 0 14 Dtool_Ns0b8J4H 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
324 14 Dtool_Ns0b8lwM 0 6 291 2847 0 14 Dtool_Ns0b8lwM 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
325 14 Dtool_Ns0bj_Qe 0 4 292 2828 0 14 Dtool_Ns0bj_Qe 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2863  1 i 1 2832  5 value 1 2847  
326 14 Dtool_Ns0bfZV6 0 4 293 2828 0 14 Dtool_Ns0bfZV6 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  5 value 1 2847  
327 14 Dtool_Ns0bf9N_ 0 4 294 2828 0 14 Dtool_Ns0bf9N_ 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  5 value 1 2847  
328 14 Dtool_Ns0beBGE 0 4 295 2828 0 14 Dtool_Ns0beBGE 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  5 value 1 2847  
329 14 Dtool_Ns0bwlZ5 0 7 296 2844 1687 14 Dtool_Ns0bwlZ5 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
330 14 Dtool_Ns0b1lnV 0 7 297 2844 1687 14 Dtool_Ns0b1lnV 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
331 14 Dtool_Ns0b1Jfa 0 7 298 2844 1687 14 Dtool_Ns0b1Jfa 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
332 14 Dtool_Ns0bLMq8 0 4 299 2828 0 14 Dtool_Ns0bLMq8 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2863  1 i 1 2832  5 value 1 2847  
333 14 Dtool_Ns0b0Qy4 0 4 300 2828 0 14 Dtool_Ns0b0Qy4 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  5 value 1 2847  
334 14 Dtool_Ns0b00q9 0 4 301 2828 0 14 Dtool_Ns0b00q9 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  5 value 1 2847  
335 14 Dtool_Ns0b3YjC 0 4 302 2828 0 14 Dtool_Ns0b3YjC 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  5 value 1 2847  
336 14 Dtool_Ns0bd9D2 0 4 303 2828 0 14 Dtool_Ns0bd9D2 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
337 14 Dtool_Ns0bLxGp 0 6 304 2832 0 14 Dtool_Ns0bLxGp 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
338 14 Dtool_Ns0bxac_ 0 4 305 2828 0 14 Dtool_Ns0bxac_ 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  10 fill_value 1 2847  
339 14 Dtool_Ns0bL816 0 4 306 2828 0 14 Dtool_Ns0bL816 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2863  1 x 1 2847  1 y 1 2847  1 z 1 2847  
340 14 Dtool_Ns0b5E4t 0 6 307 2847 0 14 Dtool_Ns0b5E4t 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
341 14 Dtool_Ns0bGIsN 0 6 308 2847 0 14 Dtool_Ns0bGIsN 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
342 14 Dtool_Ns0btBSD 0 6 309 2833 0 14 Dtool_Ns0btBSD 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2863  
343 14 Dtool_Ns0b4N6j 0 6 310 2847 0 14 Dtool_Ns0b4N6j 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  5 other 1 2864  
344 14 Dtool_Ns0bvmLU 0 7 311 2863 1886 14 Dtool_Ns0bvmLU 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  5 other 1 2864  
345 14 Dtool_Ns0ba8hq 0 7 312 2863 1886 14 Dtool_Ns0ba8hq 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  4 onto 1 2864  
346 14 Dtool_Ns0bf_c1 0 6 313 2833 0 14 Dtool_Ns0bf_c1 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  5 other 1 2864  
347 14 Dtool_Ns0b5E4P 0 6 314 2833 0 14 Dtool_Ns0b5E4P 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  5 other 1 2864  
348 14 Dtool_Ns0bCkg_ 0 6 315 2833 0 14 Dtool_Ns0bCkg_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  5 other 1 2864  
349 14 Dtool_Ns0bwK45 0 7 316 2863 1886 14 Dtool_Ns0bwK45 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
350 14 Dtool_Ns0bAqT1 0 6 317 2832 0 14 Dtool_Ns0bAqT1 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  5 other 1 2864  
351 14 Dtool_Ns0bDVKA 0 6 317 2832 0 14 Dtool_Ns0bDVKA 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2864  5 other 1 2864  9 threshold 1 2847  
352 14 Dtool_Ns0bQ_pi 0 6 318 2827 0 14 Dtool_Ns0bQ_pi 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
353 14 Dtool_Ns0bBwnB 0 6 318 2827 0 14 Dtool_Ns0bBwnB 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  9 threshold 1 2847  
354 14 Dtool_Ns0blrfx 0 6 319 2827 0 14 Dtool_Ns0blrfx 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  4 hash 1 2827  
355 14 Dtool_Ns0bjZW8 0 6 319 2827 0 14 Dtool_Ns0bjZW8 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2864  4 hash 1 2827  9 threshold 1 2847  
356 14 Dtool_Ns0bEy_f 0 7 320 2863 1886 14 Dtool_Ns0bEy_f 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2864  
357 14 Dtool_Ns0bZ2dP 0 7 321 2863 1886 14 Dtool_Ns0bZ2dP 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  5 other 1 2864  
358 14 Dtool_Ns0bZG_i 0 7 322 2863 1886 14 Dtool_Ns0bZG_i 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  5 other 1 2864  
359 14 Dtool_Ns0b6_m2 0 7 323 2863 1886 14 Dtool_Ns0b6_m2 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  6 scalar 1 2847  
360 14 Dtool_Ns0b7Wdn 0 7 324 2863 1886 14 Dtool_Ns0b7Wdn 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  6 scalar 1 2847  
361 14 Dtool_Ns0bazWw 0 6 325 2863 0 14 Dtool_Ns0bazWw 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  5 other 1 2864  
362 14 Dtool_Ns0bbD4D 0 6 326 2863 0 14 Dtool_Ns0bbD4D 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  5 other 1 2864  
363 14 Dtool_Ns0bFCn2 0 6 327 2863 0 14 Dtool_Ns0bFCn2 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  6 scalar 1 2847  
364 14 Dtool_Ns0bK6bn 0 6 328 2863 0 14 Dtool_Ns0bK6bn 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  6 scalar 1 2847  
365 14 Dtool_Ns0byw_P 0 7 329 2863 1886 14 Dtool_Ns0byw_P 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  5 other 1 2864  
366 14 Dtool_Ns0bQkhO 0 7 330 2863 1886 14 Dtool_Ns0bQkhO 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  5 other 1 2864  
367 14 Dtool_Ns0bmWqm 0 4 331 2828 0 14 Dtool_Ns0bmWqm 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  5 other 1 2864  
368 14 Dtool_Ns0bgl6W 0 6 332 2833 0 14 Dtool_Ns0bgl6W 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  5 other 1 2864  
369 14 Dtool_Ns0b6Cbn 0 6 332 2833 0 14 Dtool_Ns0b6Cbn 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2864  5 other 1 2864  9 threshold 1 2847  
370 14 Dtool_Ns0bhBt4 0 4 333 2828 0 14 Dtool_Ns0bhBt4 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  3 out 1 2834  
371 14 Dtool_Ns0brCGM 0 4 334 2828 0 14 Dtool_Ns0brCGM 0 3 4 this 3 2864  3 out 1 2834  10 class_name 1 2831  
372 14 Dtool_Ns0b_lpz 0 4 335 2828 0 14 Dtool_Ns0b_lpz 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  7 hashgen 1 2836  
373 14 Dtool_Ns0bhhvX 0 4 335 2828 0 14 Dtool_Ns0bhhvX 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2864  7 hashgen 1 2836  9 threshold 1 2847  
374 14 Dtool_Ns0b8TRm 0 4 336 2828 0 14 Dtool_Ns0b8TRm 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  11 destination 1 2838  
375 14 Dtool_Ns0b4kyi 0 4 337 2828 0 14 Dtool_Ns0b4kyi 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  6 source 1 2840  
376 14 Dtool_Ns0bPKKj 0 4 338 2828 0 14 Dtool_Ns0bPKKj 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  11 destination 1 2838  
377 14 Dtool_Ns0bkPM1 0 4 339 2828 0 14 Dtool_Ns0bkPM1 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  6 source 1 2840  
378 14 Dtool_Ns0byA_x 0 7 340 2843 0 14 Dtool_Ns0byA_x 0 0 
379 14 Dtool_Ns0bhACr 0 7 347 2866 1984 14 Dtool_Ns0bhACr 716 // Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
380 14 Dtool_Ns0bZ8LN 0 7 347 2866 1984 14 Dtool_Ns0bZ8LN 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2861  
381 14 Dtool_Ns0b6OMJ 0 7 347 2866 1984 14 Dtool_Ns0b6OMJ 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2826  
382 14 Dtool_Ns0bhp6I 0 7 347 2866 1984 14 Dtool_Ns0bhp6I 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2826  1 y 1 2826  1 z 1 2826  
383 14 Dtool_Ns0bqZGE 0 6 348 2866 0 14 Dtool_Ns0bqZGE 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2866  4 copy 1 2861  
384 14 Dtool_Ns0bR_QE 0 6 348 2866 0 14 Dtool_Ns0bR_QE 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2866  10 fill_value 1 2826  
385 14 Dtool_Ns0bvXBf 0 6 349 2829 0 14 Dtool_Ns0bvXBf 0 2 4 this 3 2867  9 attr_name 1 2831  
386 14 Dtool_Ns0brK3o 0 6 350 2832 0 14 Dtool_Ns0brK3o 0 4 4 this 3 2866  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
387 14 Dtool_Ns0bMixn 0 6 351 2867 0 14 Dtool_Ns0bMixn 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
388 14 Dtool_Ns0byo58 0 6 352 2867 0 14 Dtool_Ns0byo58 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
389 14 Dtool_Ns0bxExB 0 6 353 2867 0 14 Dtool_Ns0bxExB 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
390 14 Dtool_Ns0bxgqG 0 6 354 2867 0 14 Dtool_Ns0bxgqG 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
391 14 Dtool_Ns0b8jfB 0 7 355 2848 1756 14 Dtool_Ns0b8jfB 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2867  
392 14 Dtool_Ns0b8PYG 0 7 356 2848 1756 14 Dtool_Ns0b8PYG 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2867  
393 14 Dtool_Ns0bE_hG 0 7 357 2848 1756 14 Dtool_Ns0bE_hG 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2867  
394 14 Dtool_Ns0bWstI 0 7 358 2866 1984 14 Dtool_Ns0bWstI 216 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2867  
395 14 Dtool_Ns0bJrR4 0 7 359 2860 1816 14 Dtool_Ns0bJrR4 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  5 other 1 2861  
396 14 Dtool_Ns0bciQH 0 7 359 2866 1984 14 Dtool_Ns0bciQH 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  5 other 1 2867  
397 14 Dtool_Ns0bpo44 0 7 360 2860 1816 14 Dtool_Ns0bpo44 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  5 other 1 2861  
398 14 Dtool_Ns0b8f3H 0 7 360 2866 1984 14 Dtool_Ns0b8f3H 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  5 other 1 2867  
399 14 Dtool_Ns0bXSXn 0 7 361 2866 1984 14 Dtool_Ns0bXSXn 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  5 other 1 2861  
400 14 Dtool_Ns0bzCBx 0 7 362 2866 1984 14 Dtool_Ns0bzCBx 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  4 onto 1 2861  
401 14 Dtool_Ns0bi1_1 0 6 363 2826 0 14 Dtool_Ns0bi1_1 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  5 other 1 2867  
402 14 Dtool_Ns0bSe7m 0 6 364 2826 0 14 Dtool_Ns0bSe7m 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  5 other 1 2867  
403 14 Dtool_Ns0bqxe0 0 6 365 2826 0 14 Dtool_Ns0bqxe0 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2867  5 other 1 2867  3 ref 1 2867  
404 14 Dtool_Ns0bDYOx 0 6 366 2826 0 14 Dtool_Ns0bDYOx 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2867  5 other 1 2867  3 ref 1 2867  
405 14 Dtool_Ns0b_dvn 0 6 367 2826 0 14 Dtool_Ns0b_dvn 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  5 other 1 2867  
406 14 Dtool_Ns0bzM2t 0 6 368 2826 0 14 Dtool_Ns0bzM2t 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  5 other 1 2867  
407 14 Dtool_Ns0bcvTb 0 7 369 2866 1984 14 Dtool_Ns0bcvTb 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  6 scalar 1 2826  
408 14 Dtool_Ns0bsH0c 0 7 370 2866 1984 14 Dtool_Ns0bsH0c 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  6 scalar 1 2826  
409 14 Dtool_Ns0blOZo 0 7 371 2866 1984 14 Dtool_Ns0blOZo 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
410 14 Dtool_Ns0bz_MF 0 7 371 2866 1984 14 Dtool_Ns0bz_MF 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
411 14 Dtool_Ns0b3sup 0 7 372 2866 1984 14 Dtool_Ns0b3sup 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
412 14 Dtool_Ns0bYM3h 0 7 372 2866 1984 14 Dtool_Ns0bYM3h 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
413 14 Dtool_Ns0bn621 0 7 373 2866 1984 14 Dtool_Ns0bn621 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
414 14 Dtool_Ns0boQbv 0 7 373 2866 1984 14 Dtool_Ns0boQbv 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
415 14 Dtool_Ns0b5s4e 0 7 374 2866 1984 14 Dtool_Ns0b5s4e 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
416 14 Dtool_Ns0bjBqg 0 7 374 2866 1984 14 Dtool_Ns0bjBqg 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
417 14 Dtool_Ns0bvT2J 0 7 375 2866 1984 14 Dtool_Ns0bvT2J 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
418 14 Dtool_Ns0b1_pL 0 7 375 2866 1984 14 Dtool_Ns0b1_pL 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
419 14 Dtool_Ns0bxPd_ 0 7 376 2866 1984 14 Dtool_Ns0bxPd_ 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
420 14 Dtool_Ns0bUzPA 0 7 376 2866 1984 14 Dtool_Ns0bUzPA 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
421 14 Dtool_Ns0bhSqR 0 7 377 2866 1984 14 Dtool_Ns0bhSqR 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 4 5 right 1 2826  3 fwd 1 2826  2 up 1 2826  2 cs 1 2790  
422 14 Dtool_Ns0bUW9c 0 7 377 2866 1984 14 Dtool_Ns0bUW9c 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 3 5 right 1 2826  3 fwd 1 2826  2 up 1 2826  
423 14 Dtool_Ns0bfg_v 0 4 378 2828 0 14 Dtool_Ns0bfg_v 0 3 4 this 3 2867  3 out 1 2834  10 class_name 1 2831  
424 14 Dtool_Ns0bg4QZ 0 7 379 2843 0 14 Dtool_Ns0bg4QZ 0 0 
425 14 Dtool_Ns0bDyhn 0 7 382 2869 2018 14 Dtool_Ns0bDyhn 716 // Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
426 14 Dtool_Ns0bvfOH 0 7 382 2869 2018 14 Dtool_Ns0bvfOH 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2864  
427 14 Dtool_Ns0bvhGS 0 7 382 2869 2018 14 Dtool_Ns0bvhGS 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2847  
428 14 Dtool_Ns0b_Wm1 0 7 382 2869 2018 14 Dtool_Ns0b_Wm1 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2847  1 y 1 2847  1 z 1 2847  
429 14 Dtool_Ns0bzYfy 0 6 383 2869 0 14 Dtool_Ns0bzYfy 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2869  4 copy 1 2864  
430 14 Dtool_Ns0bpe8O 0 6 383 2869 0 14 Dtool_Ns0bpe8O 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2869  10 fill_value 1 2847  
431 14 Dtool_Ns0bGUhb 0 6 384 2829 0 14 Dtool_Ns0bGUhb 0 2 4 this 3 2870  9 attr_name 1 2831  
432 14 Dtool_Ns0bwLXl 0 6 385 2832 0 14 Dtool_Ns0bwLXl 0 4 4 this 3 2869  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
433 14 Dtool_Ns0b3lRk 0 6 386 2870 0 14 Dtool_Ns0b3lRk 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
434 14 Dtool_Ns0bp3Z5 0 6 387 2870 0 14 Dtool_Ns0bp3Z5 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
435 14 Dtool_Ns0bpbR_ 0 6 388 2870 0 14 Dtool_Ns0bpbR_ 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
436 14 Dtool_Ns0bo_KD 0 6 389 2870 0 14 Dtool_Ns0bo_KD 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
437 14 Dtool_Ns0bUj_9 0 7 390 2851 1774 14 Dtool_Ns0bUj_9 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2870  
438 14 Dtool_Ns0bVP4C 0 7 391 2851 1774 14 Dtool_Ns0bVP4C 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2870  
439 14 Dtool_Ns0bt_BD 0 7 392 2851 1774 14 Dtool_Ns0bt_BD 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2870  
440 14 Dtool_Ns0bPtNF 0 7 393 2869 2018 14 Dtool_Ns0bPtNF 216 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2870  
441 14 Dtool_Ns0bhqqm 0 7 394 2863 1886 14 Dtool_Ns0bhqqm 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 other 1 2864  
442 14 Dtool_Ns0bzxUB 0 7 394 2869 2018 14 Dtool_Ns0bzxUB 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 other 1 2870  
443 14 Dtool_Ns0bBpRn 0 7 395 2863 1886 14 Dtool_Ns0bBpRn 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 other 1 2864  
444 14 Dtool_Ns0bTs7B 0 7 395 2869 2018 14 Dtool_Ns0bTs7B 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 other 1 2870  
445 14 Dtool_Ns0bPzz8 0 7 396 2869 2018 14 Dtool_Ns0bPzz8 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 other 1 2864  
446 14 Dtool_Ns0biGg1 0 7 397 2869 2018 14 Dtool_Ns0biGg1 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  4 onto 1 2864  
447 14 Dtool_Ns0b_6Zy 0 6 398 2847 0 14 Dtool_Ns0b_6Zy 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 other 1 2870  
448 14 Dtool_Ns0blnWj 0 6 399 2847 0 14 Dtool_Ns0blnWj 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 other 1 2870  
449 14 Dtool_Ns0bI_w4 0 6 400 2847 0 14 Dtool_Ns0bI_w4 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2870  5 other 1 2870  3 ref 1 2870  
450 14 Dtool_Ns0blWg1 0 6 401 2847 0 14 Dtool_Ns0blWg1 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2870  5 other 1 2870  3 ref 1 2870  
451 14 Dtool_Ns0bl1PE 0 6 402 2847 0 14 Dtool_Ns0bl1PE 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 other 1 2870  
452 14 Dtool_Ns0bZkXK 0 6 403 2847 0 14 Dtool_Ns0bZkXK 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  5 other 1 2870  
453 14 Dtool_Ns0b_54j 0 7 404 2869 2018 14 Dtool_Ns0b_54j 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  6 scalar 1 2847  
454 14 Dtool_Ns0buQal 0 7 405 2869 2018 14 Dtool_Ns0buQal 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2870  6 scalar 1 2847  
455 14 Dtool_Ns0b8N5k 0 7 406 2869 2018 14 Dtool_Ns0b8N5k 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
456 14 Dtool_Ns0bI8sB 0 7 406 2869 2018 14 Dtool_Ns0bI8sB 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
457 14 Dtool_Ns0bQtOm 0 7 407 2869 2018 14 Dtool_Ns0bQtOm 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
458 14 Dtool_Ns0bxMXe 0 7 407 2869 2018 14 Dtool_Ns0bxMXe 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
459 14 Dtool_Ns0b8FXy 0 7 408 2869 2018 14 Dtool_Ns0b8FXy 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
460 14 Dtool_Ns0bPT7r 0 7 408 2869 2018 14 Dtool_Ns0bPT7r 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
461 14 Dtool_Ns0bgtYb 0 7 409 2869 2018 14 Dtool_Ns0bgtYb 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
462 14 Dtool_Ns0bKBKd 0 7 409 2869 2018 14 Dtool_Ns0bKBKd 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
463 14 Dtool_Ns0b2UWG 0 7 410 2869 2018 14 Dtool_Ns0b2UWG 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
464 14 Dtool_Ns0bcxJI 0 7 410 2869 2018 14 Dtool_Ns0bcxJI 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
465 14 Dtool_Ns0bWP96 0 7 411 2869 2018 14 Dtool_Ns0bWP96 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
466 14 Dtool_Ns0bMyv8 0 7 411 2869 2018 14 Dtool_Ns0bMyv8 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
467 14 Dtool_Ns0buPAa 0 7 412 2869 2018 14 Dtool_Ns0buPAa 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 4 5 right 1 2847  3 fwd 1 2847  2 up 1 2847  2 cs 1 2790  
468 14 Dtool_Ns0bnVMh 0 7 412 2869 2018 14 Dtool_Ns0bnVMh 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 3 5 right 1 2847  3 fwd 1 2847  2 up 1 2847  
469 14 Dtool_Ns0b2jes 0 4 413 2828 0 14 Dtool_Ns0b2jes 0 3 4 this 3 2870  3 out 1 2834  10 class_name 1 2831  
470 14 Dtool_Ns0bH5wV 0 7 414 2843 0 14 Dtool_Ns0bH5wV 0 0 
471 14 Dtool_Ns0bz3Qe 0 7 417 2872 2041 14 Dtool_Ns0bz3Qe 711 // Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
472 14 Dtool_Ns0bb_6E 0 7 417 2872 2041 14 Dtool_Ns0bb_6E 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2861  
473 14 Dtool_Ns0bCO2W 0 7 417 2872 2041 14 Dtool_Ns0bCO2W 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2826  
474 14 Dtool_Ns0bMxu6 0 7 417 2872 2041 14 Dtool_Ns0bMxu6 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2826  1 y 1 2826  1 z 1 2826  
475 14 Dtool_Ns0bJ6xP 0 6 418 2872 0 14 Dtool_Ns0bJ6xP 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2872  4 copy 1 2861  
476 14 Dtool_Ns0bqkxL 0 6 418 2872 0 14 Dtool_Ns0bqkxL 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2872  10 fill_value 1 2826  
477 14 Dtool_Ns0bPEjO 0 6 419 2829 0 14 Dtool_Ns0bPEjO 0 2 4 this 3 2873  9 attr_name 1 2831  
478 14 Dtool_Ns0bbPzi 0 6 420 2832 0 14 Dtool_Ns0bbPzi 0 4 4 this 3 2872  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
479 14 Dtool_Ns0bqu74 0 6 421 2873 0 14 Dtool_Ns0bqu74 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
480 14 Dtool_Ns0bCPkF 0 6 422 2873 0 14 Dtool_Ns0bCPkF 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
481 14 Dtool_Ns0baeuF 0 6 423 2873 0 14 Dtool_Ns0baeuF 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
482 14 Dtool_Ns0bSp3F 0 6 424 2873 0 14 Dtool_Ns0bSp3F 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
483 14 Dtool_Ns0bxis3 0 7 425 2854 1790 14 Dtool_Ns0bxis3 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2873  
484 14 Dtool_Ns0bpT23 0 7 426 2854 1790 14 Dtool_Ns0bpT23 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2873  
485 14 Dtool_Ns0bLH2n 0 7 427 2854 1790 14 Dtool_Ns0bLH2n 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2873  
486 14 Dtool_Ns0b0M7V 0 7 428 2872 2041 14 Dtool_Ns0b0M7V 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2873  
487 14 Dtool_Ns0b_4Xx 0 7 429 2860 1816 14 Dtool_Ns0b_4Xx 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2873  5 other 1 2861  
488 14 Dtool_Ns0bg12J 0 7 429 2872 2041 14 Dtool_Ns0bg12J 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2873  5 other 1 2867  
489 14 Dtool_Ns0bSFwU 0 7 430 2866 1984 14 Dtool_Ns0bSFwU 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2873  5 other 1 2873  
490 14 Dtool_Ns0bBLZx 0 7 430 2860 1816 14 Dtool_Ns0bBLZx 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2873  5 other 1 2861  
491 14 Dtool_Ns0bfn3J 0 7 430 2872 2041 14 Dtool_Ns0bfn3J 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2873  5 other 1 2867  
492 14 Dtool_Ns0b3m20 0 7 431 2872 2041 14 Dtool_Ns0b3m20 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2873  5 other 1 2861  
493 14 Dtool_Ns0bPmL9 0 7 432 2872 2041 14 Dtool_Ns0bPmL9 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2873  4 onto 1 2861  
494 14 Dtool_Ns0bUCf8 0 7 433 2872 2041 14 Dtool_Ns0bUCf8 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2873  6 scalar 1 2826  
495 14 Dtool_Ns0brOic 0 7 434 2872 2041 14 Dtool_Ns0brOic 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2873  6 scalar 1 2826  
496 14 Dtool_Ns0bVRyH 0 7 435 2872 2041 14 Dtool_Ns0bVRyH 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
497 14 Dtool_Ns0bM16_ 0 7 435 2872 2041 14 Dtool_Ns0bM16_ 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
498 14 Dtool_Ns0bkaIy 0 7 436 2872 2041 14 Dtool_Ns0bkaIy 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 2826  3 fwd 1 2826  2 up 1 2826  2 cs 1 2790  
499 14 Dtool_Ns0b2tjk 0 7 436 2872 2041 14 Dtool_Ns0b2tjk 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 2826  3 fwd 1 2826  2 up 1 2826  
500 14 Dtool_Ns0bFpCv 0 4 437 2828 0 14 Dtool_Ns0bFpCv 0 3 4 this 3 2873  3 out 1 2834  10 class_name 1 2831  
501 14 Dtool_Ns0bnkbU 0 7 438 2843 0 14 Dtool_Ns0bnkbU 0 0 
502 14 Dtool_Ns0bt3tX 0 7 441 2875 2064 14 Dtool_Ns0bt3tX 711 // Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
503 14 Dtool_Ns0bSkXG 0 7 441 2875 2064 14 Dtool_Ns0bSkXG 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2864  
504 14 Dtool_Ns0b3ZYu 0 7 441 2875 2064 14 Dtool_Ns0b3ZYu 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2847  
505 14 Dtool_Ns0bk1qU 0 7 441 2875 2064 14 Dtool_Ns0bk1qU 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2847  1 y 1 2847  1 z 1 2847  
506 14 Dtool_Ns0bLoO_ 0 6 442 2875 0 14 Dtool_Ns0bLoO_ 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2875  4 copy 1 2864  
507 14 Dtool_Ns0bMIGK 0 6 442 2875 0 14 Dtool_Ns0bMIGK 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2875  10 fill_value 1 2847  
508 14 Dtool_Ns0bOEcA 0 6 443 2829 0 14 Dtool_Ns0bOEcA 0 2 4 this 3 2876  9 attr_name 1 2831  
509 14 Dtool_Ns0baPsU 0 6 444 2832 0 14 Dtool_Ns0baPsU 0 4 4 this 3 2875  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
510 14 Dtool_Ns0bru0q 0 6 445 2876 0 14 Dtool_Ns0bru0q 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
511 14 Dtool_Ns0bAPd3 0 6 446 2876 0 14 Dtool_Ns0bAPd3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
512 14 Dtool_Ns0bYen3 0 6 447 2876 0 14 Dtool_Ns0bYen3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
513 14 Dtool_Ns0bQpw3 0 6 448 2876 0 14 Dtool_Ns0bQpw3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
514 14 Dtool_Ns0bOilp 0 7 449 2857 1806 14 Dtool_Ns0bOilp 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2876  
515 14 Dtool_Ns0bWTvp 0 7 450 2857 1806 14 Dtool_Ns0bWTvp 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2876  
516 14 Dtool_Ns0bIHvZ 0 7 451 2857 1806 14 Dtool_Ns0bIHvZ 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2876  
517 14 Dtool_Ns0b1M0H 0 7 452 2875 2064 14 Dtool_Ns0b1M0H 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2876  
518 14 Dtool_Ns0b9u0g 0 7 453 2863 1886 14 Dtool_Ns0b9u0g 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 other 1 2864  
519 14 Dtool_Ns0b6tq7 0 7 453 2875 2064 14 Dtool_Ns0b6tq7 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 other 1 2870  
520 14 Dtool_Ns0bHBoO 0 7 454 2869 2018 14 Dtool_Ns0bHBoO 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 other 1 2876  
521 14 Dtool_Ns0bC51g 0 7 454 2863 1886 14 Dtool_Ns0bC51g 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 other 1 2864  
522 14 Dtool_Ns0b9fr7 0 7 454 2875 2064 14 Dtool_Ns0b9fr7 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 other 1 2870  
523 14 Dtool_Ns0bwvhl 0 7 455 2875 2064 14 Dtool_Ns0bwvhl 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  5 other 1 2864  
524 14 Dtool_Ns0bjmUN 0 7 456 2875 2064 14 Dtool_Ns0bjmUN 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  4 onto 1 2864  
525 14 Dtool_Ns0brZwG 0 7 457 2875 2064 14 Dtool_Ns0brZwG 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  6 scalar 1 2847  
526 14 Dtool_Ns0b6cym 0 7 458 2875 2064 14 Dtool_Ns0b6cym 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  6 scalar 1 2847  
527 14 Dtool_Ns0bXRr5 0 7 459 2875 2064 14 Dtool_Ns0bXRr5 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2790  
528 14 Dtool_Ns0bN1zx 0 7 459 2875 2064 14 Dtool_Ns0bN1zx 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
529 14 Dtool_Ns0bx8Y0 0 7 460 2875 2064 14 Dtool_Ns0bx8Y0 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 2847  3 fwd 1 2847  2 up 1 2847  2 cs 1 2790  
530 14 Dtool_Ns0bs_qG 0 7 460 2875 2064 14 Dtool_Ns0bs_qG 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 2847  3 fwd 1 2847  2 up 1 2847  
531 14 Dtool_Ns0bEp7g 0 4 461 2828 0 14 Dtool_Ns0bEp7g 0 3 4 this 3 2876  3 out 1 2834  10 class_name 1 2831  
532 14 Dtool_Ns0bmkUG 0 7 462 2843 0 14 Dtool_Ns0bmkUG 0 0 
533 14 Dtool_Ns0b5kRY 0 7 465 2878 2075 14 Dtool_Ns0b5kRY 718 // Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
534 14 Dtool_Ns0bdTtd 0 7 465 2878 2075 14 Dtool_Ns0bdTtd 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2879  
535 14 Dtool_Ns0baF0L 0 7 465 2878 2075 14 Dtool_Ns0baF0L 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2881  
536 14 Dtool_Ns0bity7 0 7 465 2878 2075 14 Dtool_Ns0bity7 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2826  
537 14 Dtool_Ns0bDRvG 0 7 465 2878 2075 14 Dtool_Ns0bDRvG 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2826  1 y 1 2826  1 z 1 2826  1 w 1 2826  
538 14 Dtool_Ns0bXuCG 0 6 466 2878 0 14 Dtool_Ns0bXuCG 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  4 copy 1 2879  
539 14 Dtool_Ns0bURI0 0 6 466 2878 0 14 Dtool_Ns0bURI0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  4 copy 1 2881  
540 14 Dtool_Ns0bGYHk 0 6 466 2878 0 14 Dtool_Ns0bGYHk 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  10 fill_value 1 2826  
541 14 Dtool_Ns0bYOHd 0 4 467 2828 0 14 Dtool_Ns0bYOHd 0 2 4 this 3 2878  4 size 1 2827  
542 14 Dtool_Ns0bmHPT 0 6 470 2879 0 14 Dtool_Ns0bmHPT 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
543 14 Dtool_Ns0bxCF3 0 6 471 2879 0 14 Dtool_Ns0bxCF3 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
544 14 Dtool_Ns0bMdTT 0 6 472 2879 0 14 Dtool_Ns0bMdTT 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
545 14 Dtool_Ns0bOdhv 0 6 473 2879 0 14 Dtool_Ns0bOdhv 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
546 14 Dtool_Ns0b3C3a 0 6 474 2879 0 14 Dtool_Ns0b3C3a 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
547 14 Dtool_Ns0b2iko 0 6 476 2829 0 14 Dtool_Ns0b2iko 0 2 4 this 3 2879  4 self 1 2829  
548 14 Dtool_Ns0b_QT_ 0 6 477 2829 0 14 Dtool_Ns0b_QT_ 0 2 4 this 3 2879  9 attr_name 1 2831  
549 14 Dtool_Ns0buRI7 0 6 478 2832 0 14 Dtool_Ns0buRI7 0 4 4 this 3 2878  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
550 14 Dtool_Ns0bBy34 0 4 479 2828 0 14 Dtool_Ns0bBy34 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  1 i 1 2832  
551 14 Dtool_Ns0bTrrV 0 6 479 2826 0 14 Dtool_Ns0bTrrV 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  1 i 1 2832  
552 14 Dtool_Ns0bWM5I 0 4 480 2828 0 14 Dtool_Ns0bWM5I 0 3 4 this 3 2878  1 i 1 2832  1 v 1 2826  
553 14 Dtool_Ns0b3Z_8 0 6 481 2832 0 14 Dtool_Ns0b3Z_8 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
554 14 Dtool_Ns0bx62D 0 6 482 2833 0 14 Dtool_Ns0bx62D 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
555 14 Dtool_Ns0bd_Pp 0 6 483 2826 0 14 Dtool_Ns0bd_Pp 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  1 i 1 2832  
556 14 Dtool_Ns0bJYvU 0 6 484 2826 0 14 Dtool_Ns0bJYvU 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
557 14 Dtool_Ns0bJ8oZ 0 6 485 2826 0 14 Dtool_Ns0bJ8oZ 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
558 14 Dtool_Ns0bJQge 0 6 486 2826 0 14 Dtool_Ns0bJQge 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
559 14 Dtool_Ns0bJE3P 0 6 487 2826 0 14 Dtool_Ns0bJE3P 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
560 14 Dtool_Ns0bAQHX 0 4 488 2828 0 14 Dtool_Ns0bAQHX 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2878  1 i 1 2832  5 value 1 2826  
561 14 Dtool_Ns0bJuJp 0 4 489 2828 0 14 Dtool_Ns0bJuJp 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  5 value 1 2826  
562 14 Dtool_Ns0bJKCu 0 4 490 2828 0 14 Dtool_Ns0bJKCu 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  5 value 1 2826  
563 14 Dtool_Ns0bJW6y 0 4 491 2828 0 14 Dtool_Ns0bJW6y 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  5 value 1 2826  
564 14 Dtool_Ns0bJCRk 0 4 492 2828 0 14 Dtool_Ns0bJCRk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  5 value 1 2826  
565 14 Dtool_Ns0bzyHW 0 4 493 2828 0 14 Dtool_Ns0bzyHW 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2878  1 i 1 2832  5 value 1 2826  
566 14 Dtool_Ns0bmmmn 0 4 494 2828 0 14 Dtool_Ns0bmmmn 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  5 value 1 2826  
567 14 Dtool_Ns0bmCfs 0 4 495 2828 0 14 Dtool_Ns0bmCfs 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  5 value 1 2826  
568 14 Dtool_Ns0bmuXx 0 4 496 2828 0 14 Dtool_Ns0bmuXx 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  5 value 1 2826  
569 14 Dtool_Ns0bmaui 0 4 497 2828 0 14 Dtool_Ns0bmaui 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  5 value 1 2826  
570 14 Dtool_Ns0bXRyH 0 4 498 2828 0 14 Dtool_Ns0bXRyH 401 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
571 14 Dtool_Ns0b0F36 0 6 499 2832 0 14 Dtool_Ns0b0F36 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
572 14 Dtool_Ns0bW1HJ 0 4 500 2828 0 14 Dtool_Ns0bW1HJ 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  10 fill_value 1 2826  
573 14 Dtool_Ns0b__rX 0 4 501 2828 0 14 Dtool_Ns0b__rX 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 2878  1 x 1 2826  1 y 1 2826  1 z 1 2826  1 w 1 2826  
574 14 Dtool_Ns0b0Yo_ 0 6 502 2826 0 14 Dtool_Ns0b0Yo_ 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
575 14 Dtool_Ns0bxUcf 0 6 503 2826 0 14 Dtool_Ns0bxUcf 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
576 14 Dtool_Ns0bSsCV 0 6 504 2833 0 14 Dtool_Ns0bSsCV 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2878  
577 14 Dtool_Ns0b2052 0 6 505 2826 0 14 Dtool_Ns0b2052 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  5 other 1 2879  
578 14 Dtool_Ns0bMsWY 0 7 506 2878 2075 14 Dtool_Ns0bMsWY 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  4 onto 1 2879  
579 14 Dtool_Ns0bxlvx 0 6 507 2833 0 14 Dtool_Ns0bxlvx 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  5 other 1 2879  
580 14 Dtool_Ns0bauYz 0 6 508 2833 0 14 Dtool_Ns0bauYz 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  5 other 1 2879  
581 14 Dtool_Ns0bmNAi 0 6 509 2833 0 14 Dtool_Ns0bmNAi 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  5 other 1 2879  
582 14 Dtool_Ns0btXnx 0 6 510 2832 0 14 Dtool_Ns0btXnx 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  5 other 1 2879  
583 14 Dtool_Ns0bIZYW 0 6 510 2832 0 14 Dtool_Ns0bIZYW 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2879  5 other 1 2879  9 threshold 1 2826  
584 14 Dtool_Ns0bdiZ0 0 6 511 2827 0 14 Dtool_Ns0bdiZ0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
585 14 Dtool_Ns0bzn_6 0 6 511 2827 0 14 Dtool_Ns0bzn_6 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  9 threshold 1 2826  
586 14 Dtool_Ns0br3PD 0 6 512 2827 0 14 Dtool_Ns0br3PD 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  4 hash 1 2827  
587 14 Dtool_Ns0bNEBo 0 6 512 2827 0 14 Dtool_Ns0bNEBo 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2879  4 hash 1 2827  9 threshold 1 2826  
588 14 Dtool_Ns0bPOux 0 7 513 2878 2075 14 Dtool_Ns0bPOux 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
589 14 Dtool_Ns0bztwL 0 7 514 2878 2075 14 Dtool_Ns0bztwL 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  5 other 1 2879  
590 14 Dtool_Ns0bzdSf 0 7 515 2878 2075 14 Dtool_Ns0bzdSf 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  5 other 1 2879  
591 14 Dtool_Ns0breVF 0 7 516 2878 2075 14 Dtool_Ns0breVF 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  6 scalar 1 2826  
592 14 Dtool_Ns0br2J2 0 7 517 2878 2075 14 Dtool_Ns0br2J2 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  6 scalar 1 2826  
593 14 Dtool_Ns0btr3T 0 6 518 2878 0 14 Dtool_Ns0btr3T 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  5 other 1 2879  
594 14 Dtool_Ns0btbZn 0 6 519 2878 0 14 Dtool_Ns0btbZn 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  5 other 1 2879  
595 14 Dtool_Ns0b7ZPM 0 6 520 2878 0 14 Dtool_Ns0b7ZPM 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  6 scalar 1 2826  
596 14 Dtool_Ns0b7hD9 0 6 521 2878 0 14 Dtool_Ns0b7hD9 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  6 scalar 1 2826  
597 14 Dtool_Ns0bjRaJ 0 7 522 2878 2075 14 Dtool_Ns0bjRaJ 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  5 other 1 2879  
598 14 Dtool_Ns0bBC7H 0 7 523 2878 2075 14 Dtool_Ns0bBC7H 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  5 other 1 2879  
599 14 Dtool_Ns0byKzg 0 6 524 2833 0 14 Dtool_Ns0byKzg 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  5 other 1 2879  
600 14 Dtool_Ns0b__lQ 0 6 524 2833 0 14 Dtool_Ns0b__lQ 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2879  5 other 1 2879  9 threshold 1 2826  
601 14 Dtool_Ns0bQPcK 0 4 525 2828 0 14 Dtool_Ns0bQPcK 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  3 out 1 2834  
602 14 Dtool_Ns0bFM3d 0 4 526 2828 0 14 Dtool_Ns0bFM3d 0 3 4 this 3 2879  3 out 1 2834  10 class_name 1 2831  
603 14 Dtool_Ns0b1RZF 0 4 527 2828 0 14 Dtool_Ns0b1RZF 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  7 hashgen 1 2836  
604 14 Dtool_Ns0b9JVR 0 4 527 2828 0 14 Dtool_Ns0b9JVR 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2879  7 hashgen 1 2836  9 threshold 1 2826  
605 14 Dtool_Ns0b3_B4 0 4 528 2828 0 14 Dtool_Ns0b3_B4 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  11 destination 1 2838  
606 14 Dtool_Ns0b3Ii0 0 4 529 2828 0 14 Dtool_Ns0b3Ii0 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  6 source 1 2840  
607 14 Dtool_Ns0bZM70 0 4 530 2828 0 14 Dtool_Ns0bZM70 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  11 destination 1 2838  
608 14 Dtool_Ns0bec8G 0 4 531 2828 0 14 Dtool_Ns0bec8G 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  6 source 1 2840  
609 14 Dtool_Ns0bhKuD 0 7 532 2843 0 14 Dtool_Ns0bhKuD 0 0 
610 14 Dtool_Ns0bfbHX 0 7 534 2883 2142 14 Dtool_Ns0bfbHX 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
611 14 Dtool_Ns0bVhK6 0 7 534 2883 2142 14 Dtool_Ns0bVhK6 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2879  
612 14 Dtool_Ns0bgd2S 0 7 534 2883 2142 14 Dtool_Ns0bgd2S 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2881  
613 14 Dtool_Ns0bl_vc 0 7 534 2883 2142 14 Dtool_Ns0bl_vc 227 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2826  1 y 1 2826  1 z 1 2826  1 w 1 2826  
614 14 Dtool_Ns0beh2_ 0 6 535 2883 0 14 Dtool_Ns0beh2_ 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2883  4 copy 1 2879  
615 14 Dtool_Ns0bL5oF 0 6 535 2883 0 14 Dtool_Ns0bL5oF 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2883  4 copy 1 2881  
616 14 Dtool_Ns0bDDFq 0 4 536 2828 0 14 Dtool_Ns0bDDFq 222 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 2883  1 x 1 2826  1 y 1 2826  1 z 1 2826  1 w 1 2826  
617 14 Dtool_Ns0b_xRe 0 4 537 2828 0 14 Dtool_Ns0b_xRe 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2883  1 i 1 2832  
618 14 Dtool_Ns0b2P3h 0 6 537 2826 0 14 Dtool_Ns0b2P3h 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2881  1 i 1 2832  
619 14 Dtool_Ns0bU4PA 0 4 538 2828 0 14 Dtool_Ns0bU4PA 0 3 4 this 3 2883  1 i 1 2832  1 v 1 2826  
620 14 Dtool_Ns0btqyW 0 6 539 2832 0 14 Dtool_Ns0btqyW 280 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
621 14 Dtool_Ns0b7GHI 0 4 540 2828 0 14 Dtool_Ns0b7GHI 408 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2881  
622 14 Dtool_Ns0bfmbG 0 6 541 2832 0 14 Dtool_Ns0bfmbG 283 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2881  
623 14 Dtool_Ns0bIBnP 0 7 542 2843 0 14 Dtool_Ns0bIBnP 0 0 
624 14 Dtool_Ns0bfAuU 0 7 545 2884 2153 14 Dtool_Ns0bfAuU 718 // Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
625 14 Dtool_Ns0bKfrW 0 7 545 2884 2153 14 Dtool_Ns0bKfrW 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2885  
626 14 Dtool_Ns0b6Q3P 0 7 545 2884 2153 14 Dtool_Ns0b6Q3P 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2887  
627 14 Dtool_Ns0b5BJ_ 0 7 545 2884 2153 14 Dtool_Ns0b5BJ_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2847  
628 14 Dtool_Ns0bGENf 0 7 545 2884 2153 14 Dtool_Ns0bGENf 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2847  1 y 1 2847  1 z 1 2847  1 w 1 2847  
629 14 Dtool_Ns0be6iS 0 6 546 2884 0 14 Dtool_Ns0be6iS 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  4 copy 1 2885  
630 14 Dtool_Ns0by8tL 0 6 546 2884 0 14 Dtool_Ns0by8tL 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  4 copy 1 2887  
631 14 Dtool_Ns0bIM_5 0 6 546 2884 0 14 Dtool_Ns0bIM_5 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  10 fill_value 1 2847  
632 14 Dtool_Ns0b26Ht 0 4 547 2828 0 14 Dtool_Ns0b26Ht 0 2 4 this 3 2884  4 size 1 2827  
633 14 Dtool_Ns0bYrPj 0 6 550 2885 0 14 Dtool_Ns0bYrPj 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
634 14 Dtool_Ns0bQxFH 0 6 551 2885 0 14 Dtool_Ns0bQxFH 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
635 14 Dtool_Ns0bSxTj 0 6 552 2885 0 14 Dtool_Ns0bSxTj 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
636 14 Dtool_Ns0bsxh_ 0 6 553 2885 0 14 Dtool_Ns0bsxh_ 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
637 14 Dtool_Ns0bVx3q 0 6 554 2885 0 14 Dtool_Ns0bVx3q 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
638 14 Dtool_Ns0bQxk4 0 6 556 2829 0 14 Dtool_Ns0bQxk4 0 2 4 this 3 2885  4 self 1 2829  
639 14 Dtool_Ns0bQeSO 0 6 557 2829 0 14 Dtool_Ns0bQeSO 0 2 4 this 3 2885  9 attr_name 1 2831  
640 14 Dtool_Ns0bQMJL 0 6 558 2832 0 14 Dtool_Ns0bQMJL 0 4 4 this 3 2884  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
641 14 Dtool_Ns0bmm3I 0 4 559 2828 0 14 Dtool_Ns0bmm3I 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  1 i 1 2832  
642 14 Dtool_Ns0b1Hrl 0 6 559 2847 0 14 Dtool_Ns0b1Hrl 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  1 i 1 2832  
643 14 Dtool_Ns0bglMR 0 4 560 2828 0 14 Dtool_Ns0bglMR 0 3 4 this 3 2884  1 i 1 2832  1 v 1 2847  
644 14 Dtool_Ns0bWK_M 0 6 561 2832 0 14 Dtool_Ns0bWK_M 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
645 14 Dtool_Ns0bPu2T 0 6 562 2833 0 14 Dtool_Ns0bPu2T 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2885  
646 14 Dtool_Ns0b_qP5 0 6 563 2847 0 14 Dtool_Ns0b_qP5 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  1 i 1 2832  
647 14 Dtool_Ns0brtvk 0 6 564 2847 0 14 Dtool_Ns0brtvk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2885  
648 14 Dtool_Ns0brJop 0 6 565 2847 0 14 Dtool_Ns0brJop 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2885  
649 14 Dtool_Ns0brlgu 0 6 566 2847 0 14 Dtool_Ns0brlgu 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2885  
650 14 Dtool_Ns0brx3f 0 6 567 2847 0 14 Dtool_Ns0brx3f 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2885  
651 14 Dtool_Ns0bf_AA 0 4 568 2828 0 14 Dtool_Ns0bf_AA 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2884  1 i 1 2832  5 value 1 2847  
652 14 Dtool_Ns0bjGFc 0 4 569 2828 0 14 Dtool_Ns0bjGFc 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  5 value 1 2847  
653 14 Dtool_Ns0bji9g 0 4 570 2828 0 14 Dtool_Ns0bji9g 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  5 value 1 2847  
654 14 Dtool_Ns0bje2l 0 4 571 2828 0 14 Dtool_Ns0bje2l 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  5 value 1 2847  
655 14 Dtool_Ns0bjqMX 0 4 572 2828 0 14 Dtool_Ns0bjqMX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  5 value 1 2847  
656 14 Dtool_Ns0bfMae 0 4 573 2828 0 14 Dtool_Ns0bfMae 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2884  1 i 1 2832  5 value 1 2847  
657 14 Dtool_Ns0bARia 0 4 574 2828 0 14 Dtool_Ns0bARia 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  5 value 1 2847  
658 14 Dtool_Ns0bA1af 0 4 575 2828 0 14 Dtool_Ns0bA1af 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  5 value 1 2847  
659 14 Dtool_Ns0bAZTk 0 4 576 2828 0 14 Dtool_Ns0bAZTk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  5 value 1 2847  
660 14 Dtool_Ns0bANqV 0 4 577 2828 0 14 Dtool_Ns0bANqV 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  5 value 1 2847  
661 14 Dtool_Ns0bx8zX 0 4 578 2828 0 14 Dtool_Ns0bx8zX 401 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2885  
662 14 Dtool_Ns0bXx2K 0 6 579 2832 0 14 Dtool_Ns0bXx2K 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2885  
663 14 Dtool_Ns0bFbMg 0 4 580 2828 0 14 Dtool_Ns0bFbMg 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  10 fill_value 1 2847  
664 14 Dtool_Ns0bdT7O 0 4 581 2828 0 14 Dtool_Ns0bdT7O 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 2884  1 x 1 2847  1 y 1 2847  1 z 1 2847  1 w 1 2847  
665 14 Dtool_Ns0bVEoP 0 6 582 2847 0 14 Dtool_Ns0bVEoP 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2885  
666 14 Dtool_Ns0bTIcv 0 6 583 2847 0 14 Dtool_Ns0bTIcv 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2885  
667 14 Dtool_Ns0bwBCl 0 6 584 2833 0 14 Dtool_Ns0bwBCl 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2884  
668 14 Dtool_Ns0bVfrF 0 6 585 2847 0 14 Dtool_Ns0bVfrF 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  5 other 1 2885  
669 14 Dtool_Ns0bO3Ro 0 7 586 2884 2153 14 Dtool_Ns0bO3Ro 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  4 onto 1 2885  
670 14 Dtool_Ns0bzfP_ 0 6 587 2833 0 14 Dtool_Ns0bzfP_ 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  5 other 1 2885  
671 14 Dtool_Ns0beFYT 0 6 588 2833 0 14 Dtool_Ns0beFYT 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  5 other 1 2885  
672 14 Dtool_Ns0balAC 0 6 589 2833 0 14 Dtool_Ns0balAC 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  5 other 1 2885  
673 14 Dtool_Ns0b0LH_ 0 6 590 2832 0 14 Dtool_Ns0b0LH_ 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  5 other 1 2885  
674 14 Dtool_Ns0b319I 0 6 590 2832 0 14 Dtool_Ns0b319I 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2885  5 other 1 2885  9 threshold 1 2847  
675 14 Dtool_Ns0b8_ZE 0 6 591 2827 0 14 Dtool_Ns0b8_ZE 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2885  
676 14 Dtool_Ns0bSwXj 0 6 591 2827 0 14 Dtool_Ns0bSwXj 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  9 threshold 1 2847  
677 14 Dtool_Ns0bJoPT 0 6 592 2827 0 14 Dtool_Ns0bJoPT 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  4 hash 1 2827  
678 14 Dtool_Ns0bXZGe 0 6 592 2827 0 14 Dtool_Ns0bXZGe 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2885  4 hash 1 2827  9 threshold 1 2847  
679 14 Dtool_Ns0bQyvB 0 7 593 2884 2153 14 Dtool_Ns0bQyvB 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2885  
680 14 Dtool_Ns0btXQY 0 7 594 2884 2153 14 Dtool_Ns0btXQY 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  5 other 1 2885  
681 14 Dtool_Ns0btnyr 0 7 595 2884 2153 14 Dtool_Ns0btnyr 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  5 other 1 2885  
682 14 Dtool_Ns0bW_WY 0 7 596 2884 2153 14 Dtool_Ns0bW_WY 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  6 scalar 1 2847  
683 14 Dtool_Ns0bXWNJ 0 7 597 2884 2153 14 Dtool_Ns0bXWNJ 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  6 scalar 1 2847  
684 14 Dtool_Ns0bhw2z 0 6 598 2884 0 14 Dtool_Ns0bhw2z 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  5 other 1 2885  
685 14 Dtool_Ns0biAYH 0 6 599 2884 0 14 Dtool_Ns0biAYH 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  5 other 1 2885  
686 14 Dtool_Ns0b5DXY 0 6 600 2884 0 14 Dtool_Ns0b5DXY 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  6 scalar 1 2847  
687 14 Dtool_Ns0b_7LJ 0 6 601 2884 0 14 Dtool_Ns0b_7LJ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  6 scalar 1 2847  
688 14 Dtool_Ns0b_0Xy 0 7 602 2884 2153 14 Dtool_Ns0b_0Xy 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  5 other 1 2885  
689 14 Dtool_Ns0bdn2w 0 7 603 2884 2153 14 Dtool_Ns0bdn2w 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  5 other 1 2885  
690 14 Dtool_Ns0bcoqw 0 6 604 2833 0 14 Dtool_Ns0bcoqw 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  5 other 1 2885  
691 14 Dtool_Ns0b9ILB 0 6 604 2833 0 14 Dtool_Ns0b9ILB 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2885  5 other 1 2885  9 threshold 1 2847  
692 14 Dtool_Ns0b1Bda 0 4 605 2828 0 14 Dtool_Ns0b1Bda 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  3 out 1 2834  
693 14 Dtool_Ns0beB2t 0 4 606 2828 0 14 Dtool_Ns0beB2t 0 3 4 this 3 2885  3 out 1 2834  10 class_name 1 2831  
694 14 Dtool_Ns0brlZV 0 4 607 2828 0 14 Dtool_Ns0brlZV 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  7 hashgen 1 2836  
695 14 Dtool_Ns0bMhf5 0 4 607 2828 0 14 Dtool_Ns0bMhf5 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2885  7 hashgen 1 2836  9 threshold 1 2847  
696 14 Dtool_Ns0bQsBI 0 4 608 2828 0 14 Dtool_Ns0bQsBI 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  11 destination 1 2838  
697 14 Dtool_Ns0bUkiE 0 4 609 2828 0 14 Dtool_Ns0bUkiE 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  6 source 1 2840  
698 14 Dtool_Ns0bjJ6E 0 4 610 2828 0 14 Dtool_Ns0bjJ6E 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2885  11 destination 1 2838  
699 14 Dtool_Ns0b4P8W 0 4 611 2828 0 14 Dtool_Ns0b4P8W 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2884  6 source 1 2840  
700 14 Dtool_Ns0bGAvT 0 7 612 2843 0 14 Dtool_Ns0bGAvT 0 0 
701 14 Dtool_Ns0bj4zI 0 7 614 2889 2220 14 Dtool_Ns0bj4zI 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
702 14 Dtool_Ns0bKsyE 0 7 614 2889 2220 14 Dtool_Ns0bKsyE 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2885  
703 14 Dtool_Ns0b1Rq_ 0 7 614 2889 2220 14 Dtool_Ns0b1Rq_ 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2887  
704 14 Dtool_Ns0bKT22 0 7 614 2889 2220 14 Dtool_Ns0bKT22 227 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2847  1 y 1 2847  1 z 1 2847  1 w 1 2847  
705 14 Dtool_Ns0b5na5 0 6 615 2889 0 14 Dtool_Ns0b5na5 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2889  4 copy 1 2885  
706 14 Dtool_Ns0b0fkQ 0 6 615 2889 0 14 Dtool_Ns0b0fkQ 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2889  4 copy 1 2887  
707 14 Dtool_Ns0bB49g 0 4 616 2828 0 14 Dtool_Ns0bB49g 222 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 2889  1 x 1 2847  1 y 1 2847  1 z 1 2847  1 w 1 2847  
708 14 Dtool_Ns0bT8QQ 0 4 617 2828 0 14 Dtool_Ns0bT8QQ 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2889  1 i 1 2832  
709 14 Dtool_Ns0bSI3T 0 6 617 2847 0 14 Dtool_Ns0bSI3T 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2887  1 i 1 2832  
710 14 Dtool_Ns0bsMSh 0 4 618 2828 0 14 Dtool_Ns0bsMSh 0 3 4 this 3 2889  1 i 1 2832  1 v 1 2847  
711 14 Dtool_Ns0bYnzI 0 6 619 2832 0 14 Dtool_Ns0bYnzI 280 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
712 14 Dtool_Ns0bY7H6 0 4 620 2828 0 14 Dtool_Ns0bY7H6 408 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2887  
713 14 Dtool_Ns0bihb4 0 6 621 2832 0 14 Dtool_Ns0bihb4 283 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2887  
714 14 Dtool_Ns0bkDnB 0 7 622 2843 0 14 Dtool_Ns0bkDnB 0 0 
715 14 Dtool_Ns0b2hGZ 0 7 625 2890 2238 14 Dtool_Ns0b2hGZ 713 // Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
716 14 Dtool_Ns0b55R7 0 7 625 2890 2238 14 Dtool_Ns0b55R7 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2879  
717 14 Dtool_Ns0bIgP3 0 7 625 2890 2238 14 Dtool_Ns0bIgP3 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2826  
718 14 Dtool_Ns0bGLX9 0 7 625 2890 2238 14 Dtool_Ns0bGLX9 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2826  1 y 1 2826  1 z 1 2826  1 w 1 2826  
719 14 Dtool_Ns0bq2Ys 0 6 626 2890 0 14 Dtool_Ns0bq2Ys 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2890  4 copy 1 2879  
720 14 Dtool_Ns0bRfUr 0 6 626 2890 0 14 Dtool_Ns0bRfUr 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2890  10 fill_value 1 2826  
721 14 Dtool_Ns0bu3EG 0 6 627 2829 0 14 Dtool_Ns0bu3EG 0 2 4 this 3 2891  9 attr_name 1 2831  
722 14 Dtool_Ns0boq7P 0 6 628 2832 0 14 Dtool_Ns0boq7P 0 4 4 this 3 2890  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
723 14 Dtool_Ns0bPC0O 0 6 629 2891 0 14 Dtool_Ns0bPC0O 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
724 14 Dtool_Ns0bxI8j 0 6 630 2891 0 14 Dtool_Ns0bxI8j 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
725 14 Dtool_Ns0bxk1o 0 6 631 2891 0 14 Dtool_Ns0bxk1o 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
726 14 Dtool_Ns0bxAtt 0 6 632 2891 0 14 Dtool_Ns0bxAtt 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
727 14 Dtool_Ns0bxsEf 0 6 633 2891 0 14 Dtool_Ns0bxsEf 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
728 14 Dtool_Ns0bWMwv 0 7 634 2890 2238 14 Dtool_Ns0bWMwv 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2891  
729 14 Dtool_Ns0bWUig 0 7 635 2878 2075 14 Dtool_Ns0bWUig 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2891  5 other 1 2879  
730 14 Dtool_Ns0bOmWu 0 7 635 2890 2238 14 Dtool_Ns0bOmWu 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2891  5 other 1 2891  
731 14 Dtool_Ns0b2RJh 0 7 636 2878 2075 14 Dtool_Ns0b2RJh 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2891  5 other 1 2879  
732 14 Dtool_Ns0buj9u 0 7 636 2890 2238 14 Dtool_Ns0buj9u 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2891  5 other 1 2891  
733 14 Dtool_Ns0bTPWC 0 7 637 2890 2238 14 Dtool_Ns0bTPWC 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2891  6 scalar 1 2826  
734 14 Dtool_Ns0bjn4D 0 7 638 2890 2238 14 Dtool_Ns0bjn4D 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2891  6 scalar 1 2826  
735 14 Dtool_Ns0bGh8I 0 7 639 2890 2238 14 Dtool_Ns0bGh8I 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2891  4 onto 1 2879  
736 14 Dtool_Ns0beACX 0 4 640 2828 0 14 Dtool_Ns0beACX 0 3 4 this 3 2891  3 out 1 2834  10 class_name 1 2831  
737 14 Dtool_Ns0bvYTA 0 7 641 2843 0 14 Dtool_Ns0bvYTA 0 0 
738 14 Dtool_Ns0bSTkV 0 7 644 2893 2256 14 Dtool_Ns0bSTkV 713 // Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
739 14 Dtool_Ns0brcU1 0 7 644 2893 2256 14 Dtool_Ns0brcU1 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2885  
740 14 Dtool_Ns0b8AKA 0 7 644 2893 2256 14 Dtool_Ns0b8AKA 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2847  
741 14 Dtool_Ns0b72XI 0 7 644 2893 2256 14 Dtool_Ns0b72XI 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2847  1 y 1 2847  1 z 1 2847  1 w 1 2847  
742 14 Dtool_Ns0by3xa 0 6 645 2893 0 14 Dtool_Ns0by3xa 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2893  4 copy 1 2885  
743 14 Dtool_Ns0bp_A2 0 6 645 2893 0 14 Dtool_Ns0bp_A2 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2893  10 fill_value 1 2847  
744 14 Dtool_Ns0bJ0kC 0 6 646 2829 0 14 Dtool_Ns0bJ0kC 0 2 4 this 3 2894  9 attr_name 1 2831  
745 14 Dtool_Ns0bxrbM 0 6 647 2832 0 14 Dtool_Ns0bxrbM 0 4 4 this 3 2893  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
746 14 Dtool_Ns0b2FUL 0 6 648 2894 0 14 Dtool_Ns0b2FUL 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
747 14 Dtool_Ns0boXcg 0 6 649 2894 0 14 Dtool_Ns0boXcg 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
748 14 Dtool_Ns0bo7Vl 0 6 650 2894 0 14 Dtool_Ns0bo7Vl 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
749 14 Dtool_Ns0bofNq 0 6 651 2894 0 14 Dtool_Ns0bofNq 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
750 14 Dtool_Ns0bozkb 0 6 652 2894 0 14 Dtool_Ns0bozkb 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
751 14 Dtool_Ns0bPNQs 0 7 653 2893 2256 14 Dtool_Ns0bPNQs 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2894  
752 14 Dtool_Ns0buV7O 0 7 654 2884 2153 14 Dtool_Ns0buV7O 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 other 1 2885  
753 14 Dtool_Ns0bh1ao 0 7 654 2893 2256 14 Dtool_Ns0bh1ao 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 other 1 2894  
754 14 Dtool_Ns0bOQiP 0 7 655 2884 2153 14 Dtool_Ns0bOQiP 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 other 1 2885  
755 14 Dtool_Ns0bBwBp 0 7 655 2893 2256 14 Dtool_Ns0bBwBp 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  5 other 1 2894  
756 14 Dtool_Ns0b9Z8K 0 7 656 2893 2256 14 Dtool_Ns0b9Z8K 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  6 scalar 1 2847  
757 14 Dtool_Ns0btwdM 0 7 657 2893 2256 14 Dtool_Ns0btwdM 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  6 scalar 1 2847  
758 14 Dtool_Ns0b1mdN 0 7 658 2893 2256 14 Dtool_Ns0b1mdN 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2894  4 onto 1 2885  
759 14 Dtool_Ns0bxDiT 0 4 659 2828 0 14 Dtool_Ns0bxDiT 0 3 4 this 3 2894  3 out 1 2834  10 class_name 1 2831  
760 14 Dtool_Ns0bHZz8 0 7 660 2843 0 14 Dtool_Ns0bHZz8 0 0 
761 14 Dtool_Ns0bzUXk 0 7 663 2896 2274 14 Dtool_Ns0bzUXk 711 // Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
762 14 Dtool_Ns0bSD57 0 7 663 2896 2274 14 Dtool_Ns0bSD57 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2879  
763 14 Dtool_Ns0bCj8c 0 7 663 2896 2274 14 Dtool_Ns0bCj8c 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2826  
764 14 Dtool_Ns0bzr8M 0 7 663 2896 2274 14 Dtool_Ns0bzr8M 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2826  1 y 1 2826  1 z 1 2826  1 w 1 2826  
765 14 Dtool_Ns0bbZBR 0 6 664 2896 0 14 Dtool_Ns0bbZBR 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2896  4 copy 1 2879  
766 14 Dtool_Ns0bqdAN 0 6 664 2896 0 14 Dtool_Ns0bqdAN 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2896  10 fill_value 1 2826  
767 14 Dtool_Ns0bPNxP 0 6 665 2829 0 14 Dtool_Ns0bPNxP 0 2 4 this 3 2897  9 attr_name 1 2831  
768 14 Dtool_Ns0bbWBk 0 6 666 2832 0 14 Dtool_Ns0bbWBk 0 4 4 this 3 2896  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
769 14 Dtool_Ns0bq1J6 0 6 667 2897 0 14 Dtool_Ns0bq1J6 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
770 14 Dtool_Ns0bC0yG 0 6 668 2897 0 14 Dtool_Ns0bC0yG 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
771 14 Dtool_Ns0baH8G 0 6 669 2897 0 14 Dtool_Ns0baH8G 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
772 14 Dtool_Ns0bSWGH 0 6 670 2897 0 14 Dtool_Ns0bSWGH 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
773 14 Dtool_Ns0bKloG 0 6 671 2897 0 14 Dtool_Ns0bKloG 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
774 14 Dtool_Ns0b0LJX 0 7 672 2896 2274 14 Dtool_Ns0b0LJX 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2897  
775 14 Dtool_Ns0bIcoy 0 7 673 2878 2075 14 Dtool_Ns0bIcoy 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2897  5 other 1 2879  
776 14 Dtool_Ns0bopEn 0 7 673 2896 2274 14 Dtool_Ns0bopEn 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2897  5 other 1 2891  
777 14 Dtool_Ns0bMM2G 0 7 674 2890 2238 14 Dtool_Ns0bMM2G 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2897  5 other 1 2897  
778 14 Dtool_Ns0bTupy 0 7 674 2878 2075 14 Dtool_Ns0bTupy 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2897  5 other 1 2879  
779 14 Dtool_Ns0bXbFn 0 7 674 2896 2274 14 Dtool_Ns0bXbFn 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2897  5 other 1 2891  
780 14 Dtool_Ns0bUdt9 0 7 675 2896 2274 14 Dtool_Ns0bUdt9 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2897  6 scalar 1 2826  
781 14 Dtool_Ns0brXwd 0 7 676 2896 2274 14 Dtool_Ns0brXwd 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2897  6 scalar 1 2826  
782 14 Dtool_Ns0bIt7R 0 7 677 2896 2274 14 Dtool_Ns0bIt7R 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2897  4 onto 1 2879  
783 14 Dtool_Ns0bFwQw 0 4 678 2828 0 14 Dtool_Ns0bFwQw 0 3 4 this 3 2897  3 out 1 2834  10 class_name 1 2831  
784 14 Dtool_Ns0bnbpV 0 7 679 2843 0 14 Dtool_Ns0bnbpV 0 0 
785 14 Dtool_Ns0btU0d 0 7 682 2899 2292 14 Dtool_Ns0btU0d 711 // Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
786 14 Dtool_Ns0bJZW9 0 7 682 2899 2292 14 Dtool_Ns0bJZW9 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2885  
787 14 Dtool_Ns0b36e0 0 7 682 2899 2292 14 Dtool_Ns0b36e0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2847  
788 14 Dtool_Ns0bCpeG 0 7 682 2899 2292 14 Dtool_Ns0bCpeG 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2847  1 y 1 2847  1 z 1 2847  1 w 1 2847  
789 14 Dtool_Ns0bYHeA 0 6 683 2899 0 14 Dtool_Ns0bYHeA 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  4 copy 1 2885  
790 14 Dtool_Ns0bMxVL 0 6 683 2899 0 14 Dtool_Ns0bMxVL 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2899  10 fill_value 1 2847  
791 14 Dtool_Ns0bONqB 0 6 684 2829 0 14 Dtool_Ns0bONqB 0 2 4 this 3 2900  9 attr_name 1 2831  
792 14 Dtool_Ns0baW6V 0 6 685 2832 0 14 Dtool_Ns0baW6V 0 4 4 this 3 2899  4 self 1 2829  9 attr_name 1 2831  6 assign 1 2829  
793 14 Dtool_Ns0br1Cs 0 6 686 2900 0 14 Dtool_Ns0br1Cs 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
794 14 Dtool_Ns0bA0r4 0 6 687 2900 0 14 Dtool_Ns0bA0r4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
795 14 Dtool_Ns0bYH14 0 6 688 2900 0 14 Dtool_Ns0bYH14 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
796 14 Dtool_Ns0bQW_4 0 6 689 2900 0 14 Dtool_Ns0bQW_4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
797 14 Dtool_Ns0bIlh4 0 6 690 2900 0 14 Dtool_Ns0bIlh4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
798 14 Dtool_Ns0b1LCJ 0 7 691 2899 2292 14 Dtool_Ns0b1LCJ 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2900  
799 14 Dtool_Ns0bLSFi 0 7 692 2884 2153 14 Dtool_Ns0bLSFi 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2900  5 other 1 2885  
800 14 Dtool_Ns0bzh4Y 0 7 692 2899 2292 14 Dtool_Ns0bzh4Y 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2900  5 other 1 2894  
801 14 Dtool_Ns0bxIuA 0 7 693 2893 2256 14 Dtool_Ns0bxIuA 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2900  5 other 1 2900  
802 14 Dtool_Ns0bQcGi 0 7 693 2884 2153 14 Dtool_Ns0bQcGi 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2900  5 other 1 2885  
803 14 Dtool_Ns0b0T5Y 0 7 693 2899 2292 14 Dtool_Ns0b0T5Y 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2900  5 other 1 2894  
804 14 Dtool_Ns0bre_H 0 7 694 2899 2292 14 Dtool_Ns0bre_H 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2900  6 scalar 1 2847  
805 14 Dtool_Ns0b6DAo 0 7 695 2899 2292 14 Dtool_Ns0b6DAo 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2900  6 scalar 1 2847  
806 14 Dtool_Ns0bjtEi 0 7 696 2899 2292 14 Dtool_Ns0bjtEi 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2900  4 onto 1 2885  
807 14 Dtool_Ns0bEwJi 0 4 697 2828 0 14 Dtool_Ns0bEwJi 0 3 4 this 3 2900  3 out 1 2834  10 class_name 1 2831  
808 14 Dtool_Ns0bmbiH 0 7 698 2843 0 14 Dtool_Ns0bmbiH 0 0 
809 14 Dtool_Ns0bl0PU 0 7 710 2902 2373 14 Dtool_Ns0bl0PU 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
810 14 Dtool_Ns0bsN2u 0 7 710 2902 2373 14 Dtool_Ns0bsN2u 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2903  
811 14 Dtool_Ns0bQz8c 0 7 710 2902 2373 14 Dtool_Ns0bQz8c 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 2826  3 e01 1 2826  3 e02 1 2826  3 e10 1 2826  3 e11 1 2826  3 e12 1 2826  3 e20 1 2826  3 e21 1 2826  3 e22 1 2826  
812 14 Dtool_Ns0bWGVN 0 6 711 2902 0 14 Dtool_Ns0bWGVN 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  5 other 1 2903  
813 14 Dtool_Ns0bOZp_ 0 6 711 2902 0 14 Dtool_Ns0bOZp_ 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  10 fill_value 1 2826  
814 14 Dtool_Ns0bxIaw 0 4 712 2828 0 14 Dtool_Ns0bxIaw 0 2 4 this 3 2902  4 size 1 2827  
815 14 Dtool_Ns0b74w_ 0 6 715 2829 0 14 Dtool_Ns0b74w_ 0 2 4 this 3 2903  4 self 1 2829  
816 14 Dtool_Ns0bgH0z 0 4 716 2828 0 14 Dtool_Ns0bgH0z 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  10 fill_value 1 2826  
817 14 Dtool_Ns0bz3qU 0 4 717 2828 0 14 Dtool_Ns0bz3qU 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 2902  3 e00 1 2826  3 e01 1 2826  3 e02 1 2826  3 e10 1 2826  3 e11 1 2826  3 e12 1 2826  3 e20 1 2826  3 e21 1 2826  3 e22 1 2826  
818 14 Dtool_Ns0bN5w9 0 4 718 2828 0 14 Dtool_Ns0bN5w9 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2902  3 row 1 2832  1 v 1 2824  
819 14 Dtool_Ns0b55gf 0 4 718 2828 0 14 Dtool_Ns0b55gf 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2902  3 row 1 2832  1 v 1 2861  
820 14 Dtool_Ns0bvDEF 0 4 719 2828 0 14 Dtool_Ns0bvDEF 332 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2902  3 col 1 2832  1 v 1 2824  
821 14 Dtool_Ns0bac0m 0 4 719 2828 0 14 Dtool_Ns0bac0m 311 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2902  3 col 1 2832  1 v 1 2861  
822 14 Dtool_Ns0bdfDX 0 4 720 2828 0 14 Dtool_Ns0bdfDX 301 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2903  10 result_vec 1 2860  3 row 1 2832  
823 14 Dtool_Ns0bwROZ 0 7 720 2860 1816 14 Dtool_Ns0bwROZ 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  3 row 1 2832  
824 14 Dtool_Ns0bFuhg 0 7 721 2860 1816 14 Dtool_Ns0bFuhg 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  3 col 1 2832  
825 14 Dtool_Ns0b7qSI 0 7 722 2823 1627 14 Dtool_Ns0b7qSI 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  3 row 1 2832  
826 14 Dtool_Ns0bWJmP 0 7 723 2823 1627 14 Dtool_Ns0bWJmP 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  3 col 1 2832  
827 14 Dtool_Ns0bHBvR 0 4 724 2828 0 14 Dtool_Ns0bHBvR 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2902  3 row 1 2832  3 col 1 2832  
828 14 Dtool_Ns0b_Fgz 0 6 724 2826 0 14 Dtool_Ns0b_Fgz 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2903  3 row 1 2832  3 col 1 2832  
829 14 Dtool_Ns0bn3T3 0 7 725 2905 2296 14 Dtool_Ns0bn3T3 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  1 i 1 2832  
830 14 Dtool_Ns0bcUMI 0 7 725 2906 2299 14 Dtool_Ns0bcUMI 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  1 i 1 2832  
831 14 Dtool_Ns0bkTdF 0 6 726 2832 0 14 Dtool_Ns0bkTdF 266 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
832 14 Dtool_Ns0bR3pT 0 6 727 2833 0 14 Dtool_Ns0bR3pT 310 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2903  
833 14 Dtool_Ns0bH4Zy 0 6 728 2826 0 14 Dtool_Ns0bH4Zy 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2903  3 row 1 2832  3 col 1 2832  
834 14 Dtool_Ns0bl0_H 0 4 729 2828 0 14 Dtool_Ns0bl0_H 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2902  3 row 1 2832  3 col 1 2832  5 value 1 2826  
835 14 Dtool_Ns0bWvxR 0 4 730 2828 0 14 Dtool_Ns0bWvxR 401 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2903  
836 14 Dtool_Ns0bbMUR 0 6 731 2832 0 14 Dtool_Ns0bbMUR 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2903  
837 14 Dtool_Ns0bvhzu 0 6 732 2833 0 14 Dtool_Ns0bvhzu 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  5 other 1 2903  
838 14 Dtool_Ns0bJQr_ 0 6 733 2833 0 14 Dtool_Ns0bJQr_ 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  5 other 1 2903  
839 14 Dtool_Ns0bJhJ3 0 6 734 2833 0 14 Dtool_Ns0bJhJ3 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  5 other 1 2903  
840 14 Dtool_Ns0bKM0m 0 6 735 2832 0 14 Dtool_Ns0bKM0m 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  5 other 1 2903  
841 14 Dtool_Ns0bxCZj 0 6 735 2832 0 14 Dtool_Ns0bxCZj 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2903  5 other 1 2903  9 threshold 1 2826  
842 14 Dtool_Ns0bW4In 0 6 736 2827 0 14 Dtool_Ns0bW4In 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2903  
843 14 Dtool_Ns0bG8W5 0 6 736 2827 0 14 Dtool_Ns0bG8W5 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  9 threshold 1 2826  
844 14 Dtool_Ns0bpcnj 0 6 737 2827 0 14 Dtool_Ns0bpcnj 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  4 hash 1 2827  
845 14 Dtool_Ns0bGmv2 0 6 737 2827 0 14 Dtool_Ns0bGmv2 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2903  4 hash 1 2827  9 threshold 1 2826  
846 14 Dtool_Ns0bHzw6 0 7 738 2860 1816 14 Dtool_Ns0bHzw6 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  1 v 1 2861  
847 14 Dtool_Ns0bE0BQ 0 7 739 2823 1627 14 Dtool_Ns0bE0BQ 403 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  1 v 1 2824  
848 14 Dtool_Ns0bI3MJ 0 7 740 2823 1627 14 Dtool_Ns0bI3MJ 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  1 v 1 2824  
849 14 Dtool_Ns0babOJ 0 7 740 2860 1816 14 Dtool_Ns0babOJ 447 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  1 v 1 2861  
850 14 Dtool_Ns0bJ0pj 0 7 741 2860 1816 14 Dtool_Ns0bJ0pj 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  1 v 1 2861  
851 14 Dtool_Ns0bBsdm 0 4 742 2828 0 14 Dtool_Ns0bBsdm 265 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  1 v 1 2860  
852 14 Dtool_Ns0bWmBi 0 4 743 2828 0 14 Dtool_Ns0bWmBi 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  1 v 1 2823  
853 14 Dtool_Ns0b3Y53 0 4 744 2828 0 14 Dtool_Ns0b3Y53 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  1 v 1 2823  
854 14 Dtool_Ns0bV04n 0 4 744 2828 0 14 Dtool_Ns0bV04n 416 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  1 v 1 2860  
855 14 Dtool_Ns0bYYwa 0 4 745 2828 0 14 Dtool_Ns0bYYwa 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  1 v 1 2860  
856 14 Dtool_Ns0bSR6_ 0 4 746 2828 0 14 Dtool_Ns0bSR6_ 25 // this = other1 * other2 3 4 this 3 2902  6 other1 1 2903  6 other2 1 2903  
857 14 Dtool_Ns0bPBTp 0 7 747 2902 2373 14 Dtool_Ns0bPBTp 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  5 other 1 2903  
858 14 Dtool_Ns0bcFqV 0 7 747 2902 2373 14 Dtool_Ns0bcFqV 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  6 scalar 1 2826  
859 14 Dtool_Ns0bMqMX 0 7 748 2902 2373 14 Dtool_Ns0bMqMX 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  6 scalar 1 2826  
860 14 Dtool_Ns0bE0iA 0 6 749 2902 0 14 Dtool_Ns0bE0iA 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  5 other 1 2903  
861 14 Dtool_Ns0bkIJB 0 6 750 2902 0 14 Dtool_Ns0bkIJB 281 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  5 other 1 2903  
862 14 Dtool_Ns0b0XOA 0 6 751 2902 0 14 Dtool_Ns0b0XOA 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  5 other 1 2903  
863 14 Dtool_Ns0bMH5p 0 6 751 2902 0 14 Dtool_Ns0bMH5p 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  6 scalar 1 2826  
864 14 Dtool_Ns0bc8ar 0 6 752 2902 0 14 Dtool_Ns0bc8ar 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  6 scalar 1 2826  
865 14 Dtool_Ns0b3zlL 0 6 753 2826 0 14 Dtool_Ns0b3zlL 259 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2903  
866 14 Dtool_Ns0blS3s 0 4 754 2828 0 14 Dtool_Ns0blS3s 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  5 other 1 2903  
867 14 Dtool_Ns0b8Ojo 0 4 755 2828 0 14 Dtool_Ns0b8Ojo 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2902  
868 14 Dtool_Ns0bUKZ2 0 6 756 2833 0 14 Dtool_Ns0bUKZ2 808 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  5 other 1 2903  
869 14 Dtool_Ns0bhuLY 0 6 757 2833 0 14 Dtool_Ns0bhuLY 364 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2902  
870 14 Dtool_Ns0bKfCp 0 6 758 2833 0 14 Dtool_Ns0bKfCp 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  5 other 1 2903  
871 14 Dtool_Ns0bKD6t 0 6 758 2833 0 14 Dtool_Ns0bKD6t 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  5 other 1 2907  
872 14 Dtool_Ns0bq8vo 0 6 759 2903 0 14 Dtool_Ns0bq8vo 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
873 14 Dtool_Ns0boByR 0 4 760 2828 0 14 Dtool_Ns0boByR 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  5 trans 1 2824  
874 14 Dtool_Ns0bd4J2 0 4 761 2828 0 14 Dtool_Ns0bd4J2 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  5 angle 1 2826  
875 14 Dtool_Ns0bPymL 0 4 761 2828 0 14 Dtool_Ns0bPymL 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2902  5 angle 1 2826  4 axis 1 2861  2 cs 1 2790  
876 14 Dtool_Ns0bdiBV 0 4 761 2828 0 14 Dtool_Ns0bdiBV 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2902  5 angle 1 2826  4 axis 1 2861  
877 14 Dtool_Ns0bSAXQ 0 4 762 2828 0 14 Dtool_Ns0bSAXQ 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  5 scale 1 2824  
878 14 Dtool_Ns0bB2WI 0 4 762 2828 0 14 Dtool_Ns0bB2WI 322 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  5 scale 1 2861  
879 14 Dtool_Ns0b9Yv7 0 7 763 2902 2373 14 Dtool_Ns0b9Yv7 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2824  
880 14 Dtool_Ns0b1aHR 0 7 763 2902 2373 14 Dtool_Ns0b1aHR 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 2826  2 ty 1 2826  
881 14 Dtool_Ns0bwS2A 0 7 764 2902 2373 14 Dtool_Ns0bwS2A 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 2826  
882 14 Dtool_Ns0bzgNZ 0 7 764 2902 2373 14 Dtool_Ns0bzgNZ 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2826  4 axis 1 2861  2 cs 1 2790  
883 14 Dtool_Ns0by0rv 0 7 764 2902 2373 14 Dtool_Ns0by0rv 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2826  4 axis 1 2861  
884 14 Dtool_Ns0bfF2k 0 7 765 2902 2373 14 Dtool_Ns0bfF2k 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2824  
885 14 Dtool_Ns0bNp4k 0 7 765 2902 2373 14 Dtool_Ns0bNp4k 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2861  
886 14 Dtool_Ns0bKKk6 0 7 765 2902 2373 14 Dtool_Ns0bKKk6 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 2826  2 sy 1 2826  
887 14 Dtool_Ns0bx6ng 0 7 765 2902 2373 14 Dtool_Ns0bx6ng 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2826  2 sy 1 2826  2 sz 1 2826  
888 14 Dtool_Ns0bA7ca 0 4 766 2828 0 14 Dtool_Ns0bA7ca 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2902  5 angle 1 2826  4 axis 1 2861  2 cs 1 2790  
889 14 Dtool_Ns0biLqT 0 4 766 2828 0 14 Dtool_Ns0biLqT 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2902  5 angle 1 2826  4 axis 1 2861  
890 14 Dtool_Ns0bSl9G 0 7 767 2902 2373 14 Dtool_Ns0bSl9G 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2826  4 axis 1 2861  2 cs 1 2790  
891 14 Dtool_Ns0bif2Z 0 7 767 2902 2373 14 Dtool_Ns0bif2Z 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2826  4 axis 1 2861  
892 14 Dtool_Ns0b_oI_ 0 4 768 2828 0 14 Dtool_Ns0b_oI_ 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2902  5 shear 1 2861  2 cs 1 2790  
893 14 Dtool_Ns0b5pyk 0 4 768 2828 0 14 Dtool_Ns0b5pyk 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  5 shear 1 2861  
894 14 Dtool_Ns0b4aMC 0 7 769 2902 2373 14 Dtool_Ns0b4aMC 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2861  2 cs 1 2790  
895 14 Dtool_Ns0bKUWr 0 7 769 2902 2373 14 Dtool_Ns0bKUWr 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2861  
896 14 Dtool_Ns0biw5Z 0 7 769 2902 2373 14 Dtool_Ns0biw5Z 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2826  4 shxz 1 2826  4 shyz 1 2826  2 cs 1 2790  
897 14 Dtool_Ns0bwRFn 0 7 769 2902 2373 14 Dtool_Ns0bwRFn 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2826  4 shxz 1 2826  4 shyz 1 2826  
898 14 Dtool_Ns0bZjM_ 0 4 770 2828 0 14 Dtool_Ns0bZjM_ 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2902  5 scale 1 2861  5 shear 1 2861  2 cs 1 2790  
899 14 Dtool_Ns0bFn4k 0 4 770 2828 0 14 Dtool_Ns0bFn4k 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2902  5 scale 1 2861  5 shear 1 2861  
900 14 Dtool_Ns0baF0T 0 7 771 2902 2373 14 Dtool_Ns0baF0T 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2861  5 shear 1 2861  2 cs 1 2790  
901 14 Dtool_Ns0b_Jjt 0 7 771 2902 2373 14 Dtool_Ns0b_Jjt 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2861  5 shear 1 2861  
902 14 Dtool_Ns0biFf9 0 7 771 2902 2373 14 Dtool_Ns0biFf9 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2826  2 sy 1 2826  2 sz 1 2826  4 shxy 1 2826  4 shxz 1 2826  4 shyz 1 2826  2 cs 1 2790  
903 14 Dtool_Ns0bie6G 0 7 771 2902 2373 14 Dtool_Ns0bie6G 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2826  2 sy 1 2826  2 sz 1 2826  4 shxy 1 2826  4 shxz 1 2826  4 shyz 1 2826  
904 14 Dtool_Ns0bjv0p 0 6 772 2903 0 14 Dtool_Ns0bjv0p 350 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2790  2 to 1 2790  
905 14 Dtool_Ns0b5LZV 0 6 773 2833 0 14 Dtool_Ns0b5LZV 342 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  5 other 1 2903  
906 14 Dtool_Ns0bjSL6 0 6 773 2833 0 14 Dtool_Ns0bjSL6 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2903  5 other 1 2903  9 threshold 1 2826  
907 14 Dtool_Ns0bzE1n 0 4 774 2828 0 14 Dtool_Ns0bzE1n 215 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  3 out 1 2834  
908 14 Dtool_Ns0bxi6e 0 4 775 2828 0 14 Dtool_Ns0bxi6e 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2903  3 out 1 2834  12 indent_level 1 2832  
909 14 Dtool_Ns0bt5Vo 0 4 775 2828 0 14 Dtool_Ns0bt5Vo 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  3 out 1 2834  
910 14 Dtool_Ns0bf4Xq 0 4 776 2828 0 14 Dtool_Ns0bf4Xq 0 3 4 this 3 2903  3 out 1 2834  10 class_name 1 2831  
911 14 Dtool_Ns0bOVov 0 4 777 2828 0 14 Dtool_Ns0bOVov 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  7 hashgen 1 2836  
912 14 Dtool_Ns0bm__V 0 4 777 2828 0 14 Dtool_Ns0bm__V 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2903  7 hashgen 1 2836  9 threshold 1 2826  
913 14 Dtool_Ns0brNOZ 0 4 778 2828 0 14 Dtool_Ns0brNOZ 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  11 destination 1 2838  
914 14 Dtool_Ns0bhdF9 0 4 779 2828 0 14 Dtool_Ns0bhdF9 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  4 scan 1 2840  
915 14 Dtool_Ns0bZmJJ 0 4 780 2828 0 14 Dtool_Ns0bZmJJ 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2903  11 destination 1 2838  
916 14 Dtool_Ns0b4drJ 0 4 781 2828 0 14 Dtool_Ns0b4drJ 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2902  6 source 1 2840  
917 14 Dtool_Ns0bIXnT 0 7 782 2843 0 14 Dtool_Ns0bIXnT 0 0 
918 14 Dtool_Ns0bsICl 0 4 702 2828 0 14 Dtool_Ns0bsICl 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2905  1 i 1 2832  
919 14 Dtool_Ns0bUN1G 0 6 702 2826 0 14 Dtool_Ns0bUN1G 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2909  1 i 1 2832  
920 14 Dtool_Ns0bg9AW 0 4 703 2828 0 14 Dtool_Ns0bg9AW 0 3 4 this 3 2905  1 i 1 2832  1 v 1 2826  
921 14 Dtool_Ns0bOlSB 0 6 704 2832 0 14 Dtool_Ns0bOlSB 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
922 14 Dtool_Ns0bKWHJ 0 6 707 2826 0 14 Dtool_Ns0bKWHJ 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2911  1 i 1 2832  
923 14 Dtool_Ns0bS_uX 0 6 708 2832 0 14 Dtool_Ns0bS_uX 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
924 14 Dtool_Ns0b0VSC 0 7 796 2913 2466 14 Dtool_Ns0b0VSC 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
925 14 Dtool_Ns0bfs5c 0 7 796 2913 2466 14 Dtool_Ns0bfs5c 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 2903  
926 14 Dtool_Ns0b6_z9 0 7 796 2913 2466 14 Dtool_Ns0b6_z9 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 2903  5 trans 1 2861  
927 14 Dtool_Ns0bX354 0 7 796 2913 2466 14 Dtool_Ns0bX354 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2907  
928 14 Dtool_Ns0b2Ai0 0 7 796 2913 2466 14 Dtool_Ns0b2Ai0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2914  
929 14 Dtool_Ns0bkfiq 0 7 796 2913 2466 14 Dtool_Ns0bkfiq 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 2826  3 e01 1 2826  3 e02 1 2826  3 e03 1 2826  3 e10 1 2826  3 e11 1 2826  3 e12 1 2826  3 e13 1 2826  3 e20 1 2826  3 e21 1 2826  3 e22 1 2826  3 e23 1 2826  3 e30 1 2826  3 e31 1 2826  3 e32 1 2826  3 e33 1 2826  
930 14 Dtool_Ns0bkLb0 0 6 797 2913 0 14 Dtool_Ns0bkLb0 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  5 other 1 2907  
931 14 Dtool_Ns0b2l3p 0 6 797 2913 0 14 Dtool_Ns0b2l3p 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  5 other 1 2914  
932 14 Dtool_Ns0bJ5tl 0 6 797 2913 0 14 Dtool_Ns0bJ5tl 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  10 fill_value 1 2826  
933 14 Dtool_Ns0b2oeX 0 4 798 2828 0 14 Dtool_Ns0b2oeX 0 2 4 this 3 2913  4 size 1 2827  
934 14 Dtool_Ns0b4Yzl 0 6 801 2829 0 14 Dtool_Ns0b4Yzl 0 2 4 this 3 2907  4 self 1 2829  
935 14 Dtool_Ns0bhn3a 0 4 802 2828 0 14 Dtool_Ns0bhn3a 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  10 fill_value 1 2826  
936 14 Dtool_Ns0bb_Gk 0 4 803 2828 0 14 Dtool_Ns0bb_Gk 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 2913  3 e00 1 2826  3 e01 1 2826  3 e02 1 2826  3 e03 1 2826  3 e10 1 2826  3 e11 1 2826  3 e12 1 2826  3 e13 1 2826  3 e20 1 2826  3 e21 1 2826  3 e22 1 2826  3 e23 1 2826  3 e30 1 2826  3 e31 1 2826  3 e32 1 2826  3 e33 1 2826  
937 14 Dtool_Ns0bQITa 0 4 804 2828 0 14 Dtool_Ns0bQITa 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  6 upper3 1 2903  
938 14 Dtool_Ns0b1ZhQ 0 7 805 2902 2373 14 Dtool_Ns0b1ZhQ 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2907  
939 14 Dtool_Ns0b2ZkG 0 4 806 2828 0 14 Dtool_Ns0b2ZkG 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2913  3 row 1 2832  1 v 1 2861  
940 14 Dtool_Ns0blZUo 0 4 806 2828 0 14 Dtool_Ns0blZUo 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2913  3 row 1 2832  1 v 1 2879  
941 14 Dtool_Ns0bb83N 0 4 807 2828 0 14 Dtool_Ns0bb83N 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2913  3 col 1 2832  1 v 1 2861  
942 14 Dtool_Ns0b28nv 0 4 807 2828 0 14 Dtool_Ns0b28nv 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2913  3 col 1 2832  1 v 1 2879  
943 14 Dtool_Ns0bn__u 0 4 808 2828 0 14 Dtool_Ns0bn__u 294 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2907  10 result_vec 1 2878  3 row 1 2832  
944 14 Dtool_Ns0bxxRA 0 7 808 2878 2075 14 Dtool_Ns0bxxRA 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  3 row 1 2832  
945 14 Dtool_Ns0bCOlH 0 7 809 2878 2075 14 Dtool_Ns0bCOlH 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  3 col 1 2832  
946 14 Dtool_Ns0bdF7x 0 4 810 2828 0 14 Dtool_Ns0bdF7x 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2907  10 result_vec 1 2860  3 row 1 2832  
947 14 Dtool_Ns0bJMW2 0 7 810 2860 1816 14 Dtool_Ns0bJMW2 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  3 row 1 2832  
948 14 Dtool_Ns0bkop9 0 7 811 2860 1816 14 Dtool_Ns0bkop9 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  3 col 1 2832  
949 14 Dtool_Ns0bHhy4 0 4 812 2828 0 14 Dtool_Ns0bHhy4 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2913  3 row 1 2832  3 col 1 2832  
950 14 Dtool_Ns0b_lka 0 6 812 2826 0 14 Dtool_Ns0b_lka 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2907  3 row 1 2832  3 col 1 2832  
951 14 Dtool_Ns0bkXWe 0 7 813 2916 2379 14 Dtool_Ns0bkXWe 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  1 i 1 2832  
952 14 Dtool_Ns0bc0Pv 0 7 813 2917 2382 14 Dtool_Ns0bc0Pv 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  1 i 1 2832  
953 14 Dtool_Ns0bkzgs 0 6 814 2832 0 14 Dtool_Ns0bkzgs 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
954 14 Dtool_Ns0bRXs6 0 6 815 2833 0 14 Dtool_Ns0bRXs6 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2907  
955 14 Dtool_Ns0bGYcZ 0 6 816 2826 0 14 Dtool_Ns0bGYcZ 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2907  3 row 1 2832  3 col 1 2832  
956 14 Dtool_Ns0blUBv 0 4 817 2828 0 14 Dtool_Ns0blUBv 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2913  3 row 1 2832  3 col 1 2832  5 value 1 2826  
957 14 Dtool_Ns0bWP14 0 4 818 2828 0 14 Dtool_Ns0bWP14 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2907  
958 14 Dtool_Ns0bbsX4 0 6 819 2832 0 14 Dtool_Ns0bbsX4 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2907  
959 14 Dtool_Ns0bKK3S 0 4 820 2828 0 14 Dtool_Ns0bKK3S 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2913  
960 14 Dtool_Ns0bBQDa 0 4 820 2828 0 14 Dtool_Ns0bBQDa 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2907  
961 14 Dtool_Ns0bm_kL 0 4 821 2828 0 14 Dtool_Ns0bm_kL 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2913  
962 14 Dtool_Ns0bgxNr 0 4 821 2828 0 14 Dtool_Ns0bgxNr 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2907  
963 14 Dtool_Ns0b8l5V 0 6 822 2833 0 14 Dtool_Ns0b8l5V 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  5 other 1 2907  
964 14 Dtool_Ns0bI59n 0 6 823 2833 0 14 Dtool_Ns0bI59n 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  5 other 1 2907  
965 14 Dtool_Ns0bIOaf 0 6 824 2833 0 14 Dtool_Ns0bIOaf 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  5 other 1 2907  
966 14 Dtool_Ns0bzB6N 0 6 825 2832 0 14 Dtool_Ns0bzB6N 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  5 other 1 2907  
967 14 Dtool_Ns0bmOfK 0 6 825 2832 0 14 Dtool_Ns0bmOfK 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2907  5 other 1 2907  9 threshold 1 2826  
968 14 Dtool_Ns0bVYMO 0 6 826 2827 0 14 Dtool_Ns0bVYMO 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2907  
969 14 Dtool_Ns0bFcZg 0 6 826 2827 0 14 Dtool_Ns0bFcZg 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  9 threshold 1 2826  
970 14 Dtool_Ns0bo8oK 0 6 827 2827 0 14 Dtool_Ns0bo8oK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  4 hash 1 2827  
971 14 Dtool_Ns0bJGyd 0 6 827 2827 0 14 Dtool_Ns0bJGyd 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2907  4 hash 1 2827  9 threshold 1 2826  
972 14 Dtool_Ns0bmWbi 0 7 828 2878 2075 14 Dtool_Ns0bmWbi 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  1 v 1 2879  
973 14 Dtool_Ns0bF0Ie 0 7 829 2860 1816 14 Dtool_Ns0bF0Ie 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  1 v 1 2861  
974 14 Dtool_Ns0bSxet 0 7 830 2860 1816 14 Dtool_Ns0bSxet 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  1 v 1 2861  
975 14 Dtool_Ns0ba7Sw 0 7 831 2860 1816 14 Dtool_Ns0ba7Sw 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  1 v 1 2861  
976 14 Dtool_Ns0bIUtK 0 7 832 2860 1816 14 Dtool_Ns0bIUtK 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  1 v 1 2861  
977 14 Dtool_Ns0buEmN 0 4 833 2828 0 14 Dtool_Ns0buEmN 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  1 v 1 2878  
978 14 Dtool_Ns0bXa9N 0 4 834 2828 0 14 Dtool_Ns0bXa9N 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  1 v 1 2860  
979 14 Dtool_Ns0b9QYo 0 4 835 2828 0 14 Dtool_Ns0b9QYo 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  1 v 1 2860  
980 14 Dtool_Ns0bUU8O 0 4 836 2828 0 14 Dtool_Ns0bUU8O 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  1 v 1 2860  
981 14 Dtool_Ns0bf4zB 0 4 837 2828 0 14 Dtool_Ns0bf4zB 355 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  1 v 1 2860  
982 14 Dtool_Ns0bcv3G 0 4 838 2828 0 14 Dtool_Ns0bcv3G 25 // this = other1 * other2 3 4 this 3 2913  6 other1 1 2907  6 other2 1 2907  
983 14 Dtool_Ns0bcFZQ 0 7 839 2913 2466 14 Dtool_Ns0bcFZQ 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  5 other 1 2907  
984 14 Dtool_Ns0bclu8 0 7 839 2913 2466 14 Dtool_Ns0bclu8 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  6 scalar 1 2826  
985 14 Dtool_Ns0bMKP_ 0 7 840 2913 2466 14 Dtool_Ns0bMKP_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  6 scalar 1 2826  
986 14 Dtool_Ns0bEv0o 0 6 841 2913 0 14 Dtool_Ns0bEv0o 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  5 other 1 2907  
987 14 Dtool_Ns0bkjbp 0 6 842 2913 0 14 Dtool_Ns0bkjbp 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  5 other 1 2907  
988 14 Dtool_Ns0b0Ogo 0 6 843 2913 0 14 Dtool_Ns0b0Ogo 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  5 other 1 2907  
989 14 Dtool_Ns0bNn8Q 0 6 843 2913 0 14 Dtool_Ns0bNn8Q 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  6 scalar 1 2826  
990 14 Dtool_Ns0bdceS 0 6 844 2913 0 14 Dtool_Ns0bdceS 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  6 scalar 1 2826  
991 14 Dtool_Ns0brI6L 0 4 845 2828 0 14 Dtool_Ns0brI6L 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  5 other 1 2907  
992 14 Dtool_Ns0b9umP 0 4 846 2828 0 14 Dtool_Ns0b9umP 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2913  
993 14 Dtool_Ns0bVtqe 0 6 847 2833 0 14 Dtool_Ns0bVtqe 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  5 other 1 2907  
994 14 Dtool_Ns0bKvHn 0 6 848 2833 0 14 Dtool_Ns0bKvHn 931 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 2913  5 other 1 2907  
995 14 Dtool_Ns0bhOP_ 0 6 849 2833 0 14 Dtool_Ns0bhOP_ 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2913  
996 14 Dtool_Ns0bWTTf 0 4 850 2828 0 14 Dtool_Ns0bWTTf 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2913  5 other 1 2907  6 weight 1 2826  
997 14 Dtool_Ns0brczP 0 6 851 2907 0 14 Dtool_Ns0brczP 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
998 14 Dtool_Ns0bmxV_ 0 6 852 2907 0 14 Dtool_Ns0bmxV_ 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
999 14 Dtool_Ns0bLEvk 0 6 853 2907 0 14 Dtool_Ns0bLEvk 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
1000 14 Dtool_Ns0bTiW8 0 4 854 2828 0 14 Dtool_Ns0bTiW8 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  5 trans 1 2861  
1001 14 Dtool_Ns0bPSpy 0 4 855 2828 0 14 Dtool_Ns0bPSpy 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2913  5 angle 1 2826  4 axis 1 2861  2 cs 1 2790  
1002 14 Dtool_Ns0bdCF8 0 4 855 2828 0 14 Dtool_Ns0bdCF8 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2913  5 angle 1 2826  4 axis 1 2861  
1003 14 Dtool_Ns0bBbgB 0 4 856 2828 0 14 Dtool_Ns0bBbgB 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2913  5 angle 1 2826  4 axis 1 2861  2 cs 1 2790  
1004 14 Dtool_Ns0biru6 0 4 856 2828 0 14 Dtool_Ns0biru6 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2913  5 angle 1 2826  4 axis 1 2861  
1005 14 Dtool_Ns0bBWav 0 4 857 2828 0 14 Dtool_Ns0bBWav 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  5 scale 1 2861  
1006 14 Dtool_Ns0b_IMl 0 4 858 2828 0 14 Dtool_Ns0b_IMl 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2913  5 shear 1 2861  2 cs 1 2790  
1007 14 Dtool_Ns0b6J2L 0 4 858 2828 0 14 Dtool_Ns0b6J2L 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  5 shear 1 2861  
1008 14 Dtool_Ns0baDQm 0 4 859 2828 0 14 Dtool_Ns0baDQm 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2913  5 scale 1 2861  5 shear 1 2861  2 cs 1 2790  
1009 14 Dtool_Ns0bCH7L 0 4 859 2828 0 14 Dtool_Ns0bCH7L 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2913  5 scale 1 2861  5 shear 1 2861  
1010 14 Dtool_Ns0bjyza 0 7 860 2913 2466 14 Dtool_Ns0bjyza 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2861  
1011 14 Dtool_Ns0bQ9hS 0 7 860 2913 2466 14 Dtool_Ns0bQ9hS 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 2826  2 ty 1 2826  2 tz 1 2826  
1012 14 Dtool_Ns0b8AQA 0 7 861 2913 2466 14 Dtool_Ns0b8AQA 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2826  4 axis 1 2861  2 cs 1 2790  
1013 14 Dtool_Ns0bzUuW 0 7 861 2913 2466 14 Dtool_Ns0bzUuW 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2826  4 axis 1 2861  
1014 14 Dtool_Ns0bSFBu 0 7 862 2913 2466 14 Dtool_Ns0bSFBu 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2826  4 axis 1 2861  2 cs 1 2790  
1015 14 Dtool_Ns0bl_5A 0 7 862 2913 2466 14 Dtool_Ns0bl_5A 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2826  4 axis 1 2861  
1016 14 Dtool_Ns0bOJ8L 0 7 863 2913 2466 14 Dtool_Ns0bOJ8L 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2861  
1017 14 Dtool_Ns0bgj9H 0 7 863 2913 2466 14 Dtool_Ns0bgj9H 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2826  
1018 14 Dtool_Ns0bwaqH 0 7 863 2913 2466 14 Dtool_Ns0bwaqH 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2826  2 sy 1 2826  2 sz 1 2826  
1019 14 Dtool_Ns0b46Pp 0 7 864 2913 2466 14 Dtool_Ns0b46Pp 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2861  2 cs 1 2790  
1020 14 Dtool_Ns0bJ0aS 0 7 864 2913 2466 14 Dtool_Ns0bJ0aS 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2861  
1021 14 Dtool_Ns0blQ9A 0 7 864 2913 2466 14 Dtool_Ns0blQ9A 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2826  4 shxz 1 2826  4 shyz 1 2826  2 cs 1 2790  
1022 14 Dtool_Ns0bxxJO 0 7 864 2913 2466 14 Dtool_Ns0bxxJO 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2826  4 shxz 1 2826  4 shyz 1 2826  
1023 14 Dtool_Ns0bal56 0 7 865 2913 2466 14 Dtool_Ns0bal56 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2861  5 shear 1 2861  2 cs 1 2790  
1024 14 Dtool_Ns0bgpnU 0 7 865 2913 2466 14 Dtool_Ns0bgpnU 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2861  5 shear 1 2861  
1025 14 Dtool_Ns0b9lik 0 7 865 2913 2466 14 Dtool_Ns0b9lik 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2826  2 sy 1 2826  2 sz 1 2826  4 shxy 1 2826  4 shxz 1 2826  4 shyz 1 2826  2 cs 1 2790  
1026 14 Dtool_Ns0bi__t 0 7 865 2913 2466 14 Dtool_Ns0bi__t 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2826  2 sy 1 2826  2 sz 1 2826  4 shxy 1 2826  4 shxz 1 2826  4 shyz 1 2826  
1027 14 Dtool_Ns0blIST 0 6 866 2907 0 14 Dtool_Ns0blIST 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1028 14 Dtool_Ns0blG2Q 0 6 867 2907 0 14 Dtool_Ns0blG2Q 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1029 14 Dtool_Ns0bgP4Q 0 6 868 2907 0 14 Dtool_Ns0bgP4Q 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2790  2 to 1 2790  
1030 14 Dtool_Ns0b4Lgj 0 6 869 2833 0 14 Dtool_Ns0b4Lgj 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  5 other 1 2907  
1031 14 Dtool_Ns0b9SSI 0 6 869 2833 0 14 Dtool_Ns0b9SSI 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2907  5 other 1 2907  9 threshold 1 2826  
1032 14 Dtool_Ns0b0k4O 0 4 870 2828 0 14 Dtool_Ns0b0k4O 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  3 out 1 2834  
1033 14 Dtool_Ns0bwC_F 0 4 871 2828 0 14 Dtool_Ns0bwC_F 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2907  3 out 1 2834  12 indent_level 1 2832  
1034 14 Dtool_Ns0bsZZP 0 4 871 2828 0 14 Dtool_Ns0bsZZP 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  3 out 1 2834  
1035 14 Dtool_Ns0beYaR 0 4 872 2828 0 14 Dtool_Ns0beYaR 0 3 4 this 3 2907  3 out 1 2834  10 class_name 1 2831  
1036 14 Dtool_Ns0bJ1rW 0 4 873 2828 0 14 Dtool_Ns0bJ1rW 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  7 hashgen 1 2836  
1037 14 Dtool_Ns0bmfB9 0 4 873 2828 0 14 Dtool_Ns0bmfB9 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2907  7 hashgen 1 2836  5 scale 1 2826  
1038 14 Dtool_Ns0bstRA 0 4 874 2828 0 14 Dtool_Ns0bstRA 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  11 destination 1 2838  
1039 14 Dtool_Ns0bg9Jk 0 4 875 2828 0 14 Dtool_Ns0bg9Jk 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  4 scan 1 2840  
1040 14 Dtool_Ns0bZGNw 0 4 876 2828 0 14 Dtool_Ns0bZGNw 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2907  11 destination 1 2838  
1041 14 Dtool_Ns0b49vw 0 4 877 2828 0 14 Dtool_Ns0b49vw 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  6 source 1 2840  
1042 14 Dtool_Ns0bI3r6 0 7 878 2843 0 14 Dtool_Ns0bI3r6 0 0 
1043 14 Dtool_Ns0broGM 0 4 788 2828 0 14 Dtool_Ns0broGM 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2916  1 i 1 2832  
1044 14 Dtool_Ns0bUt2t 0 6 788 2826 0 14 Dtool_Ns0bUt2t 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2918  1 i 1 2832  
1045 14 Dtool_Ns0bgdD9 0 4 789 2828 0 14 Dtool_Ns0bgdD9 0 3 4 this 3 2916  1 i 1 2832  1 v 1 2826  
1046 14 Dtool_Ns0bOFWo 0 6 790 2832 0 14 Dtool_Ns0bOFWo 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1047 14 Dtool_Ns0bK2Kw 0 6 793 2826 0 14 Dtool_Ns0bK2Kw 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2920  1 i 1 2832  
1048 14 Dtool_Ns0bSfy_ 0 6 794 2832 0 14 Dtool_Ns0bSfy_ 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1049 14 Dtool_Ns0bcyhV 0 7 881 2922 2474 14 Dtool_Ns0bcyhV 234 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1050 14 Dtool_Ns0b7kWw 0 7 881 2922 2474 14 Dtool_Ns0b7kWw 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2907  
1051 14 Dtool_Ns0bFuRt 0 7 881 2922 2474 14 Dtool_Ns0bFuRt 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2914  
1052 14 Dtool_Ns0bS52S 0 7 881 2922 2474 14 Dtool_Ns0bS52S 226 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 2826  3 e01 1 2826  3 e02 1 2826  3 e03 1 2826  3 e10 1 2826  3 e11 1 2826  3 e12 1 2826  3 e13 1 2826  3 e20 1 2826  3 e21 1 2826  3 e22 1 2826  3 e23 1 2826  3 e30 1 2826  3 e31 1 2826  3 e32 1 2826  3 e33 1 2826  
1053 14 Dtool_Ns0bs_r9 0 6 882 2922 0 14 Dtool_Ns0bs_r9 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2922  4 copy 1 2907  
1054 14 Dtool_Ns0bdaVs 0 6 882 2922 0 14 Dtool_Ns0bdaVs 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2922  4 copy 1 2914  
1055 14 Dtool_Ns0bkKYz 0 4 883 2828 0 14 Dtool_Ns0bkKYz 221 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 2922  3 e00 1 2826  3 e01 1 2826  3 e02 1 2826  3 e03 1 2826  3 e10 1 2826  3 e11 1 2826  3 e12 1 2826  3 e13 1 2826  3 e20 1 2826  3 e21 1 2826  3 e22 1 2826  3 e23 1 2826  3 e30 1 2826  3 e31 1 2826  3 e32 1 2826  3 e33 1 2826  
1056 14 Dtool_Ns0biXNG 0 4 884 2828 0 14 Dtool_Ns0biXNG 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2922  3 row 1 2832  3 col 1 2832  
1057 14 Dtool_Ns0b6Ka6 0 6 884 2826 0 14 Dtool_Ns0b6Ka6 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2914  3 row 1 2832  3 col 1 2832  
1058 14 Dtool_Ns0bk_OW 0 4 885 2828 0 14 Dtool_Ns0bk_OW 410 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2914  
1059 14 Dtool_Ns0biJJW 0 6 886 2832 0 14 Dtool_Ns0biJJW 291 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2914  
1060 14 Dtool_Ns0bX_d_ 0 7 887 2843 0 14 Dtool_Ns0bX_d_ 0 0 
1061 14 Dtool_Ns0bHKtQ 0 7 899 2923 2555 14 Dtool_Ns0bHKtQ 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1062 14 Dtool_Ns0bgwPr 0 7 899 2923 2555 14 Dtool_Ns0bgwPr 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2924  
1063 14 Dtool_Ns0b1oPv 0 7 899 2923 2555 14 Dtool_Ns0b1oPv 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 2847  3 e01 1 2847  3 e02 1 2847  3 e10 1 2847  3 e11 1 2847  3 e12 1 2847  3 e20 1 2847  3 e21 1 2847  3 e22 1 2847  
1064 14 Dtool_Ns0b9QZH 0 6 900 2923 0 14 Dtool_Ns0b9QZH 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  5 other 1 2924  
1065 14 Dtool_Ns0bByUJ 0 6 900 2923 0 14 Dtool_Ns0bByUJ 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  10 fill_value 1 2847  
1066 14 Dtool_Ns0beI6s 0 4 901 2828 0 14 Dtool_Ns0beI6s 0 2 4 this 3 2923  4 size 1 2827  
1067 14 Dtool_Ns0bQ4Q7 0 6 904 2829 0 14 Dtool_Ns0bQ4Q7 0 2 4 this 3 2924  4 self 1 2829  
1068 14 Dtool_Ns0btMiW 0 4 905 2828 0 14 Dtool_Ns0btMiW 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  10 fill_value 1 2847  
1069 14 Dtool_Ns0bYSjO 0 4 906 2828 0 14 Dtool_Ns0bYSjO 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 2923  3 e00 1 2847  3 e01 1 2847  3 e02 1 2847  3 e10 1 2847  3 e11 1 2847  3 e12 1 2847  3 e20 1 2847  3 e21 1 2847  3 e22 1 2847  
1070 14 Dtool_Ns0bMjRK 0 4 907 2828 0 14 Dtool_Ns0bMjRK 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2923  3 row 1 2832  1 v 1 2845  
1071 14 Dtool_Ns0b7jBs 0 4 907 2828 0 14 Dtool_Ns0b7jBs 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2923  3 row 1 2832  1 v 1 2864  
1072 14 Dtool_Ns0bhFlR 0 4 908 2828 0 14 Dtool_Ns0bhFlR 332 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2923  3 col 1 2832  1 v 1 2845  
1073 14 Dtool_Ns0bcGVz 0 4 908 2828 0 14 Dtool_Ns0bcGVz 311 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2923  3 col 1 2832  1 v 1 2864  
1074 14 Dtool_Ns0bFRjb 0 4 909 2828 0 14 Dtool_Ns0bFRjb 301 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2924  10 result_vec 1 2863  3 row 1 2832  
1075 14 Dtool_Ns0bpQuV 0 7 909 2863 1886 14 Dtool_Ns0bpQuV 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  3 row 1 2832  
1076 14 Dtool_Ns0bqvBd 0 7 910 2863 1886 14 Dtool_Ns0bqvBd 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  3 col 1 2832  
1077 14 Dtool_Ns0bCqyE 0 7 911 2844 1687 14 Dtool_Ns0bCqyE 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  3 row 1 2832  
1078 14 Dtool_Ns0bxKGM 0 7 912 2844 1687 14 Dtool_Ns0bxKGM 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  3 col 1 2832  
1079 14 Dtool_Ns0bYAPO 0 4 913 2828 0 14 Dtool_Ns0bYAPO 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2923  3 row 1 2832  3 col 1 2832  
1080 14 Dtool_Ns0bnEAw 0 6 913 2847 0 14 Dtool_Ns0bnEAw 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2924  3 row 1 2832  3 col 1 2832  
1081 14 Dtool_Ns0b80zz 0 7 914 2926 2478 14 Dtool_Ns0b80zz 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  1 i 1 2832  
1082 14 Dtool_Ns0b1LsE 0 7 914 2927 2481 14 Dtool_Ns0b1LsE 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  1 i 1 2832  
1083 14 Dtool_Ns0bDT9B 0 6 915 2832 0 14 Dtool_Ns0bDT9B 266 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1084 14 Dtool_Ns0bu3JQ 0 6 916 2833 0 14 Dtool_Ns0bu3JQ 310 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2924  
1085 14 Dtool_Ns0bu75u 0 6 917 2847 0 14 Dtool_Ns0bu75u 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2924  3 row 1 2832  3 col 1 2832  
1086 14 Dtool_Ns0bYWBO 0 4 918 2828 0 14 Dtool_Ns0bYWBO 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2923  3 row 1 2832  3 col 1 2832  5 value 1 2847  
1087 14 Dtool_Ns0btvRO 0 4 919 2828 0 14 Dtool_Ns0btvRO 401 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2924  
1088 14 Dtool_Ns0bwP0N 0 6 920 2832 0 14 Dtool_Ns0bwP0N 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2924  
1089 14 Dtool_Ns0bGv3o 0 6 921 2833 0 14 Dtool_Ns0bGv3o 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  5 other 1 2924  
1090 14 Dtool_Ns0bRREu 0 6 922 2833 0 14 Dtool_Ns0bRREu 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  5 other 1 2924  
1091 14 Dtool_Ns0bRgil 0 6 923 2833 0 14 Dtool_Ns0bRgil 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  5 other 1 2924  
1092 14 Dtool_Ns0bt_3g 0 6 924 2832 0 14 Dtool_Ns0bt_3g 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  5 other 1 2924  
1093 14 Dtool_Ns0bSbnp 0 6 924 2832 0 14 Dtool_Ns0bSbnp 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2924  5 other 1 2924  9 threshold 1 2847  
1094 14 Dtool_Ns0bt7oj 0 6 925 2827 0 14 Dtool_Ns0bt7oj 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2924  
1095 14 Dtool_Ns0bACnK 0 6 925 2827 0 14 Dtool_Ns0bACnK 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  9 threshold 1 2847  
1096 14 Dtool_Ns0bQfHg 0 6 926 2827 0 14 Dtool_Ns0bQfHg 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  4 hash 1 2827  
1097 14 Dtool_Ns0be2a4 0 6 926 2827 0 14 Dtool_Ns0be2a4 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2924  4 hash 1 2827  9 threshold 1 2847  
1098 14 Dtool_Ns0buQNQ 0 7 927 2863 1886 14 Dtool_Ns0buQNQ 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  1 v 1 2864  
1099 14 Dtool_Ns0bS1BJ 0 7 928 2844 1687 14 Dtool_Ns0bS1BJ 403 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  1 v 1 2845  
1100 14 Dtool_Ns0bRGPD 0 7 929 2844 1687 14 Dtool_Ns0bRGPD 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  1 v 1 2845  
1101 14 Dtool_Ns0bDiSD 0 7 929 2863 1886 14 Dtool_Ns0bDiSD 447 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  1 v 1 2864  
1102 14 Dtool_Ns0bsKJA 0 7 930 2863 1886 14 Dtool_Ns0bsKJA 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  1 v 1 2864  
1103 14 Dtool_Ns0bqJFe 0 4 931 2828 0 14 Dtool_Ns0bqJFe 265 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  1 v 1 2863  
1104 14 Dtool_Ns0bqhFm 0 4 932 2828 0 14 Dtool_Ns0bqhFm 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  1 v 1 2844  
1105 14 Dtool_Ns0bu6G0 0 4 933 2828 0 14 Dtool_Ns0bu6G0 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  1 v 1 2844  
1106 14 Dtool_Ns0bMVHk 0 4 933 2828 0 14 Dtool_Ns0bMVHk 416 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  1 v 1 2863  
1107 14 Dtool_Ns0bhQR7 0 4 934 2828 0 14 Dtool_Ns0bhQR7 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  1 v 1 2863  
1108 14 Dtool_Ns0bZ5GD 0 4 935 2828 0 14 Dtool_Ns0bZ5GD 25 // this = other1 * other2 3 4 this 3 2923  6 other1 1 2924  6 other2 1 2924  
1109 14 Dtool_Ns0bmPXj 0 7 936 2923 2555 14 Dtool_Ns0bmPXj 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  5 other 1 2924  
1110 14 Dtool_Ns0b_fQe 0 7 936 2923 2555 14 Dtool_Ns0b_fQe 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  6 scalar 1 2847  
1111 14 Dtool_Ns0bOoxf 0 7 937 2923 2555 14 Dtool_Ns0bOoxf 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  6 scalar 1 2847  
1112 14 Dtool_Ns0b_07u 0 6 938 2923 0 14 Dtool_Ns0b_07u 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  5 other 1 2924  
1113 14 Dtool_Ns0bfIiv 0 6 939 2923 0 14 Dtool_Ns0bfIiv 281 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  5 other 1 2924  
1114 14 Dtool_Ns0bPXnu 0 6 940 2923 0 14 Dtool_Ns0bPXnu 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  5 other 1 2924  
1115 14 Dtool_Ns0bX0Qs 0 6 940 2923 0 14 Dtool_Ns0bX0Qs 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  6 scalar 1 2847  
1116 14 Dtool_Ns0bndyt 0 6 941 2923 0 14 Dtool_Ns0bndyt 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  6 scalar 1 2847  
1117 14 Dtool_Ns0bsyFI 0 6 942 2847 0 14 Dtool_Ns0bsyFI 259 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2924  
1118 14 Dtool_Ns0baONp 0 4 943 2828 0 14 Dtool_Ns0baONp 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  5 other 1 2924  
1119 14 Dtool_Ns0blPDl 0 4 944 2828 0 14 Dtool_Ns0blPDl 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2923  
1120 14 Dtool_Ns0bMJyk 0 6 945 2833 0 14 Dtool_Ns0bMJyk 808 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  5 other 1 2924  
1121 14 Dtool_Ns0bIurU 0 6 946 2833 0 14 Dtool_Ns0bIurU 364 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2923  
1122 14 Dtool_Ns0bmeGt 0 6 947 2833 0 14 Dtool_Ns0bmeGt 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  5 other 1 2924  
1123 14 Dtool_Ns0bmC_x 0 6 947 2833 0 14 Dtool_Ns0bmC_x 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  5 other 1 2928  
1124 14 Dtool_Ns0bD_Pl 0 6 948 2924 0 14 Dtool_Ns0bD_Pl 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1125 14 Dtool_Ns0b9pSu 0 4 949 2828 0 14 Dtool_Ns0b9pSu 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  5 trans 1 2845  
1126 14 Dtool_Ns0b9uiL 0 4 950 2828 0 14 Dtool_Ns0b9uiL 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  5 angle 1 2847  
1127 14 Dtool_Ns0b58U8 0 4 950 2828 0 14 Dtool_Ns0b58U8 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2923  5 angle 1 2847  4 axis 1 2864  2 cs 1 2790  
1128 14 Dtool_Ns0bHjMp 0 4 950 2828 0 14 Dtool_Ns0bHjMp 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2923  5 angle 1 2847  4 axis 1 2864  
1129 14 Dtool_Ns0bhzuM 0 4 951 2828 0 14 Dtool_Ns0bhzuM 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  5 scale 1 2845  
1130 14 Dtool_Ns0bwFvE 0 4 951 2828 0 14 Dtool_Ns0bwFvE 322 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  5 scale 1 2864  
1131 14 Dtool_Ns0bcpG4 0 7 952 2923 2555 14 Dtool_Ns0bcpG4 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2845  
1132 14 Dtool_Ns0bZis7 0 7 952 2923 2555 14 Dtool_Ns0bZis7 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 2847  2 ty 1 2847  
1133 14 Dtool_Ns0bB6hL 0 7 953 2923 2555 14 Dtool_Ns0bB6hL 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 2847  
1134 14 Dtool_Ns0baFgZ 0 7 953 2923 2555 14 Dtool_Ns0baFgZ 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2847  4 axis 1 2864  2 cs 1 2790  
1135 14 Dtool_Ns0bz6sm 0 7 953 2923 2555 14 Dtool_Ns0bz6sm 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2847  4 axis 1 2864  
1136 14 Dtool_Ns0bkw5e 0 7 954 2923 2555 14 Dtool_Ns0bkw5e 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2845  
1137 14 Dtool_Ns0b2c8e 0 7 954 2923 2555 14 Dtool_Ns0b2c8e 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2864  
1138 14 Dtool_Ns0bKYtY 0 7 954 2923 2555 14 Dtool_Ns0bKYtY 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 2847  2 sy 1 2847  
1139 14 Dtool_Ns0bXTVN 0 7 954 2923 2555 14 Dtool_Ns0bXTVN 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2847  2 sy 1 2847  2 sz 1 2847  
1140 14 Dtool_Ns0boZc9 0 4 955 2828 0 14 Dtool_Ns0boZc9 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2923  5 angle 1 2847  4 axis 1 2864  2 cs 1 2790  
1141 14 Dtool_Ns0br2Hj 0 4 955 2828 0 14 Dtool_Ns0br2Hj 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2923  5 angle 1 2847  4 axis 1 2864  
1142 14 Dtool_Ns0byh6r 0 7 956 2923 2555 14 Dtool_Ns0byh6r 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2847  4 axis 1 2864  2 cs 1 2790  
1143 14 Dtool_Ns0bYlqF 0 7 956 2923 2555 14 Dtool_Ns0bYlqF 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2847  4 axis 1 2864  
1144 14 Dtool_Ns0bf5e6 0 4 957 2828 0 14 Dtool_Ns0bf5e6 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2923  5 shear 1 2864  2 cs 1 2790  
1145 14 Dtool_Ns0ba_Ih 0 4 957 2828 0 14 Dtool_Ns0ba_Ih 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  5 shear 1 2864  
1146 14 Dtool_Ns0bQoP8 0 7 958 2923 2555 14 Dtool_Ns0bQoP8 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2864  2 cs 1 2790  
1147 14 Dtool_Ns0bxJal 0 7 958 2923 2555 14 Dtool_Ns0bxJal 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2864  
1148 14 Dtool_Ns0b1tYK 0 7 958 2923 2555 14 Dtool_Ns0b1tYK 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2847  4 shxz 1 2847  4 shyz 1 2847  2 cs 1 2790  
1149 14 Dtool_Ns0bn6zT 0 7 958 2923 2555 14 Dtool_Ns0bn6zT 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2847  4 shxz 1 2847  4 shyz 1 2847  
1150 14 Dtool_Ns0bon65 0 4 959 2828 0 14 Dtool_Ns0bon65 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2923  5 scale 1 2864  5 shear 1 2864  2 cs 1 2790  
1151 14 Dtool_Ns0b9Qnf 0 4 959 2828 0 14 Dtool_Ns0b9Qnf 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2923  5 scale 1 2864  5 shear 1 2864  
1152 14 Dtool_Ns0bipF0 0 7 960 2923 2555 14 Dtool_Ns0bipF0 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2864  5 shear 1 2864  2 cs 1 2790  
1153 14 Dtool_Ns0bEtzN 0 7 960 2923 2555 14 Dtool_Ns0bEtzN 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2864  5 shear 1 2864  
1154 14 Dtool_Ns0berao 0 7 960 2923 2555 14 Dtool_Ns0berao 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2847  2 sy 1 2847  2 sz 1 2847  4 shxy 1 2847  4 shxz 1 2847  4 shyz 1 2847  2 cs 1 2790  
1155 14 Dtool_Ns0bkqKC 0 7 960 2923 2555 14 Dtool_Ns0bkqKC 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2847  2 sy 1 2847  2 sz 1 2847  4 shxy 1 2847  4 shxz 1 2847  4 shyz 1 2847  
1156 14 Dtool_Ns0b4uUm 0 6 961 2924 0 14 Dtool_Ns0b4uUm 350 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2790  2 to 1 2790  
1157 14 Dtool_Ns0brIZO 0 6 962 2833 0 14 Dtool_Ns0brIZO 342 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  5 other 1 2924  
1158 14 Dtool_Ns0bpOQZ 0 6 962 2833 0 14 Dtool_Ns0bpOQZ 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2924  5 other 1 2924  9 threshold 1 2847  
1159 14 Dtool_Ns0bcEVk 0 4 963 2828 0 14 Dtool_Ns0bcEVk 215 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  3 out 1 2834  
1160 14 Dtool_Ns0bIhab 0 4 964 2828 0 14 Dtool_Ns0bIhab 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2924  3 out 1 2834  12 indent_level 1 2832  
1161 14 Dtool_Ns0bU41k 0 4 964 2828 0 14 Dtool_Ns0bU41k 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  3 out 1 2834  
1162 14 Dtool_Ns0b253m 0 4 965 2828 0 14 Dtool_Ns0b253m 0 3 4 this 3 2924  3 out 1 2834  10 class_name 1 2831  
1163 14 Dtool_Ns0bRKIs 0 4 966 2828 0 14 Dtool_Ns0bRKIs 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  7 hashgen 1 2836  
1164 14 Dtool_Ns0bjVPD 0 4 966 2828 0 14 Dtool_Ns0bjVPD 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2924  7 hashgen 1 2836  9 threshold 1 2847  
1165 14 Dtool_Ns0b0SuV 0 4 967 2828 0 14 Dtool_Ns0b0SuV 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  11 destination 1 2838  
1166 14 Dtool_Ns0bYdl5 0 4 968 2828 0 14 Dtool_Ns0bYdl5 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  4 scan 1 2840  
1167 14 Dtool_Ns0bAnpF 0 4 969 2828 0 14 Dtool_Ns0bAnpF 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2924  11 destination 1 2838  
1168 14 Dtool_Ns0bTdLG 0 4 970 2828 0 14 Dtool_Ns0bTdLG 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2923  6 source 1 2840  
1169 14 Dtool_Ns0bnXHQ 0 7 971 2843 0 14 Dtool_Ns0bnXHQ 0 0 
1170 14 Dtool_Ns0bDIih 0 4 891 2828 0 14 Dtool_Ns0bDIih 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2926  1 i 1 2832  
1171 14 Dtool_Ns0b7NVD 0 6 891 2847 0 14 Dtool_Ns0b7NVD 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2930  1 i 1 2832  
1172 14 Dtool_Ns0brNBq 0 4 892 2828 0 14 Dtool_Ns0brNBq 0 3 4 this 3 2926  1 i 1 2832  1 v 1 2847  
1173 14 Dtool_Ns0bmly9 0 6 893 2832 0 14 Dtool_Ns0bmly9 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1174 14 Dtool_Ns0bjWnF 0 6 896 2847 0 14 Dtool_Ns0bjWnF 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2932  1 i 1 2832  
1175 14 Dtool_Ns0b98OU 0 6 897 2832 0 14 Dtool_Ns0b98OU 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1176 14 Dtool_Ns0bVrx_ 0 7 983 2934 2646 14 Dtool_Ns0bVrx_ 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1177 14 Dtool_Ns0bRSTZ 0 7 983 2934 2646 14 Dtool_Ns0bRSTZ 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 2924  
1178 14 Dtool_Ns0by2xB 0 7 983 2934 2646 14 Dtool_Ns0by2xB 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 2924  5 trans 1 2864  
1179 14 Dtool_Ns0bpOT1 0 7 983 2934 2646 14 Dtool_Ns0bpOT1 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2928  
1180 14 Dtool_Ns0baNAR 0 7 983 2934 2646 14 Dtool_Ns0baNAR 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2935  
1181 14 Dtool_Ns0bLfZS 0 7 983 2934 2646 14 Dtool_Ns0bLfZS 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 2847  3 e01 1 2847  3 e02 1 2847  3 e03 1 2847  3 e10 1 2847  3 e11 1 2847  3 e12 1 2847  3 e13 1 2847  3 e20 1 2847  3 e21 1 2847  3 e22 1 2847  3 e23 1 2847  3 e30 1 2847  3 e31 1 2847  3 e32 1 2847  3 e33 1 2847  
1182 14 Dtool_Ns0bPVfu 0 6 984 2934 0 14 Dtool_Ns0bPVfu 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  5 other 1 2928  
1183 14 Dtool_Ns0bPKEm 0 6 984 2934 0 14 Dtool_Ns0bPKEm 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  5 other 1 2935  
1184 14 Dtool_Ns0bBSXw 0 6 984 2934 0 14 Dtool_Ns0bBSXw 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  10 fill_value 1 2847  
1185 14 Dtool_Ns0bfo_T 0 4 985 2828 0 14 Dtool_Ns0bfo_T 0 2 4 this 3 2934  4 size 1 2827  
1186 14 Dtool_Ns0bRYTi 0 6 988 2829 0 14 Dtool_Ns0bRYTi 0 2 4 this 3 2928  4 self 1 2829  
1187 14 Dtool_Ns0btsm9 0 4 989 2828 0 14 Dtool_Ns0btsm9 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  10 fill_value 1 2847  
1188 14 Dtool_Ns0bE5Uz 0 4 990 2828 0 14 Dtool_Ns0bE5Uz 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 2934  3 e00 1 2847  3 e01 1 2847  3 e02 1 2847  3 e03 1 2847  3 e10 1 2847  3 e11 1 2847  3 e12 1 2847  3 e13 1 2847  3 e20 1 2847  3 e21 1 2847  3 e22 1 2847  3 e23 1 2847  3 e30 1 2847  3 e31 1 2847  3 e32 1 2847  3 e33 1 2847  
1189 14 Dtool_Ns0b4JsI 0 4 991 2828 0 14 Dtool_Ns0b4JsI 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  6 upper3 1 2924  
1190 14 Dtool_Ns0bcZBN 0 7 992 2923 2555 14 Dtool_Ns0bcZBN 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
1191 14 Dtool_Ns0b4DFT 0 4 993 2828 0 14 Dtool_Ns0b4DFT 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2934  3 row 1 2832  1 v 1 2864  
1192 14 Dtool_Ns0bnD10 0 4 993 2828 0 14 Dtool_Ns0bnD10 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2934  3 row 1 2832  1 v 1 2885  
1193 14 Dtool_Ns0bdmWa 0 4 994 2828 0 14 Dtool_Ns0bdmWa 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2934  3 col 1 2832  1 v 1 2864  
1194 14 Dtool_Ns0bImG8 0 4 994 2828 0 14 Dtool_Ns0bImG8 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2934  3 col 1 2832  1 v 1 2885  
1195 14 Dtool_Ns0bPxez 0 4 995 2828 0 14 Dtool_Ns0bPxez 294 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2928  10 result_vec 1 2884  3 row 1 2832  
1196 14 Dtool_Ns0bpwx8 0 7 995 2884 2153 14 Dtool_Ns0bpwx8 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  3 row 1 2832  
1197 14 Dtool_Ns0brPFE 0 7 996 2884 2153 14 Dtool_Ns0brPFE 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  3 col 1 2832  
1198 14 Dtool_Ns0beTWu 0 4 997 2828 0 14 Dtool_Ns0beTWu 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2928  10 result_vec 1 2863  3 row 1 2832  
1199 14 Dtool_Ns0bQL2y 0 7 997 2863 1886 14 Dtool_Ns0bQL2y 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  3 row 1 2832  
1200 14 Dtool_Ns0b_pJ6 0 7 998 2863 1886 14 Dtool_Ns0b_pJ6 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  3 col 1 2832  
1201 14 Dtool_Ns0bYgS1 0 4 999 2828 0 14 Dtool_Ns0bYgS1 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2934  3 row 1 2832  3 col 1 2832  
1202 14 Dtool_Ns0bgkEX 0 6 999 2847 0 14 Dtool_Ns0bgkEX 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2928  3 row 1 2832  3 col 1 2832  
1203 14 Dtool_Ns0b9U2a 0 7 1000 2937 2559 14 Dtool_Ns0b9U2a 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  1 i 1 2832  
1204 14 Dtool_Ns0b1rvr 0 7 1000 2938 2562 14 Dtool_Ns0b1rvr 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  1 i 1 2832  
1205 14 Dtool_Ns0bDzAp 0 6 1001 2832 0 14 Dtool_Ns0bDzAp 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1206 14 Dtool_Ns0buXM3 0 6 1002 2833 0 14 Dtool_Ns0buXM3 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
1207 14 Dtool_Ns0btb8V 0 6 1003 2847 0 14 Dtool_Ns0btb8V 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2928  3 row 1 2832  3 col 1 2832  
1208 14 Dtool_Ns0bY2F1 0 4 1004 2828 0 14 Dtool_Ns0bY2F1 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2934  3 row 1 2832  3 col 1 2832  5 value 1 2847  
1209 14 Dtool_Ns0btPV1 0 4 1005 2828 0 14 Dtool_Ns0btPV1 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
1210 14 Dtool_Ns0bwv30 0 6 1006 2832 0 14 Dtool_Ns0bwv30 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
1211 14 Dtool_Ns0bjKXP 0 4 1007 2828 0 14 Dtool_Ns0bjKXP 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2934  
1212 14 Dtool_Ns0bmQjW 0 4 1007 2828 0 14 Dtool_Ns0bmQjW 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
1213 14 Dtool_Ns0bPBFI 0 4 1008 2828 0 14 Dtool_Ns0bPBFI 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2934  
1214 14 Dtool_Ns0b5wtn 0 4 1008 2828 0 14 Dtool_Ns0b5wtn 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
1215 14 Dtool_Ns0bXz9P 0 6 1009 2833 0 14 Dtool_Ns0bXz9P 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  5 other 1 2928  
1216 14 Dtool_Ns0bQ4WW 0 6 1010 2833 0 14 Dtool_Ns0bQ4WW 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  5 other 1 2928  
1217 14 Dtool_Ns0bQPzN 0 6 1011 2833 0 14 Dtool_Ns0bQPzN 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  5 other 1 2928  
1218 14 Dtool_Ns0baz9H 0 6 1012 2832 0 14 Dtool_Ns0baz9H 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  5 other 1 2928  
1219 14 Dtool_Ns0blGtQ 0 6 1012 2832 0 14 Dtool_Ns0blGtQ 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2928  5 other 1 2928  9 threshold 1 2847  
1220 14 Dtool_Ns0bsbsK 0 6 1013 2827 0 14 Dtool_Ns0bsbsK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
1221 14 Dtool_Ns0bAiqx 0 6 1013 2827 0 14 Dtool_Ns0bAiqx 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  9 threshold 1 2847  
1222 14 Dtool_Ns0bT_IH 0 6 1014 2827 0 14 Dtool_Ns0bT_IH 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  4 hash 1 2827  
1223 14 Dtool_Ns0bdWef 0 6 1014 2827 0 14 Dtool_Ns0bdWef 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2928  4 hash 1 2827  9 threshold 1 2847  
1224 14 Dtool_Ns0bO133 0 7 1015 2884 2153 14 Dtool_Ns0bO133 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  1 v 1 2885  
1225 14 Dtool_Ns0bT1IX 0 7 1016 2863 1886 14 Dtool_Ns0bT1IX 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  1 v 1 2864  
1226 14 Dtool_Ns0brmNg 0 7 1017 2863 1886 14 Dtool_Ns0brmNg 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  1 v 1 2864  
1227 14 Dtool_Ns0bDCVq 0 7 1018 2863 1886 14 Dtool_Ns0bDCVq 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  1 v 1 2864  
1228 14 Dtool_Ns0bsqNn 0 7 1019 2863 1886 14 Dtool_Ns0bsqNn 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  1 v 1 2864  
1229 14 Dtool_Ns0bHhNF 0 4 1020 2828 0 14 Dtool_Ns0bHhNF 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  1 v 1 2884  
1230 14 Dtool_Ns0brdBS 0 4 1021 2828 0 14 Dtool_Ns0brdBS 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  1 v 1 2863  
1231 14 Dtool_Ns0bkWqj 0 4 1022 2828 0 14 Dtool_Ns0bkWqj 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  1 v 1 2863  
1232 14 Dtool_Ns0bL1IL 0 4 1023 2828 0 14 Dtool_Ns0bL1IL 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  1 v 1 2863  
1233 14 Dtool_Ns0bgwSi 0 4 1024 2828 0 14 Dtool_Ns0bgwSi 355 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  1 v 1 2863  
1234 14 Dtool_Ns0bU8DL 0 4 1025 2828 0 14 Dtool_Ns0bU8DL 25 // this = other1 * other2 3 4 this 3 2934  6 other1 1 2928  6 other2 1 2928  
1235 14 Dtool_Ns0b3TdK 0 7 1026 2934 2646 14 Dtool_Ns0b3TdK 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  5 other 1 2928  
1236 14 Dtool_Ns0b9_TF 0 7 1026 2934 2646 14 Dtool_Ns0b9_TF 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  6 scalar 1 2847  
1237 14 Dtool_Ns0bNI1G 0 7 1027 2934 2646 14 Dtool_Ns0bNI1G 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  6 scalar 1 2847  
1238 14 Dtool_Ns0b8vNX 0 6 1028 2934 0 14 Dtool_Ns0b8vNX 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  5 other 1 2928  
1239 14 Dtool_Ns0bcj0X 0 6 1029 2934 0 14 Dtool_Ns0bcj0X 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  5 other 1 2928  
1240 14 Dtool_Ns0bMO5W 0 6 1030 2934 0 14 Dtool_Ns0bMO5W 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  5 other 1 2928  
1241 14 Dtool_Ns0bWUUT 0 6 1030 2934 0 14 Dtool_Ns0bWUUT 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  6 scalar 1 2847  
1242 14 Dtool_Ns0bm93U 0 6 1031 2934 0 14 Dtool_Ns0bm93U 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  6 scalar 1 2847  
1243 14 Dtool_Ns0boYQI 0 4 1032 2828 0 14 Dtool_Ns0boYQI 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  5 other 1 2928  
1244 14 Dtool_Ns0bivGM 0 4 1033 2828 0 14 Dtool_Ns0bivGM 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2934  
1245 14 Dtool_Ns0bNuDN 0 6 1034 2833 0 14 Dtool_Ns0bNuDN 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  5 other 1 2928  
1246 14 Dtool_Ns0bg2mD 0 6 1035 2833 0 14 Dtool_Ns0bg2mD 931 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 2934  5 other 1 2928  
1247 14 Dtool_Ns0bIOv7 0 6 1036 2833 0 14 Dtool_Ns0bIOv7 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2934  
1248 14 Dtool_Ns0brA3w 0 4 1037 2828 0 14 Dtool_Ns0brA3w 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2934  5 other 1 2928  6 weight 1 2847  
1249 14 Dtool_Ns0bAfTM 0 6 1038 2928 0 14 Dtool_Ns0bAfTM 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1250 14 Dtool_Ns0bNy16 0 6 1039 2928 0 14 Dtool_Ns0bNy16 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
1251 14 Dtool_Ns0bQFPh 0 6 1040 2928 0 14 Dtool_Ns0bQFPh 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
1252 14 Dtool_Ns0blK2Y 0 4 1041 2828 0 14 Dtool_Ns0blK2Y 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  5 trans 1 2864  
1253 14 Dtool_Ns0b4cXj 0 4 1042 2828 0 14 Dtool_Ns0b4cXj 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2934  5 angle 1 2847  4 axis 1 2864  2 cs 1 2790  
1254 14 Dtool_Ns0bEDQQ 0 4 1042 2828 0 14 Dtool_Ns0bEDQQ 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2934  5 angle 1 2847  4 axis 1 2864  
1255 14 Dtool_Ns0br5fk 0 4 1043 2828 0 14 Dtool_Ns0br5fk 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2934  5 angle 1 2847  4 axis 1 2864  2 cs 1 2790  
1256 14 Dtool_Ns0bqWLK 0 4 1043 2828 0 14 Dtool_Ns0bqWLK 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2934  5 angle 1 2847  4 axis 1 2864  
1257 14 Dtool_Ns0bwlwr 0 4 1044 2828 0 14 Dtool_Ns0bwlwr 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  5 scale 1 2864  
1258 14 Dtool_Ns0bcZih 0 4 1045 2828 0 14 Dtool_Ns0bcZih 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2934  5 shear 1 2864  2 cs 1 2790  
1259 14 Dtool_Ns0bbfMI 0 4 1045 2828 0 14 Dtool_Ns0bbfMI 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  5 shear 1 2864  
1260 14 Dtool_Ns0bpH_g 0 4 1046 2828 0 14 Dtool_Ns0bpH_g 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2934  5 scale 1 2864  5 shear 1 2864  2 cs 1 2790  
1261 14 Dtool_Ns0b6wrG 0 4 1046 2828 0 14 Dtool_Ns0b6wrG 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2934  5 scale 1 2864  5 shear 1 2864  
1262 14 Dtool_Ns0bSDJX 0 7 1047 2934 2646 14 Dtool_Ns0bSDJX 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2864  
1263 14 Dtool_Ns0btfAu 0 7 1047 2934 2646 14 Dtool_Ns0btfAu 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 2847  2 ty 1 2847  2 tz 1 2847  
1264 14 Dtool_Ns0bblkA 0 7 1048 2934 2646 14 Dtool_Ns0bblkA 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2847  4 axis 1 2864  2 cs 1 2790  
1265 14 Dtool_Ns0byawN 0 7 1048 2934 2646 14 Dtool_Ns0byawN 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2847  4 axis 1 2864  
1266 14 Dtool_Ns0b9B_S 0 7 1049 2934 2646 14 Dtool_Ns0b9B_S 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2847  4 axis 1 2864  2 cs 1 2790  
1267 14 Dtool_Ns0bYFts 0 7 1049 2934 2646 14 Dtool_Ns0bYFts 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2847  4 axis 1 2864  
1268 14 Dtool_Ns0b38_F 0 7 1050 2934 2646 14 Dtool_Ns0b38_F 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2864  
1269 14 Dtool_Ns0bH84Q 0 7 1050 2934 2646 14 Dtool_Ns0bH84Q 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2847  
1270 14 Dtool_Ns0bXzZ0 0 7 1050 2934 2646 14 Dtool_Ns0bXzZ0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2847  2 sy 1 2847  2 sz 1 2847  
1271 14 Dtool_Ns0bfITj 0 7 1051 2934 2646 14 Dtool_Ns0bfITj 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2864  2 cs 1 2790  
1272 14 Dtool_Ns0bwpeM 0 7 1051 2934 2646 14 Dtool_Ns0bwpeM 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2864  
1273 14 Dtool_Ns0b1Nbx 0 7 1051 2934 2646 14 Dtool_Ns0b1Nbx 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2847  4 shxz 1 2847  4 shyz 1 2847  2 cs 1 2790  
1274 14 Dtool_Ns0bna36 0 7 1051 2934 2646 14 Dtool_Ns0bna36 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2847  4 shxz 1 2847  4 shyz 1 2847  
1275 14 Dtool_Ns0bjJJb 0 7 1052 2934 2646 14 Dtool_Ns0bjJJb 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2864  5 shear 1 2864  2 cs 1 2790  
1276 14 Dtool_Ns0bEN20 0 7 1052 2934 2646 14 Dtool_Ns0bEN20 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2864  5 shear 1 2864  
1277 14 Dtool_Ns0bfLeP 0 7 1052 2934 2646 14 Dtool_Ns0bfLeP 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2847  2 sy 1 2847  2 sz 1 2847  4 shxy 1 2847  4 shxz 1 2847  4 shyz 1 2847  2 cs 1 2790  
1278 14 Dtool_Ns0bkKNp 0 7 1052 2934 2646 14 Dtool_Ns0bkKNp 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2847  2 sy 1 2847  2 sz 1 2847  4 shxy 1 2847  4 shxz 1 2847  4 shyz 1 2847  
1279 14 Dtool_Ns0bMIyP 0 6 1053 2928 0 14 Dtool_Ns0bMIyP 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1280 14 Dtool_Ns0bMGWN 0 6 1054 2928 0 14 Dtool_Ns0bMGWN 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1281 14 Dtool_Ns0b5OYN 0 6 1055 2928 0 14 Dtool_Ns0b5OYN 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2790  2 to 1 2790  
1282 14 Dtool_Ns0bqIgc 0 6 1056 2833 0 14 Dtool_Ns0bqIgc 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  5 other 1 2928  
1283 14 Dtool_Ns0boOXn 0 6 1056 2833 0 14 Dtool_Ns0boOXn 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2928  5 other 1 2928  9 threshold 1 2847  
1284 14 Dtool_Ns0bdkYL 0 4 1057 2828 0 14 Dtool_Ns0bdkYL 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  3 out 1 2834  
1285 14 Dtool_Ns0bXBeC 0 4 1058 2828 0 14 Dtool_Ns0bXBeC 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2928  3 out 1 2834  12 indent_level 1 2832  
1286 14 Dtool_Ns0bXY5L 0 4 1058 2828 0 14 Dtool_Ns0bXY5L 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  3 out 1 2834  
1287 14 Dtool_Ns0b5Z6N 0 4 1059 2828 0 14 Dtool_Ns0b5Z6N 0 3 4 this 3 2928  3 out 1 2834  10 class_name 1 2831  
1288 14 Dtool_Ns0bQqLT 0 4 1060 2828 0 14 Dtool_Ns0bQqLT 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  7 hashgen 1 2836  
1289 14 Dtool_Ns0bj1Tq 0 4 1060 2828 0 14 Dtool_Ns0bj1Tq 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2928  7 hashgen 1 2836  5 scale 1 2847  
1290 14 Dtool_Ns0b0yx8 0 4 1061 2828 0 14 Dtool_Ns0b0yx8 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  11 destination 1 2838  
1291 14 Dtool_Ns0bb9pg 0 4 1062 2828 0 14 Dtool_Ns0bb9pg 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  4 scan 1 2840  
1292 14 Dtool_Ns0bAHts 0 4 1063 2828 0 14 Dtool_Ns0bAHts 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  11 destination 1 2838  
1293 14 Dtool_Ns0bT9Pt 0 4 1064 2828 0 14 Dtool_Ns0bT9Pt 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2934  6 source 1 2840  
1294 14 Dtool_Ns0bn3L3 0 7 1065 2843 0 14 Dtool_Ns0bn3L3 0 0 
1295 14 Dtool_Ns0bComI 0 4 975 2828 0 14 Dtool_Ns0bComI 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2937  1 i 1 2832  
1296 14 Dtool_Ns0b7tWq 0 6 975 2847 0 14 Dtool_Ns0b7tWq 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2939  1 i 1 2832  
1297 14 Dtool_Ns0bstFR 0 4 976 2828 0 14 Dtool_Ns0bstFR 0 3 4 this 3 2937  1 i 1 2832  1 v 1 2847  
1298 14 Dtool_Ns0blF2k 0 6 977 2832 0 14 Dtool_Ns0blF2k 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1299 14 Dtool_Ns0bj2qs 0 6 980 2847 0 14 Dtool_Ns0bj2qs 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2941  1 i 1 2832  
1300 14 Dtool_Ns0b9cS7 0 6 981 2832 0 14 Dtool_Ns0b9cS7 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1301 14 Dtool_Ns0bz1FW 0 7 1068 2943 2654 14 Dtool_Ns0bz1FW 234 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1302 14 Dtool_Ns0bGu6U 0 7 1068 2943 2654 14 Dtool_Ns0bGu6U 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2928  
1303 14 Dtool_Ns0b_vVq 0 7 1068 2943 2654 14 Dtool_Ns0b_vVq 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2935  
1304 14 Dtool_Ns0bF1Im 0 7 1068 2943 2654 14 Dtool_Ns0bF1Im 226 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 2847  3 e01 1 2847  3 e02 1 2847  3 e03 1 2847  3 e10 1 2847  3 e11 1 2847  3 e12 1 2847  3 e13 1 2847  3 e20 1 2847  3 e21 1 2847  3 e22 1 2847  3 e23 1 2847  3 e30 1 2847  3 e31 1 2847  3 e32 1 2847  3 e33 1 2847  
1305 14 Dtool_Ns0b4c8E 0 6 1069 2943 0 14 Dtool_Ns0b4c8E 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2943  4 copy 1 2928  
1306 14 Dtool_Ns0byn3z 0 6 1069 2943 0 14 Dtool_Ns0byn3z 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2943  4 copy 1 2935  
1307 14 Dtool_Ns0bn_Mt 0 4 1070 2828 0 14 Dtool_Ns0bn_Mt 221 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 2943  3 e00 1 2847  3 e01 1 2847  3 e02 1 2847  3 e03 1 2847  3 e10 1 2847  3 e11 1 2847  3 e12 1 2847  3 e13 1 2847  3 e20 1 2847  3 e21 1 2847  3 e22 1 2847  3 e23 1 2847  3 e30 1 2847  3 e31 1 2847  3 e32 1 2847  3 e33 1 2847  
1308 14 Dtool_Ns0bnXxN 0 4 1071 2828 0 14 Dtool_Ns0bnXxN 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2943  3 row 1 2832  3 col 1 2832  
1309 14 Dtool_Ns0b_K_B 0 6 1071 2847 0 14 Dtool_Ns0b_K_B 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2935  3 row 1 2832  3 col 1 2832  
1310 14 Dtool_Ns0bf_yd 0 4 1072 2828 0 14 Dtool_Ns0bf_yd 410 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2935  
1311 14 Dtool_Ns0blJtd 0 6 1073 2832 0 14 Dtool_Ns0blJtd 291 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2935  
1312 14 Dtool_Ns0br_BG 0 7 1074 2843 0 14 Dtool_Ns0br_BG 0 0 
1313 14 Dtool_Ns0brtd_ 0 7 1089 2944 2714 14 Dtool_Ns0brtd_ 719 // Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1314 14 Dtool_Ns0bvDxK 0 7 1089 2944 2714 14 Dtool_Ns0bvDxK 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2879  
1315 14 Dtool_Ns0bM1Wm 0 7 1089 2944 2714 14 Dtool_Ns0bM1Wm 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2826  4 copy 1 2861  
1316 14 Dtool_Ns0bzNTV 0 7 1089 2944 2714 14 Dtool_Ns0bzNTV 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2826  6 param1 0 2826  6 param2 0 2826  6 param3 0 2826  
1317 14 Dtool_Ns0bQoeb 0 7 1090 2944 2714 14 Dtool_Ns0bQoeb 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2867  
1318 14 Dtool_Ns0b_F9y 0 7 1091 2944 2714 14 Dtool_Ns0b_F9y 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1319 14 Dtool_Ns0brkOj 0 7 1092 2860 1816 14 Dtool_Ns0brkOj 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  1 v 1 2861  
1320 14 Dtool_Ns0bjhO_ 0 7 1092 2878 2075 14 Dtool_Ns0bjhO_ 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  1 v 1 2879  
1321 14 Dtool_Ns0beJuF 0 7 1093 2944 2714 14 Dtool_Ns0beJuF 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  3 rhs 1 2945  
1322 14 Dtool_Ns0bXaQp 0 7 1094 2944 2714 14 Dtool_Ns0bXaQp 216 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1323 14 Dtool_Ns0bI56X 0 7 1095 2944 2714 14 Dtool_Ns0bI56X 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  5 other 1 2945  
1324 14 Dtool_Ns0bb27z 0 7 1096 2944 2714 14 Dtool_Ns0bb27z 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  5 other 1 2945  
1325 14 Dtool_Ns0b3Uhy 0 6 1097 2826 0 14 Dtool_Ns0b3Uhy 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  5 other 1 2945  
1326 14 Dtool_Ns0bmSn_ 0 6 1098 2826 0 14 Dtool_Ns0bmSn_ 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  5 other 1 2945  
1327 14 Dtool_Ns0bj8YK 0 7 1099 2902 2373 14 Dtool_Ns0bj8YK 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2944  6 param0 0 2903  
1328 14 Dtool_Ns0be9Is 0 7 1099 2913 2466 14 Dtool_Ns0be9Is 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2944  6 param0 0 2907  
1329 14 Dtool_Ns0bU_6J 0 7 1099 2944 2714 14 Dtool_Ns0bU_6J 226 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  6 param0 0 2945  
1330 14 Dtool_Ns0bppqj 0 7 1099 2944 2714 14 Dtool_Ns0bppqj 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  6 scalar 1 2826  
1331 14 Dtool_Ns0be9qp 0 7 1100 2944 2714 14 Dtool_Ns0be9qp 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  6 scalar 1 2826  
1332 14 Dtool_Ns0bMJVd 0 6 1101 2944 0 14 Dtool_Ns0bMJVd 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2944  6 param0 0 2945  
1333 14 Dtool_Ns0brHMU 0 6 1102 2833 0 14 Dtool_Ns0brHMU 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  5 other 1 2945  
1334 14 Dtool_Ns0blDKH 0 6 1102 2833 0 14 Dtool_Ns0blDKH 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2945  5 other 1 2945  9 threshold 1 2826  
1335 14 Dtool_Ns0bi2zi 0 6 1103 2833 0 14 Dtool_Ns0bi2zi 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  5 other 1 2945  
1336 14 Dtool_Ns0bgEa5 0 6 1104 2833 0 14 Dtool_Ns0bgEa5 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2945  5 other 1 2945  9 threshold 1 2826  
1337 14 Dtool_Ns0bclzP 0 4 1105 2828 0 14 Dtool_Ns0bclzP 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  6 param0 0 2834  
1338 14 Dtool_Ns0bQnH2 0 4 1106 2828 0 14 Dtool_Ns0bQnH2 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  1 m 1 2902  
1339 14 Dtool_Ns0bIWR2 0 4 1106 2828 0 14 Dtool_Ns0bIWR2 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  1 m 1 2913  
1340 14 Dtool_Ns0badwD 0 4 1107 2828 0 14 Dtool_Ns0badwD 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2944  1 m 1 2903  
1341 14 Dtool_Ns0b1eQH 0 4 1107 2828 0 14 Dtool_Ns0b1eQH 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2944  1 m 1 2907  
1342 14 Dtool_Ns0bRc8G 0 4 1108 2828 0 14 Dtool_Ns0bRc8G 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 2944  3 hpr 1 2861  2 cs 1 2790  
1343 14 Dtool_Ns0bghkq 0 4 1108 2828 0 14 Dtool_Ns0bghkq 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2944  3 hpr 1 2861  
1344 14 Dtool_Ns0bWRZg 0 7 1109 2860 1816 14 Dtool_Ns0bWRZg 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  2 cs 1 2790  
1345 14 Dtool_Ns0bO1A0 0 7 1109 2860 1816 14 Dtool_Ns0bO1A0 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1346 14 Dtool_Ns0bYcKh 0 7 1110 2866 1984 14 Dtool_Ns0bYcKh 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1347 14 Dtool_Ns0bNIeK 0 7 1111 2866 1984 14 Dtool_Ns0bNIeK 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1348 14 Dtool_Ns0bZTUN 0 6 1112 2826 0 14 Dtool_Ns0bZTUN 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1349 14 Dtool_Ns0beAIg 0 6 1113 2826 0 14 Dtool_Ns0beAIg 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1350 14 Dtool_Ns0byPe0 0 4 1114 2828 0 14 Dtool_Ns0byPe0 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2944  9 angle_rad 1 2826  4 axis 1 2867  
1351 14 Dtool_Ns0bYkah 0 4 1115 2828 0 14 Dtool_Ns0bYkah 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2944  9 angle_deg 1 2826  4 axis 1 2867  
1352 14 Dtool_Ns0b3KoZ 0 7 1116 2866 1984 14 Dtool_Ns0b3KoZ 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  2 cs 1 2790  
1353 14 Dtool_Ns0brwSS 0 7 1116 2866 1984 14 Dtool_Ns0brwSS 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1354 14 Dtool_Ns0bMxzz 0 7 1117 2866 1984 14 Dtool_Ns0bMxzz 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  2 cs 1 2790  
1355 14 Dtool_Ns0b86me 0 7 1117 2866 1984 14 Dtool_Ns0b86me 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1356 14 Dtool_Ns0b6X_p 0 7 1118 2866 1984 14 Dtool_Ns0b6X_p 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  2 cs 1 2790  
1357 14 Dtool_Ns0bIjTb 0 7 1118 2866 1984 14 Dtool_Ns0bIjTb 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1358 14 Dtool_Ns0bk8aD 0 6 1119 2826 0 14 Dtool_Ns0bk8aD 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1359 14 Dtool_Ns0bjxaE 0 6 1120 2826 0 14 Dtool_Ns0bjxaE 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1360 14 Dtool_Ns0b1yaL 0 6 1121 2826 0 14 Dtool_Ns0b1yaL 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1361 14 Dtool_Ns0bH0aS 0 6 1122 2826 0 14 Dtool_Ns0bH0aS 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1362 14 Dtool_Ns0b3PLX 0 4 1123 2828 0 14 Dtool_Ns0b3PLX 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2944  1 r 1 2826  
1363 14 Dtool_Ns0b04KY 0 4 1124 2828 0 14 Dtool_Ns0b04KY 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2944  1 i 1 2826  
1364 14 Dtool_Ns0bm5Kf 0 4 1125 2828 0 14 Dtool_Ns0bm5Kf 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2944  1 j 1 2826  
1365 14 Dtool_Ns0bYGLm 0 4 1126 2828 0 14 Dtool_Ns0bYGLm 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2944  1 k 1 2826  
1366 14 Dtool_Ns0baBWQ 0 6 1127 2833 0 14 Dtool_Ns0baBWQ 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2944  
1367 14 Dtool_Ns0bMknV 0 6 1128 2833 0 14 Dtool_Ns0bMknV 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2944  5 other 1 2945  
1368 14 Dtool_Ns0bDgwh 0 6 1129 2833 0 14 Dtool_Ns0bDgwh 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2944  
1369 14 Dtool_Ns0bed84 0 6 1130 2833 0 14 Dtool_Ns0bed84 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2944  5 other 1 2945  
1370 14 Dtool_Ns0bvLqt 0 6 1131 2833 0 14 Dtool_Ns0bvLqt 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2944  
1371 14 Dtool_Ns0bJkak 0 6 1132 2833 0 14 Dtool_Ns0bJkak 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2945  
1372 14 Dtool_Ns0b4P4N 0 6 1133 2833 0 14 Dtool_Ns0b4P4N 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2945  9 tolerance 1 2826  
1373 14 Dtool_Ns0bmmMR 0 6 1134 2945 0 14 Dtool_Ns0bmmMR 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1374 14 Dtool_Ns0bndKd 0 7 1135 2843 0 14 Dtool_Ns0bndKd 0 0 
1375 14 Dtool_Ns0brOX4 0 7 1138 2947 2762 14 Dtool_Ns0brOX4 719 // Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1376 14 Dtool_Ns0bwmdo 0 7 1138 2947 2762 14 Dtool_Ns0bwmdo 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2885  
1377 14 Dtool_Ns0bBaVV 0 7 1138 2947 2762 14 Dtool_Ns0bBaVV 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2847  4 copy 1 2864  
1378 14 Dtool_Ns0b6Z6w 0 7 1138 2947 2762 14 Dtool_Ns0b6Z6w 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2847  6 param1 0 2847  6 param2 0 2847  6 param3 0 2847  
1379 14 Dtool_Ns0bOPmP 0 7 1139 2947 2762 14 Dtool_Ns0bOPmP 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2870  
1380 14 Dtool_Ns0b_hFu 0 7 1140 2947 2762 14 Dtool_Ns0b_hFu 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1381 14 Dtool_Ns0bPTTe 0 7 1141 2863 1886 14 Dtool_Ns0bPTTe 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  1 v 1 2864  
1382 14 Dtool_Ns0bHWT6 0 7 1141 2884 2153 14 Dtool_Ns0bHWT6 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  1 v 1 2885  
1383 14 Dtool_Ns0bGGsA 0 7 1142 2947 2762 14 Dtool_Ns0bGGsA 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  3 rhs 1 2948  
1384 14 Dtool_Ns0bX_Xk 0 7 1143 2947 2762 14 Dtool_Ns0bX_Xk 216 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1385 14 Dtool_Ns0bPV02 0 7 1144 2947 2762 14 Dtool_Ns0bPV02 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  5 other 1 2948  
1386 14 Dtool_Ns0bZa1S 0 7 1145 2947 2762 14 Dtool_Ns0bZa1S 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  5 other 1 2948  
1387 14 Dtool_Ns0b3sxo 0 6 1146 2847 0 14 Dtool_Ns0b3sxo 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  5 other 1 2948  
1388 14 Dtool_Ns0bmq30 0 6 1147 2847 0 14 Dtool_Ns0bmq30 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  5 other 1 2948  
1389 14 Dtool_Ns0bBNgV 0 7 1148 2923 2555 14 Dtool_Ns0bBNgV 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  6 param0 0 2924  
1390 14 Dtool_Ns0b8NQ3 0 7 1148 2934 2646 14 Dtool_Ns0b8NQ3 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  6 param0 0 2928  
1391 14 Dtool_Ns0brQ0o 0 7 1148 2947 2762 14 Dtool_Ns0brQ0o 226 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  6 param0 0 2948  
1392 14 Dtool_Ns0bA0TI 0 7 1148 2947 2762 14 Dtool_Ns0bA0TI 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  6 scalar 1 2847  
1393 14 Dtool_Ns0bPASO 0 7 1149 2947 2762 14 Dtool_Ns0bPASO 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  6 scalar 1 2847  
1394 14 Dtool_Ns0b6vdR 0 6 1150 2947 0 14 Dtool_Ns0b6vdR 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  6 param0 0 2948  
1395 14 Dtool_Ns0bsATv 0 6 1151 2833 0 14 Dtool_Ns0bsATv 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  5 other 1 2948  
1396 14 Dtool_Ns0bKRVo 0 6 1151 2833 0 14 Dtool_Ns0bKRVo 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2948  5 other 1 2948  9 threshold 1 2847  
1397 14 Dtool_Ns0bZg5d 0 6 1152 2833 0 14 Dtool_Ns0bZg5d 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  5 other 1 2948  
1398 14 Dtool_Ns0bUNTJ 0 6 1153 2833 0 14 Dtool_Ns0bUNTJ 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2948  5 other 1 2948  9 threshold 1 2847  
1399 14 Dtool_Ns0bcZ7K 0 4 1154 2828 0 14 Dtool_Ns0bcZ7K 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  6 param0 0 2834  
1400 14 Dtool_Ns0bQLcn 0 4 1155 2828 0 14 Dtool_Ns0bQLcn 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  1 m 1 2923  
1401 14 Dtool_Ns0bI6nn 0 4 1155 2828 0 14 Dtool_Ns0bI6nn 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  1 m 1 2934  
1402 14 Dtool_Ns0bea4e 0 4 1156 2828 0 14 Dtool_Ns0bea4e 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  1 m 1 2924  
1403 14 Dtool_Ns0b5bYi 0 4 1156 2828 0 14 Dtool_Ns0b5bYi 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  1 m 1 2928  
1404 14 Dtool_Ns0bX48z 0 4 1157 2828 0 14 Dtool_Ns0bX48z 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 2947  3 hpr 1 2864  2 cs 1 2790  
1405 14 Dtool_Ns0bhFnX 0 4 1157 2828 0 14 Dtool_Ns0bhFnX 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  3 hpr 1 2864  
1406 14 Dtool_Ns0bW1gb 0 7 1158 2863 1886 14 Dtool_Ns0bW1gb 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  2 cs 1 2790  
1407 14 Dtool_Ns0bORIv 0 7 1158 2863 1886 14 Dtool_Ns0bORIv 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1408 14 Dtool_Ns0bY4Rc 0 7 1159 2869 2018 14 Dtool_Ns0bY4Rc 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1409 14 Dtool_Ns0bNkmF 0 7 1160 2869 2018 14 Dtool_Ns0bNkmF 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1410 14 Dtool_Ns0bZ_bI 0 6 1161 2847 0 14 Dtool_Ns0bZ_bI 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1411 14 Dtool_Ns0be8Rb 0 6 1162 2847 0 14 Dtool_Ns0be8Rb 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1412 14 Dtool_Ns0bZ91x 0 4 1163 2828 0 14 Dtool_Ns0bZ91x 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2947  9 angle_rad 1 2847  4 axis 1 2870  
1413 14 Dtool_Ns0bVKOA 0 4 1164 2828 0 14 Dtool_Ns0bVKOA 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2947  9 angle_deg 1 2847  4 axis 1 2870  
1414 14 Dtool_Ns0b3uwU 0 7 1165 2869 2018 14 Dtool_Ns0b3uwU 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  2 cs 1 2790  
1415 14 Dtool_Ns0brsaN 0 7 1165 2869 2018 14 Dtool_Ns0brsaN 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1416 14 Dtool_Ns0bMt7u 0 7 1166 2869 2018 14 Dtool_Ns0bMt7u 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  2 cs 1 2790  
1417 14 Dtool_Ns0b8etZ 0 7 1166 2869 2018 14 Dtool_Ns0b8etZ 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1418 14 Dtool_Ns0b6zHl 0 7 1167 2869 2018 14 Dtool_Ns0b6zHl 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  2 cs 1 2790  
1419 14 Dtool_Ns0bIPaW 0 7 1167 2869 2018 14 Dtool_Ns0bIPaW 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1420 14 Dtool_Ns0blYi_ 0 6 1168 2847 0 14 Dtool_Ns0blYi_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1421 14 Dtool_Ns0bkVi_ 0 6 1169 2847 0 14 Dtool_Ns0bkVi_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1422 14 Dtool_Ns0b1WiG 0 6 1170 2847 0 14 Dtool_Ns0b1WiG 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1423 14 Dtool_Ns0bHQiN 0 6 1171 2847 0 14 Dtool_Ns0bHQiN 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1424 14 Dtool_Ns0b2srU 0 4 1172 2828 0 14 Dtool_Ns0b2srU 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  1 r 1 2847  
1425 14 Dtool_Ns0b3hrV 0 4 1173 2828 0 14 Dtool_Ns0b3hrV 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  1 i 1 2847  
1426 14 Dtool_Ns0b5irc 0 4 1174 2828 0 14 Dtool_Ns0b5irc 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  1 j 1 2847  
1427 14 Dtool_Ns0bLjrj 0 4 1175 2828 0 14 Dtool_Ns0bLjrj 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  1 k 1 2847  
1428 14 Dtool_Ns0baleL 0 6 1176 2833 0 14 Dtool_Ns0baleL 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2947  
1429 14 Dtool_Ns0bMw_G 0 6 1177 2833 0 14 Dtool_Ns0bMw_G 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  5 other 1 2948  
1430 14 Dtool_Ns0bDM3c 0 6 1178 2833 0 14 Dtool_Ns0bDM3c 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2947  
1431 14 Dtool_Ns0bIgEt 0 6 1179 2833 0 14 Dtool_Ns0bIgEt 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2947  5 other 1 2948  
1432 14 Dtool_Ns0bv3zo 0 6 1180 2833 0 14 Dtool_Ns0bv3zo 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2947  
1433 14 Dtool_Ns0bJIif 0 6 1181 2833 0 14 Dtool_Ns0bJIif 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2948  
1434 14 Dtool_Ns0bZ4KV 0 6 1182 2833 0 14 Dtool_Ns0bZ4KV 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2948  9 tolerance 1 2847  
1435 14 Dtool_Ns0bmaTM 0 6 1183 2948 0 14 Dtool_Ns0bmaTM 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1436 14 Dtool_Ns0bnxRY 0 7 1184 2843 0 14 Dtool_Ns0bnxRY 0 0 
1437 14 Dtool_Ns0b1ufs 0 7 1187 2950 2767 14 Dtool_Ns0b1ufs 724 // Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1438 14 Dtool_Ns0boHWm 0 7 1187 2950 2767 14 Dtool_Ns0boHWm 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2903  
1439 14 Dtool_Ns0boMkn 0 7 1187 2950 2767 14 Dtool_Ns0boMkn 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2907  
1440 14 Dtool_Ns0bdC6k 0 7 1187 2950 2767 14 Dtool_Ns0bdC6k 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2945  
1441 14 Dtool_Ns0bZE8x 0 7 1187 2950 2767 14 Dtool_Ns0bZE8x 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2879  
1442 14 Dtool_Ns0bzssT 0 7 1187 2950 2767 14 Dtool_Ns0bzssT 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2867  6 param1 0 2826  
1443 14 Dtool_Ns0bLwNm 0 7 1187 2950 2767 14 Dtool_Ns0bLwNm 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 2826  6 param1 0 2826  6 param2 0 2826  
1444 14 Dtool_Ns0b6t_a 0 7 1187 2950 2767 14 Dtool_Ns0b6t_a 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2826  6 param1 0 2826  6 param2 0 2826  6 param3 0 2826  
1445 14 Dtool_Ns0bcT59 0 7 1188 2944 2714 14 Dtool_Ns0bcT59 377 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2951  5 other 1 2945  
1446 14 Dtool_Ns0bttc8 0 7 1188 2950 2767 14 Dtool_Ns0bttc8 248 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2951  5 other 1 2951  
1447 14 Dtool_Ns0bmMpJ 0 7 1188 2950 2767 14 Dtool_Ns0bmMpJ 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2951  6 scalar 1 2826  
1448 14 Dtool_Ns0bmkd6 0 7 1189 2950 2767 14 Dtool_Ns0bmkd6 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2951  6 scalar 1 2826  
1449 14 Dtool_Ns0bscCI 0 7 1190 2843 0 14 Dtool_Ns0bscCI 0 0 
1450 14 Dtool_Ns0bXT9o 0 7 1193 2953 2772 14 Dtool_Ns0bXT9o 724 // Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1451 14 Dtool_Ns0b1jtU 0 7 1193 2953 2772 14 Dtool_Ns0b1jtU 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2924  
1452 14 Dtool_Ns0b1o7V 0 7 1193 2953 2772 14 Dtool_Ns0b1o7V 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2928  
1453 14 Dtool_Ns0b71Oh 0 7 1193 2953 2772 14 Dtool_Ns0b71Oh 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2948  
1454 14 Dtool_Ns0bbq7q 0 7 1193 2953 2772 14 Dtool_Ns0bbq7q 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2885  
1455 14 Dtool_Ns0bLdpy 0 7 1193 2953 2772 14 Dtool_Ns0bLdpy 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2870  6 param1 0 2847  
1456 14 Dtool_Ns0b4Iug 0 7 1193 2953 2772 14 Dtool_Ns0b4Iug 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 2847  6 param1 0 2847  6 param2 0 2847  
1457 14 Dtool_Ns0bA9cz 0 7 1193 2953 2772 14 Dtool_Ns0bA9cz 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2847  6 param1 0 2847  6 param2 0 2847  6 param3 0 2847  
1458 14 Dtool_Ns0bukuN 0 7 1194 2947 2762 14 Dtool_Ns0bukuN 377 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2954  5 other 1 2948  
1459 14 Dtool_Ns0b1Z8I 0 7 1194 2953 2772 14 Dtool_Ns0b1Z8I 248 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2954  5 other 1 2954  
1460 14 Dtool_Ns0by_rc 0 7 1194 2953 2772 14 Dtool_Ns0by_rc 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2954  6 scalar 1 2847  
1461 14 Dtool_Ns0bzWgN 0 7 1195 2953 2772 14 Dtool_Ns0bzWgN 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2954  6 scalar 1 2847  
1462 14 Dtool_Ns0bKPCY 0 7 1196 2843 0 14 Dtool_Ns0bKPCY 0 0 
1463 14 Dtool_Ns0bcX4n 0 7 1199 2956 2776 14 Dtool_Ns0bcX4n 730 // Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1464 14 Dtool_Ns0bkodg 0 7 1199 2956 2776 14 Dtool_Ns0bkodg 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2903  
1465 14 Dtool_Ns0bloku 0 7 1199 2956 2776 14 Dtool_Ns0bloku 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2907  
1466 14 Dtool_Ns0b_eNF 0 7 1199 2956 2776 14 Dtool_Ns0b_eNF 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2945  
1467 14 Dtool_Ns0bOs13 0 7 1199 2956 2776 14 Dtool_Ns0bOs13 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2867  6 param1 0 2826  
1468 14 Dtool_Ns0bWFbK 0 7 1199 2956 2776 14 Dtool_Ns0bWFbK 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2826  6 param1 0 2826  6 param2 0 2826  6 param3 0 2826  
1469 14 Dtool_Ns0b1nPz 0 7 1200 2956 2776 14 Dtool_Ns0b1nPz 352 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2957  5 other 1 2945  
1470 14 Dtool_Ns0byr_X 0 7 1200 2956 2776 14 Dtool_Ns0byr_X 312 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2957  5 other 1 2951  
1471 14 Dtool_Ns0byKEa 0 7 1201 2843 0 14 Dtool_Ns0byKEa 0 0 
1472 14 Dtool_Ns0b2Y6p 0 7 1204 2959 2780 14 Dtool_Ns0b2Y6p 730 // Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1473 14 Dtool_Ns0bYrfb 0 7 1204 2959 2780 14 Dtool_Ns0bYrfb 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2924  
1474 14 Dtool_Ns0bZrmp 0 7 1204 2959 2780 14 Dtool_Ns0bZrmp 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2928  
1475 14 Dtool_Ns0bRFe9 0 7 1204 2959 2780 14 Dtool_Ns0bRFe9 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2948  
1476 14 Dtool_Ns0byi3y 0 7 1204 2959 2780 14 Dtool_Ns0byi3y 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2870  6 param1 0 2826  
1477 14 Dtool_Ns0bQOxM 0 7 1204 2959 2780 14 Dtool_Ns0bQOxM 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2847  6 param1 0 2847  6 param2 0 2847  6 param3 0 2847  
1478 14 Dtool_Ns0blgBQ 0 7 1205 2959 2780 14 Dtool_Ns0blgBQ 352 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2960  5 other 1 2948  
1479 14 Dtool_Ns0b9P52 0 7 1205 2959 2780 14 Dtool_Ns0b9P52 312 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2960  5 other 1 2954  
1480 14 Dtool_Ns0bxK29 0 7 1206 2843 0 14 Dtool_Ns0bxK29 0 0 
1481 14 Dtool_Ns0baTo4 0 6 3 2847 0 14 Dtool_Ns0baTo4 0 1 1 f 1 2847  
1482 14 Dtool_Ns0bRKCI 0 6 3 2826 0 14 Dtool_Ns0bRKCI 0 1 1 f 1 2826  
1483 14 Dtool_Ns0bgpRs 0 6 4 2847 0 14 Dtool_Ns0bgpRs 0 1 1 f 1 2847  
1484 14 Dtool_Ns0bIbq7 0 6 4 2826 0 14 Dtool_Ns0bIbq7 0 1 1 f 1 2826  
1485 14 Dtool_Ns0bt1jy 0 6 342 2790 0 14 Dtool_Ns0bt1jy 0 0 
1486 14 Dtool_Ns0bVyE0 0 6 343 2790 0 14 Dtool_Ns0bVyE0 0 1 3 str 1 2831  
1487 14 Dtool_Ns0bblcZ 0 6 344 2831 0 14 Dtool_Ns0bblcZ 0 1 2 cs 1 2790  
1488 14 Dtool_Ns0b14II 0 6 345 2833 0 14 Dtool_Ns0b14II 0 1 2 cs 1 2790  
1489 14 Dtool_Ns0bvd7J 0 6 345 2833 0 14 Dtool_Ns0bvd7J 0 0 
1490 14 Dtool_Ns0bp_eQ 0 7 784 2923 2555 14 Dtool_Ns0bp_eQ 0 1 1 a 1 2924  
1491 14 Dtool_Ns0bN4ee 0 7 784 2902 2373 14 Dtool_Ns0bN4ee 0 1 1 a 1 2903  
1492 14 Dtool_Ns0bn_ss 0 7 784 2934 2646 14 Dtool_Ns0bn_ss 0 1 1 a 1 2928  
1493 14 Dtool_Ns0bL4s6 0 7 784 2913 2466 14 Dtool_Ns0bL4s6 0 1 1 a 1 2907  
1494 14 Dtool_Ns0b9Gem 0 7 785 2923 2555 14 Dtool_Ns0b9Gem 0 1 1 a 1 2924  
1495 14 Dtool_Ns0bNgym 0 7 785 2902 2373 14 Dtool_Ns0bNgym 0 1 1 a 1 2903  
1496 14 Dtool_Ns0bYJfW 0 7 785 2934 2646 14 Dtool_Ns0bYJfW 0 1 1 a 1 2928  
1497 14 Dtool_Ns0borzW 0 7 785 2913 2466 14 Dtool_Ns0borzW 0 1 1 a 1 2907  
1498 14 Dtool_Ns0bG8wm 0 7 785 2947 2762 14 Dtool_Ns0bG8wm 0 1 1 a 1 2948  
1499 14 Dtool_Ns0bqBx0 0 7 785 2944 2714 14 Dtool_Ns0bqBx0 0 1 1 a 1 2945  
1500 14 Dtool_Ns0bDzjX 0 7 1076 2923 2555 14 Dtool_Ns0bDzjX 0 2 1 m 1 2924  1 q 1 2948  
1501 14 Dtool_Ns0bkolH 0 7 1076 2902 2373 14 Dtool_Ns0bkolH 0 2 1 m 1 2903  1 q 1 2945  
1502 14 Dtool_Ns0bRsje 0 7 1076 2934 2646 14 Dtool_Ns0bRsje 0 2 1 m 1 2928  1 q 1 2948  
1503 14 Dtool_Ns0bqplO 0 7 1076 2913 2466 14 Dtool_Ns0bqplO 0 2 1 m 1 2907  1 q 1 2945  
1504 14 Dtool_Ns0byfKI 0 7 1076 2857 1806 14 Dtool_Ns0byfKI 0 2 1 v 1 2858  1 m 1 2924  
1505 14 Dtool_Ns0bSCRW 0 7 1076 2854 1790 14 Dtool_Ns0bSCRW 0 2 1 v 1 2855  1 m 1 2903  
1506 14 Dtool_Ns0bwfYk 0 7 1076 2875 2064 14 Dtool_Ns0bwfYk 0 2 1 v 1 2876  1 m 1 2924  
1507 14 Dtool_Ns0bmWZA 0 7 1076 2875 2064 14 Dtool_Ns0bmWZA 0 2 1 v 1 2876  1 m 1 2928  
1508 14 Dtool_Ns0bQCfy 0 7 1076 2872 2041 14 Dtool_Ns0bQCfy 0 2 1 v 1 2873  1 m 1 2903  
1509 14 Dtool_Ns0beNeO 0 7 1076 2872 2041 14 Dtool_Ns0beNeO 0 2 1 v 1 2873  1 m 1 2907  
1510 14 Dtool_Ns0bkWnc 0 7 1076 2899 2292 14 Dtool_Ns0bkWnc 0 2 1 v 1 2900  1 m 1 2928  
1511 14 Dtool_Ns0bcNsq 0 7 1076 2896 2274 14 Dtool_Ns0bcNsq 0 2 1 v 1 2897  1 m 1 2907  
1512 14 Dtool_Ns0b6f4W 0 7 1076 2863 1886 14 Dtool_Ns0b6f4W 0 2 1 v 1 2864  1 m 1 2924  
1513 14 Dtool_Ns0bZSml 0 7 1076 2860 1816 14 Dtool_Ns0bZSml 0 2 1 v 1 2861  1 m 1 2903  
1514 14 Dtool_Ns0bHpH4 0 7 1076 2884 2153 14 Dtool_Ns0bHpH4 0 2 1 v 1 2885  1 m 1 2928  
1515 14 Dtool_Ns0blt1G 0 7 1076 2878 2075 14 Dtool_Ns0blt1G 0 2 1 v 1 2879  1 m 1 2907  
1516 14 Dtool_Ns0bQlWf 0 7 1076 2851 1774 14 Dtool_Ns0bQlWf 0 2 1 v 1 2852  1 m 1 2924  
1517 14 Dtool_Ns0bfZ0h 0 7 1076 2848 1756 14 Dtool_Ns0bfZ0h 0 2 1 v 1 2849  1 m 1 2903  
1518 14 Dtool_Ns0bmnWm 0 7 1076 2869 2018 14 Dtool_Ns0bmnWm 0 2 1 v 1 2870  1 m 1 2924  
1519 14 Dtool_Ns0bwbZm 0 7 1076 2869 2018 14 Dtool_Ns0bwbZm 0 2 1 v 1 2870  1 m 1 2928  
1520 14 Dtool_Ns0bpb0o 0 7 1076 2866 1984 14 Dtool_Ns0bpb0o 0 2 1 v 1 2867  1 m 1 2903  
1521 14 Dtool_Ns0b7_2o 0 7 1076 2866 1984 14 Dtool_Ns0b7_2o 0 2 1 v 1 2867  1 m 1 2907  
1522 14 Dtool_Ns0biUZt 0 7 1076 2893 2256 14 Dtool_Ns0biUZt 0 2 1 v 1 2894  1 m 1 2928  
1523 14 Dtool_Ns0bpw2v 0 7 1076 2890 2238 14 Dtool_Ns0bpw2v 0 2 1 v 1 2891  1 m 1 2907  
1524 14 Dtool_Ns0blh4s 0 4 1077 2828 0 14 Dtool_Ns0blh4s 0 2 1 v 1 2857  1 m 1 2924  
1525 14 Dtool_Ns0bHtbw 0 4 1077 2828 0 14 Dtool_Ns0bHtbw 0 2 1 v 1 2854  1 m 1 2903  
1526 14 Dtool_Ns0bXi4z 0 4 1077 2828 0 14 Dtool_Ns0bXi4z 0 2 1 v 1 2875  1 m 1 2924  
1527 14 Dtool_Ns0bUC8a 0 4 1077 2828 0 14 Dtool_Ns0bUC8a 0 2 1 v 1 2875  1 m 1 2928  
1528 14 Dtool_Ns0bVsb3 0 4 1077 2828 0 14 Dtool_Ns0bVsb3 0 2 1 v 1 2872  1 m 1 2903  
1529 14 Dtool_Ns0bUMfe 0 4 1077 2828 0 14 Dtool_Ns0bUMfe 0 2 1 v 1 2872  1 m 1 2907  
1530 14 Dtool_Ns0bbnYb 0 4 1077 2828 0 14 Dtool_Ns0bbnYb 0 2 1 v 1 2863  1 m 1 2924  
1531 14 Dtool_Ns0bTAEv 0 4 1077 2828 0 14 Dtool_Ns0bTAEv 0 2 1 v 1 2860  1 m 1 2903  
1532 14 Dtool_Ns0b6LsT 0 4 1077 2828 0 14 Dtool_Ns0b6LsT 0 2 1 v 1 2884  1 m 1 2928  
1533 14 Dtool_Ns0byoXn 0 4 1077 2828 0 14 Dtool_Ns0byoXn 0 2 1 v 1 2878  1 m 1 2907  
1534 14 Dtool_Ns0bSP7Z 0 4 1077 2828 0 14 Dtool_Ns0bSP7Z 0 2 1 v 1 2851  1 m 1 2924  
1535 14 Dtool_Ns0bQFiK 0 4 1077 2828 0 14 Dtool_Ns0bQFiK 0 2 1 v 1 2848  1 m 1 2903  
1536 14 Dtool_Ns0bXk75 0 4 1077 2828 0 14 Dtool_Ns0bXk75 0 2 1 v 1 2869  1 m 1 2924  
1537 14 Dtool_Ns0b7krb 0 4 1077 2828 0 14 Dtool_Ns0b7krb 0 2 1 v 1 2869  1 m 1 2928  
1538 14 Dtool_Ns0bVsiq 0 4 1077 2828 0 14 Dtool_Ns0bVsiq 0 2 1 v 1 2866  1 m 1 2903  
1539 14 Dtool_Ns0b5tSM 0 4 1077 2828 0 14 Dtool_Ns0b5tSM 0 2 1 v 1 2866  1 m 1 2907  
1540 14 Dtool_Ns0bJ63D 0 4 1078 2828 0 14 Dtool_Ns0bJ63D 0 2 4 dest 1 2838  5 value 1 2924  
1541 14 Dtool_Ns0bQo4D 0 4 1078 2828 0 14 Dtool_Ns0bQo4D 0 2 4 dest 1 2838  5 value 1 2903  
1542 14 Dtool_Ns0bb53K 0 4 1078 2828 0 14 Dtool_Ns0bb53K 0 2 4 dest 1 2838  5 value 1 2928  
1543 14 Dtool_Ns0bCr4K 0 4 1078 2828 0 14 Dtool_Ns0bCr4K 0 2 4 dest 1 2838  5 value 1 2907  
1544 14 Dtool_Ns0bG74L 0 4 1079 2828 0 14 Dtool_Ns0bG74L 0 2 6 result 1 2923  6 source 1 2840  
1545 14 Dtool_Ns0bGpUO 0 4 1079 2828 0 14 Dtool_Ns0bGpUO 0 2 6 result 1 2902  6 source 1 2840  
1546 14 Dtool_Ns0b0f6L 0 4 1079 2828 0 14 Dtool_Ns0b0f6L 0 2 6 result 1 2934  6 source 1 2840  
1547 14 Dtool_Ns0b0NWO 0 4 1079 2828 0 14 Dtool_Ns0b0NWO 0 2 6 result 1 2913  6 source 1 2840  
1548 14 Dtool_Ns0byVzC 0 4 1080 2828 0 14 Dtool_Ns0byVzC 0 4 3 mat 1 2923  5 scale 1 2864  3 hpr 1 2864  2 cs 1 2790  
1549 14 Dtool_Ns0bhQb3 0 4 1080 2828 0 14 Dtool_Ns0bhQb3 0 3 3 mat 1 2923  5 scale 1 2864  3 hpr 1 2864  
1550 14 Dtool_Ns0b3KHb 0 4 1080 2828 0 14 Dtool_Ns0b3KHb 0 5 3 mat 1 2923  5 scale 1 2864  5 shear 1 2864  3 hpr 1 2864  2 cs 1 2790  
1551 14 Dtool_Ns0bRK2_ 0 4 1080 2828 0 14 Dtool_Ns0bRK2_ 0 4 3 mat 1 2923  5 scale 1 2864  5 shear 1 2864  3 hpr 1 2864  
1552 14 Dtool_Ns0b4aBn 0 4 1080 2828 0 14 Dtool_Ns0b4aBn 0 4 3 mat 1 2902  5 scale 1 2861  3 hpr 1 2861  2 cs 1 2790  
1553 14 Dtool_Ns0b6xpb 0 4 1080 2828 0 14 Dtool_Ns0b6xpb 0 3 3 mat 1 2902  5 scale 1 2861  3 hpr 1 2861  
1554 14 Dtool_Ns0bs_WG 0 4 1080 2828 0 14 Dtool_Ns0bs_WG 0 5 3 mat 1 2902  5 scale 1 2861  5 shear 1 2861  3 hpr 1 2861  2 cs 1 2790  
1555 14 Dtool_Ns0bk7Er 0 4 1080 2828 0 14 Dtool_Ns0bk7Er 0 4 3 mat 1 2902  5 scale 1 2861  5 shear 1 2861  3 hpr 1 2861  
1556 14 Dtool_Ns0b8KjT 0 4 1080 2828 0 14 Dtool_Ns0b8KjT 0 5 3 mat 1 2934  5 scale 1 2864  3 hpr 1 2864  9 translate 1 2864  2 cs 1 2790  
1557 14 Dtool_Ns0bUKS4 0 4 1080 2828 0 14 Dtool_Ns0bUKS4 0 4 3 mat 1 2934  5 scale 1 2864  3 hpr 1 2864  9 translate 1 2864  
1558 14 Dtool_Ns0boQjw 0 4 1080 2828 0 14 Dtool_Ns0boQjw 0 6 3 mat 1 2934  5 scale 1 2864  5 shear 1 2864  3 hpr 1 2864  9 translate 1 2864  2 cs 1 2790  
1559 14 Dtool_Ns0b9vLl 0 4 1080 2828 0 14 Dtool_Ns0b9vLl 0 5 3 mat 1 2934  5 scale 1 2864  5 shear 1 2864  3 hpr 1 2864  9 translate 1 2864  
1560 14 Dtool_Ns0bQ_y_ 0 4 1080 2828 0 14 Dtool_Ns0bQ_y_ 0 5 3 mat 1 2913  5 scale 1 2861  3 hpr 1 2861  9 translate 1 2861  2 cs 1 2790  
1561 14 Dtool_Ns0b77gj 0 4 1080 2828 0 14 Dtool_Ns0b77gj 0 4 3 mat 1 2913  5 scale 1 2861  3 hpr 1 2861  9 translate 1 2861  
1562 14 Dtool_Ns0b1X_c 0 4 1080 2828 0 14 Dtool_Ns0b1X_c 0 6 3 mat 1 2913  5 scale 1 2861  5 shear 1 2861  3 hpr 1 2861  9 translate 1 2861  2 cs 1 2790  
1563 14 Dtool_Ns0bCknR 0 4 1080 2828 0 14 Dtool_Ns0bCknR 0 5 3 mat 1 2913  5 scale 1 2861  5 shear 1 2861  3 hpr 1 2861  9 translate 1 2861  
1564 14 Dtool_Ns0brGAD 0 6 1081 2833 0 14 Dtool_Ns0brGAD 0 4 3 mat 1 2924  5 scale 1 2863  3 hpr 1 2863  2 cs 1 2790  
1565 14 Dtool_Ns0bVxX2 0 6 1081 2833 0 14 Dtool_Ns0bVxX2 0 3 3 mat 1 2924  5 scale 1 2863  3 hpr 1 2863  
1566 14 Dtool_Ns0bwk1_ 0 6 1081 2833 0 14 Dtool_Ns0bwk1_ 0 5 3 mat 1 2924  5 scale 1 2863  5 shear 1 2863  3 hpr 1 2863  2 cs 1 2790  
1567 14 Dtool_Ns0bsyts 0 6 1081 2833 0 14 Dtool_Ns0bsyts 0 4 3 mat 1 2924  5 scale 1 2863  5 shear 1 2863  3 hpr 1 2863  
1568 14 Dtool_Ns0bKI_s 0 6 1081 2833 0 14 Dtool_Ns0bKI_s 0 4 3 mat 1 2903  5 scale 1 2860  3 hpr 1 2860  2 cs 1 2790  
1569 14 Dtool_Ns0bzJVg 0 6 1081 2833 0 14 Dtool_Ns0bzJVg 0 3 3 mat 1 2903  5 scale 1 2860  3 hpr 1 2860  
1570 14 Dtool_Ns0bb5Pi 0 6 1081 2833 0 14 Dtool_Ns0bb5Pi 0 5 3 mat 1 2903  5 scale 1 2860  5 shear 1 2860  3 hpr 1 2860  2 cs 1 2790  
1571 14 Dtool_Ns0bFoHP 0 6 1081 2833 0 14 Dtool_Ns0bFoHP 0 4 3 mat 1 2903  5 scale 1 2860  5 shear 1 2860  3 hpr 1 2860  
1572 14 Dtool_Ns0b7y0_ 0 6 1081 2833 0 14 Dtool_Ns0b7y0_ 0 5 3 mat 1 2928  5 scale 1 2863  3 hpr 1 2863  9 translate 1 2863  2 cs 1 2790  
1573 14 Dtool_Ns0b1gus 0 6 1081 2833 0 14 Dtool_Ns0b1gus 0 4 3 mat 1 2928  5 scale 1 2863  3 hpr 1 2863  9 translate 1 2863  
1574 14 Dtool_Ns0bFy__ 0 6 1081 2833 0 14 Dtool_Ns0bFy__ 0 6 3 mat 1 2928  5 scale 1 2863  5 shear 1 2863  3 hpr 1 2863  9 translate 1 2863  2 cs 1 2790  
1575 14 Dtool_Ns0bioSK 0 6 1081 2833 0 14 Dtool_Ns0bioSK 0 5 3 mat 1 2928  5 scale 1 2863  5 shear 1 2863  3 hpr 1 2863  9 translate 1 2863  
1576 14 Dtool_Ns0bQLRi 0 6 1081 2833 0 14 Dtool_Ns0bQLRi 0 5 3 mat 1 2907  5 scale 1 2860  3 hpr 1 2860  9 translate 1 2860  2 cs 1 2790  
1577 14 Dtool_Ns0bcmIP 0 6 1081 2833 0 14 Dtool_Ns0bcmIP 0 4 3 mat 1 2907  5 scale 1 2860  3 hpr 1 2860  9 translate 1 2860  
1578 14 Dtool_Ns0bt1gv 0 6 1081 2833 0 14 Dtool_Ns0bt1gv 0 6 3 mat 1 2907  5 scale 1 2860  5 shear 1 2860  3 hpr 1 2860  9 translate 1 2860  2 cs 1 2790  
1579 14 Dtool_Ns0bJlz6 0 6 1081 2833 0 14 Dtool_Ns0bJlz6 0 5 3 mat 1 2907  5 scale 1 2860  5 shear 1 2860  3 hpr 1 2860  9 translate 1 2860  
1580 14 Dtool_Ns0b5kiD 0 4 1082 2828 0 14 Dtool_Ns0b5kiD 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2923  5 scale 1 2864  5 shear 1 2864  3 hpr 1 2864  2 cs 1 2790  
1581 14 Dtool_Ns0bTMeM 0 4 1082 2828 0 14 Dtool_Ns0bTMeM 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2923  5 scale 1 2864  5 shear 1 2864  3 hpr 1 2864  
1582 14 Dtool_Ns0bURso 0 4 1082 2828 0 14 Dtool_Ns0bURso 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2902  5 scale 1 2861  5 shear 1 2861  3 hpr 1 2861  2 cs 1 2790  
1583 14 Dtool_Ns0b_Rpx 0 4 1082 2828 0 14 Dtool_Ns0b_Rpx 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2902  5 scale 1 2861  5 shear 1 2861  3 hpr 1 2861  
1584 14 Dtool_Ns0baU0J 0 4 1082 2828 0 14 Dtool_Ns0baU0J 0 6 3 mat 1 2934  5 scale 1 2864  5 shear 1 2864  3 hpr 1 2864  9 translate 1 2864  2 cs 1 2790  
1585 14 Dtool_Ns0b_LGV 0 4 1082 2828 0 14 Dtool_Ns0b_LGV 0 5 3 mat 1 2934  5 scale 1 2864  5 shear 1 2864  3 hpr 1 2864  9 translate 1 2864  
1586 14 Dtool_Ns0bXr_e 0 4 1082 2828 0 14 Dtool_Ns0bXr_e 0 6 3 mat 1 2913  5 scale 1 2861  5 shear 1 2861  3 hpr 1 2861  9 translate 1 2861  2 cs 1 2790  
1587 14 Dtool_Ns0bgMRq 0 4 1082 2828 0 14 Dtool_Ns0bgMRq 0 5 3 mat 1 2913  5 scale 1 2861  5 shear 1 2861  3 hpr 1 2861  9 translate 1 2861  
1588 14 Dtool_Ns0btC1N 0 6 1083 2833 0 14 Dtool_Ns0btC1N 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2924  5 scale 1 2863  5 shear 1 2863  3 hpr 1 2863  2 cs 1 2790  
1589 14 Dtool_Ns0bz5DH 0 6 1083 2833 0 14 Dtool_Ns0bz5DH 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2924  5 scale 1 2863  5 shear 1 2863  3 hpr 1 2863  
1590 14 Dtool_Ns0bPOdX 0 6 1083 2833 0 14 Dtool_Ns0bPOdX 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2903  5 scale 1 2860  5 shear 1 2860  3 hpr 1 2860  2 cs 1 2790  
1591 14 Dtool_Ns0bRWrQ 0 6 1083 2833 0 14 Dtool_Ns0bRWrQ 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2903  5 scale 1 2860  5 shear 1 2860  3 hpr 1 2860  
1592 14 Dtool_Ns0bvhAZ 0 6 1083 2833 0 14 Dtool_Ns0bvhAZ 0 6 3 mat 1 2928  5 scale 1 2863  5 shear 1 2863  3 hpr 1 2863  9 translate 1 2863  2 cs 1 2790  
1593 14 Dtool_Ns0bPJWn 0 6 1083 2833 0 14 Dtool_Ns0bPJWn 0 5 3 mat 1 2928  5 scale 1 2863  5 shear 1 2863  3 hpr 1 2863  9 translate 1 2863  
1594 14 Dtool_Ns0bST9i 0 6 1083 2833 0 14 Dtool_Ns0bST9i 0 6 3 mat 1 2907  5 scale 1 2860  5 shear 1 2860  3 hpr 1 2860  9 translate 1 2860  2 cs 1 2790  
1595 14 Dtool_Ns0b95Tx 0 6 1083 2833 0 14 Dtool_Ns0b95Tx 0 5 3 mat 1 2907  5 scale 1 2860  5 shear 1 2860  3 hpr 1 2860  9 translate 1 2860  
1596 14 Dtool_Ns0b2yX5 0 4 1084 2828 0 14 Dtool_Ns0b2yX5 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2923  5 scale 1 2864  5 shear 1 2864  3 hpr 1 2864  2 cs 1 2790  
1597 14 Dtool_Ns0bZHTC 0 4 1084 2828 0 14 Dtool_Ns0bZHTC 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2923  5 scale 1 2864  5 shear 1 2864  3 hpr 1 2864  
1598 14 Dtool_Ns0bSFhe 0 4 1084 2828 0 14 Dtool_Ns0bSFhe 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2902  5 scale 1 2861  5 shear 1 2861  3 hpr 1 2861  2 cs 1 2790  
1599 14 Dtool_Ns0b1Zen 0 4 1084 2828 0 14 Dtool_Ns0b1Zen 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2902  5 scale 1 2861  5 shear 1 2861  3 hpr 1 2861  
1600 14 Dtool_Ns0bXOp_ 0 4 1084 2828 0 14 Dtool_Ns0bXOp_ 0 6 3 mat 1 2934  5 scale 1 2864  5 shear 1 2864  3 hpr 1 2864  9 translate 1 2864  2 cs 1 2790  
1601 14 Dtool_Ns0bIA7K 0 4 1084 2828 0 14 Dtool_Ns0bIA7K 0 5 3 mat 1 2934  5 scale 1 2864  5 shear 1 2864  3 hpr 1 2864  9 translate 1 2864  
1602 14 Dtool_Ns0bR3yU 0 4 1084 2828 0 14 Dtool_Ns0bR3yU 0 6 3 mat 1 2913  5 scale 1 2861  5 shear 1 2861  3 hpr 1 2861  9 translate 1 2861  2 cs 1 2790  
1603 14 Dtool_Ns0bKHGg 0 4 1084 2828 0 14 Dtool_Ns0bKHGg 0 5 3 mat 1 2913  5 scale 1 2861  5 shear 1 2861  3 hpr 1 2861  9 translate 1 2861  
1604 14 Dtool_Ns0b0nyg 0 6 1085 2833 0 14 Dtool_Ns0b0nyg 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2924  5 scale 1 2863  5 shear 1 2863  3 hpr 1 2863  2 cs 1 2790  
1605 14 Dtool_Ns0bWfBa 0 6 1085 2833 0 14 Dtool_Ns0bWfBa 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2924  5 scale 1 2863  5 shear 1 2863  3 hpr 1 2863  
1606 14 Dtool_Ns0bSuaq 0 6 1085 2833 0 14 Dtool_Ns0bSuaq 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2903  5 scale 1 2860  5 shear 1 2860  3 hpr 1 2860  2 cs 1 2790  
1607 14 Dtool_Ns0b7noj 0 6 1085 2833 0 14 Dtool_Ns0b7noj 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2903  5 scale 1 2860  5 shear 1 2860  3 hpr 1 2860  
1608 14 Dtool_Ns0bBw_r 0 6 1085 2833 0 14 Dtool_Ns0bBw_r 0 6 3 mat 1 2928  5 scale 1 2863  5 shear 1 2863  3 hpr 1 2863  9 translate 1 2863  2 cs 1 2790  
1609 14 Dtool_Ns0b1_T6 0 6 1085 2833 0 14 Dtool_Ns0b1_T6 0 5 3 mat 1 2928  5 scale 1 2863  5 shear 1 2863  3 hpr 1 2863  9 translate 1 2863  
1610 14 Dtool_Ns0b3x61 0 6 1085 2833 0 14 Dtool_Ns0b3x61 0 6 3 mat 1 2907  5 scale 1 2860  5 shear 1 2860  3 hpr 1 2860  9 translate 1 2860  2 cs 1 2790  
1611 14 Dtool_Ns0bGpPE 0 6 1085 2833 0 14 Dtool_Ns0bGpPE 0 5 3 mat 1 2907  5 scale 1 2860  5 shear 1 2860  3 hpr 1 2860  9 translate 1 2860  
1612 14 Dtool_Ns0b2peC 0 7 1086 2863 1886 14 Dtool_Ns0b2peC 505 ////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 old_hpr 1 2864  
1613 14 Dtool_Ns0bI0gC 0 7 1086 2860 1816 14 Dtool_Ns0bI0gC 505 ////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 old_hpr 1 2861  
1614 14 Dtool_Ns0bPgfc 0 7 1087 2863 1886 14 Dtool_Ns0bPgfc 535 ////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 new_hpr 1 2864  
1615 14 Dtool_Ns0bZEhc 0 7 1087 2860 1816 14 Dtool_Ns0bZEhc 535 ////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 new_hpr 1 2861  
181
2781 11 MathNumbers 0 141313 11 MathNumbers 11 MathNumbers 0 0 0 0 1616 0 0 0 0 0 0 0 0

2782 10 LVecBase2f 0 26625 10 LVecBase2f 10 LVecBase2f 0 0 0 1 1619 1627 0 58 1620 1621 1622 1623 1624 1625 1626 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2783 10 LVecBase2d 0 26625 10 LVecBase2d 10 LVecBase2d 0 0 0 1 1679 1687 0 58 1680 1681 1682 1683 1684 1685 1686 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2784 9 LVector2f 0 141313 9 LVector2f 9 LVector2f 0 0 0 1 1739 1756 0 16 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 0 0 1 0 2782 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2785 9 LVector2d 0 141313 9 LVector2d 9 LVector2d 0 0 0 1 1757 1774 0 16 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 0 0 1 0 2783 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2786 8 LPoint2f 0 141313 8 LPoint2f 8 LPoint2f 0 0 0 1 1775 1790 0 14 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 0 0 1 0 2782 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2787 8 LPoint2d 0 141313 8 LPoint2d 8 LPoint2d 0 0 0 1 1791 1806 0 14 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 0 0 1 0 2783 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2788 10 LVecBase3f 0 26625 10 LVecBase3f 10 LVecBase3f 0 0 0 1 1807 1816 0 68 1808 1809 1810 1811 1812 1813 1814 1815 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2789 10 LVecBase3d 0 26625 10 LVecBase3d 10 LVecBase3d 0 0 0 1 1877 1886 0 68 1878 1879 1880 1881 1882 1883 1884 1885 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2790 16 CoordinateSystem 0 532481 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

2791 9 LVector3f 0 141313 9 LVector3f 9 LVector3f 0 0 0 1 1951 1984 0 32 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 0 0 1 0 2788 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2792 9 LVector3d 0 141313 9 LVector3d 9 LVector3d 0 0 0 1 1985 2018 0 32 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 0 0 1 0 2789 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2793 8 LPoint3f 0 141313 8 LPoint3f 8 LPoint3f 0 0 0 1 2019 2041 0 21 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 0 0 1 0 2788 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2794 8 LPoint3d 0 141313 8 LPoint3d 8 LPoint3d 0 0 0 1 2042 2064 0 21 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 0 0 1 0 2789 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2795 10 LVecBase4f 0 26625 10 LVecBase4f 10 LVecBase4f 0 0 0 1 2065 2075 0 66 2066 2067 2068 2069 2070 2071 2072 2073 2074 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2796 19 UnalignedLVecBase4f 0 141313 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 1 2133 2142 0 8 2134 2135 2136 2137 2138 2139 2140 2141 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

2797 10 LVecBase4d 0 26625 10 LVecBase4d 10 LVecBase4d 0 0 0 1 2143 2153 0 66 2144 2145 2146 2147 2148 2149 2150 2151 2152 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2798 19 UnalignedLVecBase4d 0 141313 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 1 2211 2220 0 8 2212 2213 2214 2215 2216 2217 2218 2219 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

2799 9 LVector4f 0 141313 9 LVector4f 9 LVector4f 0 0 0 1 2221 2238 0 16 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 0 0 1 0 2795 0 0 0 0 710
// Filename: lvector4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

2800 9 LVector4d 0 141313 9 LVector4d 9 LVector4d 0 0 0 1 2239 2256 0 16 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 0 0 1 0 2797 0 0 0 0 710
// Filename: lvector4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

2801 8 LPoint4f 0 141313 8 LPoint4f 8 LPoint4f 0 0 0 1 2257 2274 0 16 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 0 0 1 0 2795 0 0 0 0 707
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2802 8 LPoint4d 0 141313 8 LPoint4d 8 LPoint4d 0 0 0 1 2275 2292 0 16 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 0 0 1 0 2797 0 0 0 0 707
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2803 9 LMatrix3f 0 141313 9 LMatrix3f 9 LMatrix3f 0 0 0 1 2300 2373 0 72 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 4 2962 2963 2964 2965 0 0 0 2 2804 2805 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2804 3 Row 0 403457 14 LMatrix3f::Row 14 LMatrix3f::Row 2803 0 0 0 2296 0 3 2293 2294 2295 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2805 4 CRow 0 403457 15 LMatrix3f::CRow 15 LMatrix3f::CRow 2803 0 0 0 2299 0 2 2297 2298 0 0 0 0 0 0

2806 9 LMatrix4f 0 141313 9 LMatrix4f 9 LMatrix4f 0 0 0 1 2383 2466 0 82 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 3 2966 2967 2968 0 0 0 2 2807 2808 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2807 3 Row 0 403457 14 LMatrix4f::Row 14 LMatrix4f::Row 2806 0 0 0 2379 0 3 2376 2377 2378 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2808 4 CRow 0 403457 15 LMatrix4f::CRow 15 LMatrix4f::CRow 2806 0 0 0 2382 0 2 2380 2381 0 0 0 0 0 0

2809 18 UnalignedLMatrix4f 0 141313 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 1 2467 2474 0 6 2468 2469 2470 2471 2472 2473 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

2810 9 LMatrix3d 0 141313 9 LMatrix3d 9 LMatrix3d 0 0 0 1 2482 2555 0 72 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 4 2969 2970 2971 2972 0 0 0 2 2811 2812 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2811 3 Row 0 403457 14 LMatrix3d::Row 14 LMatrix3d::Row 2810 0 0 0 2478 0 3 2475 2476 2477 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2812 4 CRow 0 403457 15 LMatrix3d::CRow 15 LMatrix3d::CRow 2810 0 0 0 2481 0 2 2479 2480 0 0 0 0 0 0

2813 9 LMatrix4d 0 141313 9 LMatrix4d 9 LMatrix4d 0 0 0 1 2563 2646 0 82 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 3 2973 2974 2975 0 0 0 2 2814 2815 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2814 3 Row 0 403457 14 LMatrix4d::Row 14 LMatrix4d::Row 2813 0 0 0 2559 0 3 2556 2557 2558 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2815 4 CRow 0 403457 15 LMatrix4d::CRow 15 LMatrix4d::CRow 2813 0 0 0 2562 0 2 2560 2561 0 0 0 0 0 0

2816 18 UnalignedLMatrix4d 0 141313 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 1 2647 2654 0 6 2648 2649 2650 2651 2652 2653 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

2817 12 LQuaternionf 0 141313 12 LQuaternionf 12 LQuaternionf 0 0 0 1 2667 2714 0 46 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 0 0 1 0 2795 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2818 12 LQuaterniond 0 141313 12 LQuaterniond 12 LQuaterniond 0 0 0 1 2715 2762 0 46 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 0 0 1 0 2797 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2819 10 LRotationf 0 141313 10 LRotationf 10 LRotationf 0 0 0 1 2763 2767 0 3 2764 2765 2766 0 0 1 0 2817 0 0 0 0 738
// Filename: lrotation_src.h
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

2820 10 LRotationd 0 141313 10 LRotationd 10 LRotationd 0 0 0 1 2768 2772 0 3 2769 2770 2771 0 0 1 0 2818 0 0 0 0 738
// Filename: lrotation_src.h
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

2821 13 LOrientationf 0 141313 13 LOrientationf 13 LOrientationf 0 0 0 1 2773 2776 0 2 2774 2775 0 0 1 0 2817 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

2822 13 LOrientationd 0 141313 13 LOrientationd 13 LOrientationd 0 0 0 1 2777 2780 0 2 2778 2779 0 0 1 0 2818 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

2823 12 LVecBase2f * 0 8576 12 LVecBase2f * 12 LVecBase2f * 0 0 2782 0 0 0 0 0 0 0 0 0 0

2824 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 2825 0 0 0 0 0 0 0 0 0 0

2825 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 2782 0 0 0 0 0 0 0 0 0 0

2826 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2827 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2828 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2829 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 2830 0 0 0 0 0 0 0 0 0 0

2830 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

2831 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2832 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2833 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

2834 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 2835 0 0 0 0 0 0 0 0 0 0

2835 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

2836 23 ChecksumHashGenerator * 0 8576 23 ChecksumHashGenerator * 23 ChecksumHashGenerator * 0 0 2837 0 0 0 0 0 0 0 0 0 0

2837 21 ChecksumHashGenerator 0 2048 21 ChecksumHashGenerator 21 ChecksumHashGenerator 0 0 0 0 0 0 0 0 0 0 0 0 339
////////////////////////////////////////////////////////////////////
//       Class : ChecksumHashGenerator
// Description : This is a specific kind of HashGenerator that simply
//               adds up all of the ints.  Nothing fancy, and pretty
//               quick.
////////////////////////////////////////////////////////////////////

2838 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 2839 0 0 0 0 0 0 0 0 0 0

2839 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

2840 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 2841 0 0 0 0 0 0 0 0 0 0

2841 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

2842 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

2843 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 2842 0 0 0 0 0 0 0 0 0 0

2844 12 LVecBase2d * 0 8576 12 LVecBase2d * 12 LVecBase2d * 0 0 2783 0 0 0 0 0 0 0 0 0 0

2845 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2846 0 0 0 0 0 0 0 0 0 0

2846 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2783 0 0 0 0 0 0 0 0 0 0

2847 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

2848 11 LVector2f * 0 8576 11 LVector2f * 11 LVector2f * 0 0 2784 0 0 0 0 0 0 0 0 0 0

2849 17 LVector2f const * 0 8576 17 LVector2f const * 17 LVector2f const * 0 0 2850 0 0 0 0 0 0 0 0 0 0

2850 15 LVector2f const 0 8832 15 LVector2f const 15 LVector2f const 0 0 2784 0 0 0 0 0 0 0 0 0 0

2851 11 LVector2d * 0 8576 11 LVector2d * 11 LVector2d * 0 0 2785 0 0 0 0 0 0 0 0 0 0

2852 17 LVector2d const * 0 8576 17 LVector2d const * 17 LVector2d const * 0 0 2853 0 0 0 0 0 0 0 0 0 0

2853 15 LVector2d const 0 8832 15 LVector2d const 15 LVector2d const 0 0 2785 0 0 0 0 0 0 0 0 0 0

2854 10 LPoint2f * 0 8576 10 LPoint2f * 10 LPoint2f * 0 0 2786 0 0 0 0 0 0 0 0 0 0

2855 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 2856 0 0 0 0 0 0 0 0 0 0

2856 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 2786 0 0 0 0 0 0 0 0 0 0

2857 10 LPoint2d * 0 8576 10 LPoint2d * 10 LPoint2d * 0 0 2787 0 0 0 0 0 0 0 0 0 0

2858 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 2859 0 0 0 0 0 0 0 0 0 0

2859 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 2787 0 0 0 0 0 0 0 0 0 0

2860 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 2788 0 0 0 0 0 0 0 0 0 0

2861 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 2862 0 0 0 0 0 0 0 0 0 0

2862 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 2788 0 0 0 0 0 0 0 0 0 0

2863 12 LVecBase3d * 0 8576 12 LVecBase3d * 12 LVecBase3d * 0 0 2789 0 0 0 0 0 0 0 0 0 0

2864 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2865 0 0 0 0 0 0 0 0 0 0

2865 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2789 0 0 0 0 0 0 0 0 0 0

2866 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 2791 0 0 0 0 0 0 0 0 0 0

2867 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 2868 0 0 0 0 0 0 0 0 0 0

2868 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 2791 0 0 0 0 0 0 0 0 0 0

2869 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 2792 0 0 0 0 0 0 0 0 0 0

2870 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 2871 0 0 0 0 0 0 0 0 0 0

2871 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 2792 0 0 0 0 0 0 0 0 0 0

2872 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 2793 0 0 0 0 0 0 0 0 0 0

2873 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 2874 0 0 0 0 0 0 0 0 0 0

2874 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 2793 0 0 0 0 0 0 0 0 0 0

2875 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 2794 0 0 0 0 0 0 0 0 0 0

2876 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 2877 0 0 0 0 0 0 0 0 0 0

2877 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 2794 0 0 0 0 0 0 0 0 0 0

2878 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 2795 0 0 0 0 0 0 0 0 0 0

2879 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2880 0 0 0 0 0 0 0 0 0 0

2880 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2795 0 0 0 0 0 0 0 0 0 0

2881 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 2882 0 0 0 0 0 0 0 0 0 0

2882 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 2796 0 0 0 0 0 0 0 0 0 0

2883 21 UnalignedLVecBase4f * 0 8576 21 UnalignedLVecBase4f * 21 UnalignedLVecBase4f * 0 0 2796 0 0 0 0 0 0 0 0 0 0

2884 12 LVecBase4d * 0 8576 12 LVecBase4d * 12 LVecBase4d * 0 0 2797 0 0 0 0 0 0 0 0 0 0

2885 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2886 0 0 0 0 0 0 0 0 0 0

2886 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2797 0 0 0 0 0 0 0 0 0 0

2887 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 2888 0 0 0 0 0 0 0 0 0 0

2888 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 2798 0 0 0 0 0 0 0 0 0 0

2889 21 UnalignedLVecBase4d * 0 8576 21 UnalignedLVecBase4d * 21 UnalignedLVecBase4d * 0 0 2798 0 0 0 0 0 0 0 0 0 0

2890 11 LVector4f * 0 8576 11 LVector4f * 11 LVector4f * 0 0 2799 0 0 0 0 0 0 0 0 0 0

2891 17 LVector4f const * 0 8576 17 LVector4f const * 17 LVector4f const * 0 0 2892 0 0 0 0 0 0 0 0 0 0

2892 15 LVector4f const 0 8832 15 LVector4f const 15 LVector4f const 0 0 2799 0 0 0 0 0 0 0 0 0 0

2893 11 LVector4d * 0 8576 11 LVector4d * 11 LVector4d * 0 0 2800 0 0 0 0 0 0 0 0 0 0

2894 17 LVector4d const * 0 8576 17 LVector4d const * 17 LVector4d const * 0 0 2895 0 0 0 0 0 0 0 0 0 0

2895 15 LVector4d const 0 8832 15 LVector4d const 15 LVector4d const 0 0 2800 0 0 0 0 0 0 0 0 0 0

2896 10 LPoint4f * 0 8576 10 LPoint4f * 10 LPoint4f * 0 0 2801 0 0 0 0 0 0 0 0 0 0

2897 16 LPoint4f const * 0 8576 16 LPoint4f const * 16 LPoint4f const * 0 0 2898 0 0 0 0 0 0 0 0 0 0

2898 14 LPoint4f const 0 8832 14 LPoint4f const 14 LPoint4f const 0 0 2801 0 0 0 0 0 0 0 0 0 0

2899 10 LPoint4d * 0 8576 10 LPoint4d * 10 LPoint4d * 0 0 2802 0 0 0 0 0 0 0 0 0 0

2900 16 LPoint4d const * 0 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 2901 0 0 0 0 0 0 0 0 0 0

2901 14 LPoint4d const 0 8832 14 LPoint4d const 14 LPoint4d const 0 0 2802 0 0 0 0 0 0 0 0 0 0

2902 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 2803 0 0 0 0 0 0 0 0 0 0

2903 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 2904 0 0 0 0 0 0 0 0 0 0

2904 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 2803 0 0 0 0 0 0 0 0 0 0

2905 5 Row * 0 8576 16 LMatrix3f::Row * 16 LMatrix3f::Row * 0 0 2804 0 0 0 0 0 0 0 0 0 0

2906 6 CRow * 0 8576 17 LMatrix3f::CRow * 17 LMatrix3f::CRow * 0 0 2805 0 0 0 0 0 0 0 0 0 0

2907 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 2908 0 0 0 0 0 0 0 0 0 0

2908 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 2806 0 0 0 0 0 0 0 0 0 0

2909 11 Row const * 0 8576 22 LMatrix3f::Row const * 22 LMatrix3f::Row const * 0 0 2910 0 0 0 0 0 0 0 0 0 0

2910 9 Row const 0 8832 20 LMatrix3f::Row const 20 LMatrix3f::Row const 0 0 2804 0 0 0 0 0 0 0 0 0 0

2911 12 CRow const * 0 8576 23 LMatrix3f::CRow const * 23 LMatrix3f::CRow const * 0 0 2912 0 0 0 0 0 0 0 0 0 0

2912 10 CRow const 0 8832 21 LMatrix3f::CRow const 21 LMatrix3f::CRow const 0 0 2805 0 0 0 0 0 0 0 0 0 0

2913 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 2806 0 0 0 0 0 0 0 0 0 0

2914 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 2915 0 0 0 0 0 0 0 0 0 0

2915 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 2809 0 0 0 0 0 0 0 0 0 0

2916 5 Row * 0 8576 16 LMatrix4f::Row * 16 LMatrix4f::Row * 0 0 2807 0 0 0 0 0 0 0 0 0 0

2917 6 CRow * 0 8576 17 LMatrix4f::CRow * 17 LMatrix4f::CRow * 0 0 2808 0 0 0 0 0 0 0 0 0 0

2918 11 Row const * 0 8576 22 LMatrix4f::Row const * 22 LMatrix4f::Row const * 0 0 2919 0 0 0 0 0 0 0 0 0 0

2919 9 Row const 0 8832 20 LMatrix4f::Row const 20 LMatrix4f::Row const 0 0 2807 0 0 0 0 0 0 0 0 0 0

2920 12 CRow const * 0 8576 23 LMatrix4f::CRow const * 23 LMatrix4f::CRow const * 0 0 2921 0 0 0 0 0 0 0 0 0 0

2921 10 CRow const 0 8832 21 LMatrix4f::CRow const 21 LMatrix4f::CRow const 0 0 2808 0 0 0 0 0 0 0 0 0 0

2922 20 UnalignedLMatrix4f * 0 8576 20 UnalignedLMatrix4f * 20 UnalignedLMatrix4f * 0 0 2809 0 0 0 0 0 0 0 0 0 0

2923 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 2810 0 0 0 0 0 0 0 0 0 0

2924 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2925 0 0 0 0 0 0 0 0 0 0

2925 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2810 0 0 0 0 0 0 0 0 0 0

2926 5 Row * 0 8576 16 LMatrix3d::Row * 16 LMatrix3d::Row * 0 0 2811 0 0 0 0 0 0 0 0 0 0

2927 6 CRow * 0 8576 17 LMatrix3d::CRow * 17 LMatrix3d::CRow * 0 0 2812 0 0 0 0 0 0 0 0 0 0

2928 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2929 0 0 0 0 0 0 0 0 0 0

2929 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2813 0 0 0 0 0 0 0 0 0 0

2930 11 Row const * 0 8576 22 LMatrix3d::Row const * 22 LMatrix3d::Row const * 0 0 2931 0 0 0 0 0 0 0 0 0 0

2931 9 Row const 0 8832 20 LMatrix3d::Row const 20 LMatrix3d::Row const 0 0 2811 0 0 0 0 0 0 0 0 0 0

2932 12 CRow const * 0 8576 23 LMatrix3d::CRow const * 23 LMatrix3d::CRow const * 0 0 2933 0 0 0 0 0 0 0 0 0 0

2933 10 CRow const 0 8832 21 LMatrix3d::CRow const 21 LMatrix3d::CRow const 0 0 2812 0 0 0 0 0 0 0 0 0 0

2934 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 2813 0 0 0 0 0 0 0 0 0 0

2935 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 2936 0 0 0 0 0 0 0 0 0 0

2936 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 2816 0 0 0 0 0 0 0 0 0 0

2937 5 Row * 0 8576 16 LMatrix4d::Row * 16 LMatrix4d::Row * 0 0 2814 0 0 0 0 0 0 0 0 0 0

2938 6 CRow * 0 8576 17 LMatrix4d::CRow * 17 LMatrix4d::CRow * 0 0 2815 0 0 0 0 0 0 0 0 0 0

2939 11 Row const * 0 8576 22 LMatrix4d::Row const * 22 LMatrix4d::Row const * 0 0 2940 0 0 0 0 0 0 0 0 0 0

2940 9 Row const 0 8832 20 LMatrix4d::Row const 20 LMatrix4d::Row const 0 0 2814 0 0 0 0 0 0 0 0 0 0

2941 12 CRow const * 0 8576 23 LMatrix4d::CRow const * 23 LMatrix4d::CRow const * 0 0 2942 0 0 0 0 0 0 0 0 0 0

2942 10 CRow const 0 8832 21 LMatrix4d::CRow const 21 LMatrix4d::CRow const 0 0 2815 0 0 0 0 0 0 0 0 0 0

2943 20 UnalignedLMatrix4d * 0 8576 20 UnalignedLMatrix4d * 20 UnalignedLMatrix4d * 0 0 2816 0 0 0 0 0 0 0 0 0 0

2944 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 2817 0 0 0 0 0 0 0 0 0 0

2945 20 LQuaternionf const * 0 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 2946 0 0 0 0 0 0 0 0 0 0

2946 18 LQuaternionf const 0 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 2817 0 0 0 0 0 0 0 0 0 0

2947 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 2818 0 0 0 0 0 0 0 0 0 0

2948 20 LQuaterniond const * 0 8576 20 LQuaterniond const * 20 LQuaterniond const * 0 0 2949 0 0 0 0 0 0 0 0 0 0

2949 18 LQuaterniond const 0 8832 18 LQuaterniond const 18 LQuaterniond const 0 0 2818 0 0 0 0 0 0 0 0 0 0

2950 12 LRotationf * 0 8576 12 LRotationf * 12 LRotationf * 0 0 2819 0 0 0 0 0 0 0 0 0 0

2951 18 LRotationf const * 0 8576 18 LRotationf const * 18 LRotationf const * 0 0 2952 0 0 0 0 0 0 0 0 0 0

2952 16 LRotationf const 0 8832 16 LRotationf const 16 LRotationf const 0 0 2819 0 0 0 0 0 0 0 0 0 0

2953 12 LRotationd * 0 8576 12 LRotationd * 12 LRotationd * 0 0 2820 0 0 0 0 0 0 0 0 0 0

2954 18 LRotationd const * 0 8576 18 LRotationd const * 18 LRotationd const * 0 0 2955 0 0 0 0 0 0 0 0 0 0

2955 16 LRotationd const 0 8832 16 LRotationd const 16 LRotationd const 0 0 2820 0 0 0 0 0 0 0 0 0 0

2956 15 LOrientationf * 0 8576 15 LOrientationf * 15 LOrientationf * 0 0 2821 0 0 0 0 0 0 0 0 0 0

2957 21 LOrientationf const * 0 8576 21 LOrientationf const * 21 LOrientationf const * 0 0 2958 0 0 0 0 0 0 0 0 0 0

2958 19 LOrientationf const 0 8832 19 LOrientationf const 19 LOrientationf const 0 0 2821 0 0 0 0 0 0 0 0 0 0

2959 15 LOrientationd * 0 8576 15 LOrientationd * 15 LOrientationd * 0 0 2822 0 0 0 0 0 0 0 0 0 0

2960 21 LOrientationd const * 0 8576 21 LOrientationd const * 21 LOrientationd const * 0 0 2961 0 0 0 0 0 0 0 0 0 0

2961 19 LOrientationd const 0 8832 19 LOrientationd const 19 LOrientationd const 0 0 2822 0 0 0 0 0 0 0 0 0 0

0
0
14
2962 0 0 700 8 get_rows 4 size 7 get_row 
2963 0 0 700 8 get_cols 4 size 7 get_col 
2964 0 0 700 9 get_col2s 4 size 8 get_col2 
2965 0 0 700 9 get_row2s 4 size 8 get_row2 
2966 0 0 786 8 get_rows 4 size 7 get_row 
2967 0 0 786 8 get_cols 4 size 7 get_col 
2968 0 0 786 9 get_row3s 4 size 8 get_row3 
2969 0 0 889 8 get_rows 4 size 7 get_row 
2970 0 0 889 8 get_cols 4 size 7 get_col 
2971 0 0 889 9 get_col2s 4 size 8 get_col2 
2972 0 0 889 9 get_row2s 4 size 8 get_row2 
2973 0 0 973 8 get_rows 4 size 7 get_row 
2974 0 0 973 8 get_cols 4 size 7 get_col 
2975 0 0 973 9 get_row3s 4 size 8 get_row3 
