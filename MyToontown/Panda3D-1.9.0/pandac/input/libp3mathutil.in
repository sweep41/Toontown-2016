1399435456
2 2
13 libp3mathutil 4 LL_p 4 core 
551
669 5 clear 0 4 1222 59 PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear 0 1 13 0
80
inline void ::PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear(void);

670 6 output 0 4 1222 60 PointerToBase< ReferenceCountedVector< LMatrix3d > >::output 0 1 14 0
88
void ::PointerToBase< ReferenceCountedVector< LMatrix3d > >::output(ostream &out) const;

671 19 ~PointerToArrayBase 0 4 1221 52 PointerToArrayBase< LMatrix3d >::~PointerToArrayBase 0 0 0
68
inline ::PointerToArrayBase< LMatrix3d >::~PointerToArrayBase(void);

672 19 ConstPointerToArray 0 4 1220 53 ConstPointerToArray< LMatrix3d >::ConstPointerToArray 0 3 1 2 3 0
312
inline ::ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PointerToArray< LMatrix3d > const &copy);
inline ::ConstPointerToArray< LMatrix3d >::ConstPointerToArray(ConstPointerToArray< LMatrix3d > const &copy);
inline ::ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PyObject *self, PyObject *source);

673 4 size 0 4 1220 38 ConstPointerToArray< LMatrix3d >::size 0 1 4 0
73
inline unsigned int ::ConstPointerToArray< LMatrix3d >::size(void) const;

674 11 get_element 0 4 1220 45 ConstPointerToArray< LMatrix3d >::get_element 0 1 5 0
94
inline LMatrix3d const &::ConstPointerToArray< LMatrix3d >::get_element(unsigned int n) const;

675 11 __getitem__ 0 4 1220 45 ConstPointerToArray< LMatrix3d >::__getitem__ 0 1 6 0
94
inline LMatrix3d const &::ConstPointerToArray< LMatrix3d >::__getitem__(unsigned int n) const;

676 8 get_data 0 4 1220 42 ConstPointerToArray< LMatrix3d >::get_data 0 1 7 0
85
inline basic_string< char > ::ConstPointerToArray< LMatrix3d >::get_data(void) const;

677 11 get_subdata 0 4 1220 45 ConstPointerToArray< LMatrix3d >::get_subdata 0 1 8 0
118
inline basic_string< char > ::ConstPointerToArray< LMatrix3d >::get_subdata(unsigned int n, unsigned int count) const;

678 13 get_ref_count 0 4 1220 47 ConstPointerToArray< LMatrix3d >::get_ref_count 0 1 9 0
73
inline int ::ConstPointerToArray< LMatrix3d >::get_ref_count(void) const;

679 18 get_node_ref_count 0 4 1220 52 ConstPointerToArray< LMatrix3d >::get_node_ref_count 0 1 10 0
78
inline int ::ConstPointerToArray< LMatrix3d >::get_node_ref_count(void) const;

680 13 __getbuffer__ 0 4 1220 47 ConstPointerToArray< LMatrix3d >::__getbuffer__ 0 1 11 0
104
int ::ConstPointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

681 17 __releasebuffer__ 0 4 1220 51 ConstPointerToArray< LMatrix3d >::__releasebuffer__ 0 1 12 0
98
void ::ConstPointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

682 20 ~ConstPointerToArray 0 4 1220 54 ConstPointerToArray< LMatrix3d >::~ConstPointerToArray 0 0 0
63
::ConstPointerToArray< LMatrix3d >::~ConstPointerToArray(void);

683 5 clear 0 4 1226 59 PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear 0 1 27 0
80
inline void ::PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear(void);

684 6 output 0 4 1226 60 PointerToBase< ReferenceCountedVector< LMatrix3f > >::output 0 1 28 0
88
void ::PointerToBase< ReferenceCountedVector< LMatrix3f > >::output(ostream &out) const;

685 19 ~PointerToArrayBase 0 4 1225 52 PointerToArrayBase< LMatrix3f >::~PointerToArrayBase 0 0 0
68
inline ::PointerToArrayBase< LMatrix3f >::~PointerToArrayBase(void);

686 19 ConstPointerToArray 0 4 1224 53 ConstPointerToArray< LMatrix3f >::ConstPointerToArray 0 3 15 16 17 0
312
inline ::ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PointerToArray< LMatrix3f > const &copy);
inline ::ConstPointerToArray< LMatrix3f >::ConstPointerToArray(ConstPointerToArray< LMatrix3f > const &copy);
inline ::ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PyObject *self, PyObject *source);

687 4 size 0 4 1224 38 ConstPointerToArray< LMatrix3f >::size 0 1 18 0
73
inline unsigned int ::ConstPointerToArray< LMatrix3f >::size(void) const;

688 11 get_element 0 4 1224 45 ConstPointerToArray< LMatrix3f >::get_element 0 1 19 0
94
inline LMatrix3f const &::ConstPointerToArray< LMatrix3f >::get_element(unsigned int n) const;

689 11 __getitem__ 0 4 1224 45 ConstPointerToArray< LMatrix3f >::__getitem__ 0 1 20 0
94
inline LMatrix3f const &::ConstPointerToArray< LMatrix3f >::__getitem__(unsigned int n) const;

690 8 get_data 0 4 1224 42 ConstPointerToArray< LMatrix3f >::get_data 0 1 21 0
85
inline basic_string< char > ::ConstPointerToArray< LMatrix3f >::get_data(void) const;

691 11 get_subdata 0 4 1224 45 ConstPointerToArray< LMatrix3f >::get_subdata 0 1 22 0
118
inline basic_string< char > ::ConstPointerToArray< LMatrix3f >::get_subdata(unsigned int n, unsigned int count) const;

692 13 get_ref_count 0 4 1224 47 ConstPointerToArray< LMatrix3f >::get_ref_count 0 1 23 0
73
inline int ::ConstPointerToArray< LMatrix3f >::get_ref_count(void) const;

693 18 get_node_ref_count 0 4 1224 52 ConstPointerToArray< LMatrix3f >::get_node_ref_count 0 1 24 0
78
inline int ::ConstPointerToArray< LMatrix3f >::get_node_ref_count(void) const;

694 13 __getbuffer__ 0 4 1224 47 ConstPointerToArray< LMatrix3f >::__getbuffer__ 0 1 25 0
104
int ::ConstPointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

695 17 __releasebuffer__ 0 4 1224 51 ConstPointerToArray< LMatrix3f >::__releasebuffer__ 0 1 26 0
98
void ::ConstPointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

696 20 ~ConstPointerToArray 0 4 1224 54 ConstPointerToArray< LMatrix3f >::~ConstPointerToArray 0 0 0
63
::ConstPointerToArray< LMatrix3f >::~ConstPointerToArray(void);

697 5 clear 0 4 1229 60 PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear 0 1 41 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear(void);

698 6 output 0 4 1229 61 PointerToBase< ReferenceCountedVector< LVecBase2d > >::output 0 1 42 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase2d > >::output(ostream &out) const;

699 19 ~PointerToArrayBase 0 4 1228 53 PointerToArrayBase< LVecBase2d >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase2d >::~PointerToArrayBase(void);

700 19 ConstPointerToArray 0 4 1227 54 ConstPointerToArray< LVecBase2d >::ConstPointerToArray 0 3 29 30 31 0
317
inline ::ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PointerToArray< LVecBase2d > const &copy);
inline ::ConstPointerToArray< LVecBase2d >::ConstPointerToArray(ConstPointerToArray< LVecBase2d > const &copy);
inline ::ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PyObject *self, PyObject *source);

701 4 size 0 4 1227 39 ConstPointerToArray< LVecBase2d >::size 0 1 32 0
74
inline unsigned int ::ConstPointerToArray< LVecBase2d >::size(void) const;

702 11 get_element 0 4 1227 46 ConstPointerToArray< LVecBase2d >::get_element 0 1 33 0
96
inline LVecBase2d const &::ConstPointerToArray< LVecBase2d >::get_element(unsigned int n) const;

703 11 __getitem__ 0 4 1227 46 ConstPointerToArray< LVecBase2d >::__getitem__ 0 1 34 0
96
inline LVecBase2d const &::ConstPointerToArray< LVecBase2d >::__getitem__(unsigned int n) const;

704 8 get_data 0 4 1227 43 ConstPointerToArray< LVecBase2d >::get_data 0 1 35 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase2d >::get_data(void) const;

705 11 get_subdata 0 4 1227 46 ConstPointerToArray< LVecBase2d >::get_subdata 0 1 36 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase2d >::get_subdata(unsigned int n, unsigned int count) const;

706 13 get_ref_count 0 4 1227 48 ConstPointerToArray< LVecBase2d >::get_ref_count 0 1 37 0
74
inline int ::ConstPointerToArray< LVecBase2d >::get_ref_count(void) const;

707 18 get_node_ref_count 0 4 1227 53 ConstPointerToArray< LVecBase2d >::get_node_ref_count 0 1 38 0
79
inline int ::ConstPointerToArray< LVecBase2d >::get_node_ref_count(void) const;

708 13 __getbuffer__ 0 4 1227 48 ConstPointerToArray< LVecBase2d >::__getbuffer__ 0 1 39 0
105
int ::ConstPointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

709 17 __releasebuffer__ 0 4 1227 52 ConstPointerToArray< LVecBase2d >::__releasebuffer__ 0 1 40 0
99
void ::ConstPointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

710 20 ~ConstPointerToArray 0 4 1227 55 ConstPointerToArray< LVecBase2d >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase2d >::~ConstPointerToArray(void);

711 5 clear 0 4 1232 60 PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear 0 1 55 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear(void);

712 6 output 0 4 1232 61 PointerToBase< ReferenceCountedVector< LVecBase2f > >::output 0 1 56 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase2f > >::output(ostream &out) const;

713 19 ~PointerToArrayBase 0 4 1231 53 PointerToArrayBase< LVecBase2f >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase2f >::~PointerToArrayBase(void);

714 19 ConstPointerToArray 0 4 1230 54 ConstPointerToArray< LVecBase2f >::ConstPointerToArray 0 3 43 44 45 0
317
inline ::ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PointerToArray< LVecBase2f > const &copy);
inline ::ConstPointerToArray< LVecBase2f >::ConstPointerToArray(ConstPointerToArray< LVecBase2f > const &copy);
inline ::ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PyObject *self, PyObject *source);

715 4 size 0 4 1230 39 ConstPointerToArray< LVecBase2f >::size 0 1 46 0
74
inline unsigned int ::ConstPointerToArray< LVecBase2f >::size(void) const;

716 11 get_element 0 4 1230 46 ConstPointerToArray< LVecBase2f >::get_element 0 1 47 0
96
inline LVecBase2f const &::ConstPointerToArray< LVecBase2f >::get_element(unsigned int n) const;

717 11 __getitem__ 0 4 1230 46 ConstPointerToArray< LVecBase2f >::__getitem__ 0 1 48 0
96
inline LVecBase2f const &::ConstPointerToArray< LVecBase2f >::__getitem__(unsigned int n) const;

718 8 get_data 0 4 1230 43 ConstPointerToArray< LVecBase2f >::get_data 0 1 49 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase2f >::get_data(void) const;

719 11 get_subdata 0 4 1230 46 ConstPointerToArray< LVecBase2f >::get_subdata 0 1 50 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase2f >::get_subdata(unsigned int n, unsigned int count) const;

720 13 get_ref_count 0 4 1230 48 ConstPointerToArray< LVecBase2f >::get_ref_count 0 1 51 0
74
inline int ::ConstPointerToArray< LVecBase2f >::get_ref_count(void) const;

721 18 get_node_ref_count 0 4 1230 53 ConstPointerToArray< LVecBase2f >::get_node_ref_count 0 1 52 0
79
inline int ::ConstPointerToArray< LVecBase2f >::get_node_ref_count(void) const;

722 13 __getbuffer__ 0 4 1230 48 ConstPointerToArray< LVecBase2f >::__getbuffer__ 0 1 53 0
105
int ::ConstPointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

723 17 __releasebuffer__ 0 4 1230 52 ConstPointerToArray< LVecBase2f >::__releasebuffer__ 0 1 54 0
99
void ::ConstPointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

724 20 ~ConstPointerToArray 0 4 1230 55 ConstPointerToArray< LVecBase2f >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase2f >::~ConstPointerToArray(void);

725 5 clear 0 4 1235 60 PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear 0 1 69 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear(void);

726 6 output 0 4 1235 61 PointerToBase< ReferenceCountedVector< LVecBase3d > >::output 0 1 70 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase3d > >::output(ostream &out) const;

727 19 ~PointerToArrayBase 0 4 1234 53 PointerToArrayBase< LVecBase3d >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase3d >::~PointerToArrayBase(void);

728 19 ConstPointerToArray 0 4 1233 54 ConstPointerToArray< LVecBase3d >::ConstPointerToArray 0 3 57 58 59 0
317
inline ::ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PointerToArray< LVecBase3d > const &copy);
inline ::ConstPointerToArray< LVecBase3d >::ConstPointerToArray(ConstPointerToArray< LVecBase3d > const &copy);
inline ::ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PyObject *self, PyObject *source);

729 4 size 0 4 1233 39 ConstPointerToArray< LVecBase3d >::size 0 1 60 0
74
inline unsigned int ::ConstPointerToArray< LVecBase3d >::size(void) const;

730 11 get_element 0 4 1233 46 ConstPointerToArray< LVecBase3d >::get_element 0 1 61 0
96
inline LVecBase3d const &::ConstPointerToArray< LVecBase3d >::get_element(unsigned int n) const;

731 11 __getitem__ 0 4 1233 46 ConstPointerToArray< LVecBase3d >::__getitem__ 0 1 62 0
96
inline LVecBase3d const &::ConstPointerToArray< LVecBase3d >::__getitem__(unsigned int n) const;

732 8 get_data 0 4 1233 43 ConstPointerToArray< LVecBase3d >::get_data 0 1 63 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase3d >::get_data(void) const;

733 11 get_subdata 0 4 1233 46 ConstPointerToArray< LVecBase3d >::get_subdata 0 1 64 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase3d >::get_subdata(unsigned int n, unsigned int count) const;

734 13 get_ref_count 0 4 1233 48 ConstPointerToArray< LVecBase3d >::get_ref_count 0 1 65 0
74
inline int ::ConstPointerToArray< LVecBase3d >::get_ref_count(void) const;

735 18 get_node_ref_count 0 4 1233 53 ConstPointerToArray< LVecBase3d >::get_node_ref_count 0 1 66 0
79
inline int ::ConstPointerToArray< LVecBase3d >::get_node_ref_count(void) const;

736 13 __getbuffer__ 0 4 1233 48 ConstPointerToArray< LVecBase3d >::__getbuffer__ 0 1 67 0
105
int ::ConstPointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

737 17 __releasebuffer__ 0 4 1233 52 ConstPointerToArray< LVecBase3d >::__releasebuffer__ 0 1 68 0
99
void ::ConstPointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

738 20 ~ConstPointerToArray 0 4 1233 55 ConstPointerToArray< LVecBase3d >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase3d >::~ConstPointerToArray(void);

739 5 clear 0 4 1238 60 PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear 0 1 83 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear(void);

740 6 output 0 4 1238 61 PointerToBase< ReferenceCountedVector< LVecBase3f > >::output 0 1 84 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase3f > >::output(ostream &out) const;

741 19 ~PointerToArrayBase 0 4 1237 53 PointerToArrayBase< LVecBase3f >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase3f >::~PointerToArrayBase(void);

742 19 ConstPointerToArray 0 4 1236 54 ConstPointerToArray< LVecBase3f >::ConstPointerToArray 0 3 71 72 73 0
317
inline ::ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PointerToArray< LVecBase3f > const &copy);
inline ::ConstPointerToArray< LVecBase3f >::ConstPointerToArray(ConstPointerToArray< LVecBase3f > const &copy);
inline ::ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PyObject *self, PyObject *source);

743 4 size 0 4 1236 39 ConstPointerToArray< LVecBase3f >::size 0 1 74 0
74
inline unsigned int ::ConstPointerToArray< LVecBase3f >::size(void) const;

744 11 get_element 0 4 1236 46 ConstPointerToArray< LVecBase3f >::get_element 0 1 75 0
96
inline LVecBase3f const &::ConstPointerToArray< LVecBase3f >::get_element(unsigned int n) const;

745 11 __getitem__ 0 4 1236 46 ConstPointerToArray< LVecBase3f >::__getitem__ 0 1 76 0
96
inline LVecBase3f const &::ConstPointerToArray< LVecBase3f >::__getitem__(unsigned int n) const;

746 8 get_data 0 4 1236 43 ConstPointerToArray< LVecBase3f >::get_data 0 1 77 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase3f >::get_data(void) const;

747 11 get_subdata 0 4 1236 46 ConstPointerToArray< LVecBase3f >::get_subdata 0 1 78 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase3f >::get_subdata(unsigned int n, unsigned int count) const;

748 13 get_ref_count 0 4 1236 48 ConstPointerToArray< LVecBase3f >::get_ref_count 0 1 79 0
74
inline int ::ConstPointerToArray< LVecBase3f >::get_ref_count(void) const;

749 18 get_node_ref_count 0 4 1236 53 ConstPointerToArray< LVecBase3f >::get_node_ref_count 0 1 80 0
79
inline int ::ConstPointerToArray< LVecBase3f >::get_node_ref_count(void) const;

750 13 __getbuffer__ 0 4 1236 48 ConstPointerToArray< LVecBase3f >::__getbuffer__ 0 1 81 0
105
int ::ConstPointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

751 17 __releasebuffer__ 0 4 1236 52 ConstPointerToArray< LVecBase3f >::__releasebuffer__ 0 1 82 0
99
void ::ConstPointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

752 20 ~ConstPointerToArray 0 4 1236 55 ConstPointerToArray< LVecBase3f >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase3f >::~ConstPointerToArray(void);

753 5 clear 0 4 1241 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear 0 1 97 0
89
inline void ::PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear(void);

754 6 output 0 4 1241 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output 0 1 98 0
97
void ::PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output(ostream &out) const;

755 19 ~PointerToArrayBase 0 4 1240 61 PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase 0 0 0
77
inline ::PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase(void);

756 19 ConstPointerToArray 0 4 1239 62 ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray 0 3 85 86 87 0
357
inline ::ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
inline ::ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4d > const &copy);
inline ::ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PyObject *self, PyObject *source);

757 4 size 0 4 1239 47 ConstPointerToArray< UnalignedLMatrix4d >::size 0 1 88 0
82
inline unsigned int ::ConstPointerToArray< UnalignedLMatrix4d >::size(void) const;

758 11 get_element 0 4 1239 54 ConstPointerToArray< UnalignedLMatrix4d >::get_element 0 1 89 0
112
inline UnalignedLMatrix4d const &::ConstPointerToArray< UnalignedLMatrix4d >::get_element(unsigned int n) const;

759 11 __getitem__ 0 4 1239 54 ConstPointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 90 0
112
inline UnalignedLMatrix4d const &::ConstPointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned int n) const;

760 8 get_data 0 4 1239 51 ConstPointerToArray< UnalignedLMatrix4d >::get_data 0 1 91 0
94
inline basic_string< char > ::ConstPointerToArray< UnalignedLMatrix4d >::get_data(void) const;

761 11 get_subdata 0 4 1239 54 ConstPointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 92 0
127
inline basic_string< char > ::ConstPointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned int n, unsigned int count) const;

762 13 get_ref_count 0 4 1239 56 ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 93 0
82
inline int ::ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

763 18 get_node_ref_count 0 4 1239 61 ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 94 0
87
inline int ::ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

764 13 __getbuffer__ 0 4 1239 56 ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 95 0
113
int ::ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

765 17 __releasebuffer__ 0 4 1239 60 ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 96 0
107
void ::ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

766 20 ~ConstPointerToArray 0 4 1239 63 ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray 0 0 0
72
::ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray(void);

767 5 clear 0 4 1244 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear 0 1 111 0
89
inline void ::PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear(void);

768 6 output 0 4 1244 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output 0 1 112 0
97
void ::PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output(ostream &out) const;

769 19 ~PointerToArrayBase 0 4 1243 61 PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase 0 0 0
77
inline ::PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase(void);

770 19 ConstPointerToArray 0 4 1242 62 ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray 0 3 99 100 101 0
357
inline ::ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
inline ::ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4f > const &copy);
inline ::ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PyObject *self, PyObject *source);

771 4 size 0 4 1242 47 ConstPointerToArray< UnalignedLMatrix4f >::size 0 1 102 0
82
inline unsigned int ::ConstPointerToArray< UnalignedLMatrix4f >::size(void) const;

772 11 get_element 0 4 1242 54 ConstPointerToArray< UnalignedLMatrix4f >::get_element 0 1 103 0
112
inline UnalignedLMatrix4f const &::ConstPointerToArray< UnalignedLMatrix4f >::get_element(unsigned int n) const;

773 11 __getitem__ 0 4 1242 54 ConstPointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 104 0
112
inline UnalignedLMatrix4f const &::ConstPointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned int n) const;

774 8 get_data 0 4 1242 51 ConstPointerToArray< UnalignedLMatrix4f >::get_data 0 1 105 0
94
inline basic_string< char > ::ConstPointerToArray< UnalignedLMatrix4f >::get_data(void) const;

775 11 get_subdata 0 4 1242 54 ConstPointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 106 0
127
inline basic_string< char > ::ConstPointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned int n, unsigned int count) const;

776 13 get_ref_count 0 4 1242 56 ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 107 0
82
inline int ::ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

777 18 get_node_ref_count 0 4 1242 61 ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 108 0
87
inline int ::ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

778 13 __getbuffer__ 0 4 1242 56 ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 109 0
113
int ::ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

779 17 __releasebuffer__ 0 4 1242 60 ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 110 0
107
void ::ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

780 20 ~ConstPointerToArray 0 4 1242 63 ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray 0 0 0
72
::ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray(void);

781 5 clear 0 4 1247 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear 0 1 125 0
90
inline void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear(void);

782 6 output 0 4 1247 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output 0 1 126 0
98
void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output(ostream &out) const;

783 19 ~PointerToArrayBase 0 4 1246 62 PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase 0 0 0
78
inline ::PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase(void);

784 19 ConstPointerToArray 0 4 1245 63 ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray 0 3 113 114 115 0
362
inline ::ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
inline ::ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4d > const &copy);
inline ::ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PyObject *self, PyObject *source);

785 4 size 0 4 1245 48 ConstPointerToArray< UnalignedLVecBase4d >::size 0 1 116 0
83
inline unsigned int ::ConstPointerToArray< UnalignedLVecBase4d >::size(void) const;

786 11 get_element 0 4 1245 55 ConstPointerToArray< UnalignedLVecBase4d >::get_element 0 1 117 0
114
inline UnalignedLVecBase4d const &::ConstPointerToArray< UnalignedLVecBase4d >::get_element(unsigned int n) const;

787 11 __getitem__ 0 4 1245 55 ConstPointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 118 0
114
inline UnalignedLVecBase4d const &::ConstPointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned int n) const;

788 8 get_data 0 4 1245 52 ConstPointerToArray< UnalignedLVecBase4d >::get_data 0 1 119 0
95
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4d >::get_data(void) const;

789 11 get_subdata 0 4 1245 55 ConstPointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 120 0
128
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned int n, unsigned int count) const;

790 13 get_ref_count 0 4 1245 57 ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 121 0
83
inline int ::ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

791 18 get_node_ref_count 0 4 1245 62 ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 122 0
88
inline int ::ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

792 13 __getbuffer__ 0 4 1245 57 ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 123 0
114
int ::ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

793 17 __releasebuffer__ 0 4 1245 61 ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 124 0
108
void ::ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

794 20 ~ConstPointerToArray 0 4 1245 64 ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray 0 0 0
73
::ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray(void);

795 5 clear 0 4 1250 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear 0 1 139 0
90
inline void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear(void);

796 6 output 0 4 1250 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output 0 1 140 0
98
void ::PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output(ostream &out) const;

797 19 ~PointerToArrayBase 0 4 1249 62 PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase 0 0 0
78
inline ::PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase(void);

798 19 ConstPointerToArray 0 4 1248 63 ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray 0 3 127 128 129 0
362
inline ::ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
inline ::ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4f > const &copy);
inline ::ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PyObject *self, PyObject *source);

799 4 size 0 4 1248 48 ConstPointerToArray< UnalignedLVecBase4f >::size 0 1 130 0
83
inline unsigned int ::ConstPointerToArray< UnalignedLVecBase4f >::size(void) const;

800 11 get_element 0 4 1248 55 ConstPointerToArray< UnalignedLVecBase4f >::get_element 0 1 131 0
114
inline UnalignedLVecBase4f const &::ConstPointerToArray< UnalignedLVecBase4f >::get_element(unsigned int n) const;

801 11 __getitem__ 0 4 1248 55 ConstPointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 132 0
114
inline UnalignedLVecBase4f const &::ConstPointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned int n) const;

802 8 get_data 0 4 1248 52 ConstPointerToArray< UnalignedLVecBase4f >::get_data 0 1 133 0
95
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4f >::get_data(void) const;

803 11 get_subdata 0 4 1248 55 ConstPointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 134 0
128
inline basic_string< char > ::ConstPointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned int n, unsigned int count) const;

804 13 get_ref_count 0 4 1248 57 ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 135 0
83
inline int ::ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

805 18 get_node_ref_count 0 4 1248 62 ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 136 0
88
inline int ::ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

806 13 __getbuffer__ 0 4 1248 57 ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 137 0
114
int ::ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

807 17 __releasebuffer__ 0 4 1248 61 ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 138 0
108
void ::ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

808 20 ~ConstPointerToArray 0 4 1248 64 ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray 0 0 0
73
::ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray(void);

809 14 PointerToArray 0 4 1251 43 PointerToArray< LMatrix3d >::PointerToArray 0 4 141 142 143 144 0
300
inline ::PointerToArray< LMatrix3d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LMatrix3d const *)(0)))));
inline ::PointerToArray< LMatrix3d >::PointerToArray(PointerToArray< LMatrix3d > const &copy);
::PointerToArray< LMatrix3d >::PointerToArray(PyObject *self, PyObject *source);

810 11 empty_array 0 4 1251 40 PointerToArray< LMatrix3d >::empty_array 0 2 145 146 0
172
static inline PointerToArray< LMatrix3d > ::PointerToArray< LMatrix3d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LMatrix3d const *)(0)))));

811 4 size 0 4 1251 33 PointerToArray< LMatrix3d >::size 0 1 147 0
68
inline unsigned int ::PointerToArray< LMatrix3d >::size(void) const;

812 9 push_back 0 4 1251 38 PointerToArray< LMatrix3d >::push_back 0 1 148 0
73
inline void ::PointerToArray< LMatrix3d >::push_back(LMatrix3d const &x);

813 8 pop_back 0 4 1251 37 PointerToArray< LMatrix3d >::pop_back 0 1 149 0
58
inline void ::PointerToArray< LMatrix3d >::pop_back(void);

814 11 get_element 0 4 1251 40 PointerToArray< LMatrix3d >::get_element 0 1 150 0
89
inline LMatrix3d const &::PointerToArray< LMatrix3d >::get_element(unsigned int n) const;

815 11 set_element 0 4 1251 40 PointerToArray< LMatrix3d >::set_element 0 1 151 0
95
inline void ::PointerToArray< LMatrix3d >::set_element(unsigned int n, LMatrix3d const &value);

816 11 __getitem__ 0 4 1251 40 PointerToArray< LMatrix3d >::__getitem__ 0 1 152 0
89
inline LMatrix3d const &::PointerToArray< LMatrix3d >::__getitem__(unsigned int n) const;

817 11 __setitem__ 0 4 1251 40 PointerToArray< LMatrix3d >::__setitem__ 0 1 153 0
95
inline void ::PointerToArray< LMatrix3d >::__setitem__(unsigned int n, LMatrix3d const &value);

818 8 get_data 0 4 1251 37 PointerToArray< LMatrix3d >::get_data 0 1 154 0
80
inline basic_string< char > ::PointerToArray< LMatrix3d >::get_data(void) const;

819 8 set_data 0 4 1251 37 PointerToArray< LMatrix3d >::set_data 0 1 155 0
86
inline void ::PointerToArray< LMatrix3d >::set_data(basic_string< char > const &data);

820 11 get_subdata 0 4 1251 40 PointerToArray< LMatrix3d >::get_subdata 0 1 156 0
113
inline basic_string< char > ::PointerToArray< LMatrix3d >::get_subdata(unsigned int n, unsigned int count) const;

821 11 set_subdata 0 4 1251 40 PointerToArray< LMatrix3d >::set_subdata 0 1 157 0
125
inline void ::PointerToArray< LMatrix3d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

822 13 get_ref_count 0 4 1251 42 PointerToArray< LMatrix3d >::get_ref_count 0 1 158 0
68
inline int ::PointerToArray< LMatrix3d >::get_ref_count(void) const;

823 18 get_node_ref_count 0 4 1251 47 PointerToArray< LMatrix3d >::get_node_ref_count 0 1 159 0
73
inline int ::PointerToArray< LMatrix3d >::get_node_ref_count(void) const;

824 13 __getbuffer__ 0 4 1251 42 PointerToArray< LMatrix3d >::__getbuffer__ 0 1 160 0
93
int ::PointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

825 17 __releasebuffer__ 0 4 1251 46 PointerToArray< LMatrix3d >::__releasebuffer__ 0 1 161 0
93
void ::PointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

826 15 ~PointerToArray 0 4 1251 44 PointerToArray< LMatrix3d >::~PointerToArray 0 0 0
53
::PointerToArray< LMatrix3d >::~PointerToArray(void);

827 14 PointerToArray 0 4 1252 43 PointerToArray< LMatrix3f >::PointerToArray 0 4 162 163 164 165 0
300
inline ::PointerToArray< LMatrix3f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LMatrix3f const *)(0)))));
inline ::PointerToArray< LMatrix3f >::PointerToArray(PointerToArray< LMatrix3f > const &copy);
::PointerToArray< LMatrix3f >::PointerToArray(PyObject *self, PyObject *source);

828 11 empty_array 0 4 1252 40 PointerToArray< LMatrix3f >::empty_array 0 2 166 167 0
172
static inline PointerToArray< LMatrix3f > ::PointerToArray< LMatrix3f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LMatrix3f const *)(0)))));

829 4 size 0 4 1252 33 PointerToArray< LMatrix3f >::size 0 1 168 0
68
inline unsigned int ::PointerToArray< LMatrix3f >::size(void) const;

830 9 push_back 0 4 1252 38 PointerToArray< LMatrix3f >::push_back 0 1 169 0
73
inline void ::PointerToArray< LMatrix3f >::push_back(LMatrix3f const &x);

831 8 pop_back 0 4 1252 37 PointerToArray< LMatrix3f >::pop_back 0 1 170 0
58
inline void ::PointerToArray< LMatrix3f >::pop_back(void);

832 11 get_element 0 4 1252 40 PointerToArray< LMatrix3f >::get_element 0 1 171 0
89
inline LMatrix3f const &::PointerToArray< LMatrix3f >::get_element(unsigned int n) const;

833 11 set_element 0 4 1252 40 PointerToArray< LMatrix3f >::set_element 0 1 172 0
95
inline void ::PointerToArray< LMatrix3f >::set_element(unsigned int n, LMatrix3f const &value);

834 11 __getitem__ 0 4 1252 40 PointerToArray< LMatrix3f >::__getitem__ 0 1 173 0
89
inline LMatrix3f const &::PointerToArray< LMatrix3f >::__getitem__(unsigned int n) const;

835 11 __setitem__ 0 4 1252 40 PointerToArray< LMatrix3f >::__setitem__ 0 1 174 0
95
inline void ::PointerToArray< LMatrix3f >::__setitem__(unsigned int n, LMatrix3f const &value);

836 8 get_data 0 4 1252 37 PointerToArray< LMatrix3f >::get_data 0 1 175 0
80
inline basic_string< char > ::PointerToArray< LMatrix3f >::get_data(void) const;

837 8 set_data 0 4 1252 37 PointerToArray< LMatrix3f >::set_data 0 1 176 0
86
inline void ::PointerToArray< LMatrix3f >::set_data(basic_string< char > const &data);

838 11 get_subdata 0 4 1252 40 PointerToArray< LMatrix3f >::get_subdata 0 1 177 0
113
inline basic_string< char > ::PointerToArray< LMatrix3f >::get_subdata(unsigned int n, unsigned int count) const;

839 11 set_subdata 0 4 1252 40 PointerToArray< LMatrix3f >::set_subdata 0 1 178 0
125
inline void ::PointerToArray< LMatrix3f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

840 13 get_ref_count 0 4 1252 42 PointerToArray< LMatrix3f >::get_ref_count 0 1 179 0
68
inline int ::PointerToArray< LMatrix3f >::get_ref_count(void) const;

841 18 get_node_ref_count 0 4 1252 47 PointerToArray< LMatrix3f >::get_node_ref_count 0 1 180 0
73
inline int ::PointerToArray< LMatrix3f >::get_node_ref_count(void) const;

842 13 __getbuffer__ 0 4 1252 42 PointerToArray< LMatrix3f >::__getbuffer__ 0 1 181 0
93
int ::PointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

843 17 __releasebuffer__ 0 4 1252 46 PointerToArray< LMatrix3f >::__releasebuffer__ 0 1 182 0
93
void ::PointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

844 15 ~PointerToArray 0 4 1252 44 PointerToArray< LMatrix3f >::~PointerToArray 0 0 0
53
::PointerToArray< LMatrix3f >::~PointerToArray(void);

845 14 PointerToArray 0 4 1253 44 PointerToArray< LVecBase2d >::PointerToArray 0 4 183 184 185 186 0
305
inline ::PointerToArray< LVecBase2d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase2d const *)(0)))));
inline ::PointerToArray< LVecBase2d >::PointerToArray(PointerToArray< LVecBase2d > const &copy);
::PointerToArray< LVecBase2d >::PointerToArray(PyObject *self, PyObject *source);

846 11 empty_array 0 4 1253 41 PointerToArray< LVecBase2d >::empty_array 0 2 187 188 0
175
static inline PointerToArray< LVecBase2d > ::PointerToArray< LVecBase2d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase2d const *)(0)))));

847 4 size 0 4 1253 34 PointerToArray< LVecBase2d >::size 0 1 189 0
69
inline unsigned int ::PointerToArray< LVecBase2d >::size(void) const;

848 9 push_back 0 4 1253 39 PointerToArray< LVecBase2d >::push_back 0 1 190 0
75
inline void ::PointerToArray< LVecBase2d >::push_back(LVecBase2d const &x);

849 8 pop_back 0 4 1253 38 PointerToArray< LVecBase2d >::pop_back 0 1 191 0
59
inline void ::PointerToArray< LVecBase2d >::pop_back(void);

850 11 get_element 0 4 1253 41 PointerToArray< LVecBase2d >::get_element 0 1 192 0
91
inline LVecBase2d const &::PointerToArray< LVecBase2d >::get_element(unsigned int n) const;

851 11 set_element 0 4 1253 41 PointerToArray< LVecBase2d >::set_element 0 1 193 0
97
inline void ::PointerToArray< LVecBase2d >::set_element(unsigned int n, LVecBase2d const &value);

852 11 __getitem__ 0 4 1253 41 PointerToArray< LVecBase2d >::__getitem__ 0 1 194 0
91
inline LVecBase2d const &::PointerToArray< LVecBase2d >::__getitem__(unsigned int n) const;

853 11 __setitem__ 0 4 1253 41 PointerToArray< LVecBase2d >::__setitem__ 0 1 195 0
97
inline void ::PointerToArray< LVecBase2d >::__setitem__(unsigned int n, LVecBase2d const &value);

854 8 get_data 0 4 1253 38 PointerToArray< LVecBase2d >::get_data 0 1 196 0
81
inline basic_string< char > ::PointerToArray< LVecBase2d >::get_data(void) const;

855 8 set_data 0 4 1253 38 PointerToArray< LVecBase2d >::set_data 0 1 197 0
87
inline void ::PointerToArray< LVecBase2d >::set_data(basic_string< char > const &data);

856 11 get_subdata 0 4 1253 41 PointerToArray< LVecBase2d >::get_subdata 0 1 198 0
114
inline basic_string< char > ::PointerToArray< LVecBase2d >::get_subdata(unsigned int n, unsigned int count) const;

857 11 set_subdata 0 4 1253 41 PointerToArray< LVecBase2d >::set_subdata 0 1 199 0
126
inline void ::PointerToArray< LVecBase2d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

858 13 get_ref_count 0 4 1253 43 PointerToArray< LVecBase2d >::get_ref_count 0 1 200 0
69
inline int ::PointerToArray< LVecBase2d >::get_ref_count(void) const;

859 18 get_node_ref_count 0 4 1253 48 PointerToArray< LVecBase2d >::get_node_ref_count 0 1 201 0
74
inline int ::PointerToArray< LVecBase2d >::get_node_ref_count(void) const;

860 13 __getbuffer__ 0 4 1253 43 PointerToArray< LVecBase2d >::__getbuffer__ 0 1 202 0
94
int ::PointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

861 17 __releasebuffer__ 0 4 1253 47 PointerToArray< LVecBase2d >::__releasebuffer__ 0 1 203 0
94
void ::PointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

862 15 ~PointerToArray 0 4 1253 45 PointerToArray< LVecBase2d >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase2d >::~PointerToArray(void);

863 14 PointerToArray 0 4 1254 44 PointerToArray< LVecBase2f >::PointerToArray 0 4 204 205 206 207 0
305
inline ::PointerToArray< LVecBase2f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase2f const *)(0)))));
inline ::PointerToArray< LVecBase2f >::PointerToArray(PointerToArray< LVecBase2f > const &copy);
::PointerToArray< LVecBase2f >::PointerToArray(PyObject *self, PyObject *source);

864 11 empty_array 0 4 1254 41 PointerToArray< LVecBase2f >::empty_array 0 2 208 209 0
175
static inline PointerToArray< LVecBase2f > ::PointerToArray< LVecBase2f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase2f const *)(0)))));

865 4 size 0 4 1254 34 PointerToArray< LVecBase2f >::size 0 1 210 0
69
inline unsigned int ::PointerToArray< LVecBase2f >::size(void) const;

866 9 push_back 0 4 1254 39 PointerToArray< LVecBase2f >::push_back 0 1 211 0
75
inline void ::PointerToArray< LVecBase2f >::push_back(LVecBase2f const &x);

867 8 pop_back 0 4 1254 38 PointerToArray< LVecBase2f >::pop_back 0 1 212 0
59
inline void ::PointerToArray< LVecBase2f >::pop_back(void);

868 11 get_element 0 4 1254 41 PointerToArray< LVecBase2f >::get_element 0 1 213 0
91
inline LVecBase2f const &::PointerToArray< LVecBase2f >::get_element(unsigned int n) const;

869 11 set_element 0 4 1254 41 PointerToArray< LVecBase2f >::set_element 0 1 214 0
97
inline void ::PointerToArray< LVecBase2f >::set_element(unsigned int n, LVecBase2f const &value);

870 11 __getitem__ 0 4 1254 41 PointerToArray< LVecBase2f >::__getitem__ 0 1 215 0
91
inline LVecBase2f const &::PointerToArray< LVecBase2f >::__getitem__(unsigned int n) const;

871 11 __setitem__ 0 4 1254 41 PointerToArray< LVecBase2f >::__setitem__ 0 1 216 0
97
inline void ::PointerToArray< LVecBase2f >::__setitem__(unsigned int n, LVecBase2f const &value);

872 8 get_data 0 4 1254 38 PointerToArray< LVecBase2f >::get_data 0 1 217 0
81
inline basic_string< char > ::PointerToArray< LVecBase2f >::get_data(void) const;

873 8 set_data 0 4 1254 38 PointerToArray< LVecBase2f >::set_data 0 1 218 0
87
inline void ::PointerToArray< LVecBase2f >::set_data(basic_string< char > const &data);

874 11 get_subdata 0 4 1254 41 PointerToArray< LVecBase2f >::get_subdata 0 1 219 0
114
inline basic_string< char > ::PointerToArray< LVecBase2f >::get_subdata(unsigned int n, unsigned int count) const;

875 11 set_subdata 0 4 1254 41 PointerToArray< LVecBase2f >::set_subdata 0 1 220 0
126
inline void ::PointerToArray< LVecBase2f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

876 13 get_ref_count 0 4 1254 43 PointerToArray< LVecBase2f >::get_ref_count 0 1 221 0
69
inline int ::PointerToArray< LVecBase2f >::get_ref_count(void) const;

877 18 get_node_ref_count 0 4 1254 48 PointerToArray< LVecBase2f >::get_node_ref_count 0 1 222 0
74
inline int ::PointerToArray< LVecBase2f >::get_node_ref_count(void) const;

878 13 __getbuffer__ 0 4 1254 43 PointerToArray< LVecBase2f >::__getbuffer__ 0 1 223 0
94
int ::PointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

879 17 __releasebuffer__ 0 4 1254 47 PointerToArray< LVecBase2f >::__releasebuffer__ 0 1 224 0
94
void ::PointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

880 15 ~PointerToArray 0 4 1254 45 PointerToArray< LVecBase2f >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase2f >::~PointerToArray(void);

881 14 PointerToArray 0 4 1255 44 PointerToArray< LVecBase3d >::PointerToArray 0 4 225 226 227 228 0
305
inline ::PointerToArray< LVecBase3d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase3d const *)(0)))));
inline ::PointerToArray< LVecBase3d >::PointerToArray(PointerToArray< LVecBase3d > const &copy);
::PointerToArray< LVecBase3d >::PointerToArray(PyObject *self, PyObject *source);

882 11 empty_array 0 4 1255 41 PointerToArray< LVecBase3d >::empty_array 0 2 229 230 0
175
static inline PointerToArray< LVecBase3d > ::PointerToArray< LVecBase3d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase3d const *)(0)))));

883 4 size 0 4 1255 34 PointerToArray< LVecBase3d >::size 0 1 231 0
69
inline unsigned int ::PointerToArray< LVecBase3d >::size(void) const;

884 9 push_back 0 4 1255 39 PointerToArray< LVecBase3d >::push_back 0 1 232 0
75
inline void ::PointerToArray< LVecBase3d >::push_back(LVecBase3d const &x);

885 8 pop_back 0 4 1255 38 PointerToArray< LVecBase3d >::pop_back 0 1 233 0
59
inline void ::PointerToArray< LVecBase3d >::pop_back(void);

886 11 get_element 0 4 1255 41 PointerToArray< LVecBase3d >::get_element 0 1 234 0
91
inline LVecBase3d const &::PointerToArray< LVecBase3d >::get_element(unsigned int n) const;

887 11 set_element 0 4 1255 41 PointerToArray< LVecBase3d >::set_element 0 1 235 0
97
inline void ::PointerToArray< LVecBase3d >::set_element(unsigned int n, LVecBase3d const &value);

888 11 __getitem__ 0 4 1255 41 PointerToArray< LVecBase3d >::__getitem__ 0 1 236 0
91
inline LVecBase3d const &::PointerToArray< LVecBase3d >::__getitem__(unsigned int n) const;

889 11 __setitem__ 0 4 1255 41 PointerToArray< LVecBase3d >::__setitem__ 0 1 237 0
97
inline void ::PointerToArray< LVecBase3d >::__setitem__(unsigned int n, LVecBase3d const &value);

890 8 get_data 0 4 1255 38 PointerToArray< LVecBase3d >::get_data 0 1 238 0
81
inline basic_string< char > ::PointerToArray< LVecBase3d >::get_data(void) const;

891 8 set_data 0 4 1255 38 PointerToArray< LVecBase3d >::set_data 0 1 239 0
87
inline void ::PointerToArray< LVecBase3d >::set_data(basic_string< char > const &data);

892 11 get_subdata 0 4 1255 41 PointerToArray< LVecBase3d >::get_subdata 0 1 240 0
114
inline basic_string< char > ::PointerToArray< LVecBase3d >::get_subdata(unsigned int n, unsigned int count) const;

893 11 set_subdata 0 4 1255 41 PointerToArray< LVecBase3d >::set_subdata 0 1 241 0
126
inline void ::PointerToArray< LVecBase3d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

894 13 get_ref_count 0 4 1255 43 PointerToArray< LVecBase3d >::get_ref_count 0 1 242 0
69
inline int ::PointerToArray< LVecBase3d >::get_ref_count(void) const;

895 18 get_node_ref_count 0 4 1255 48 PointerToArray< LVecBase3d >::get_node_ref_count 0 1 243 0
74
inline int ::PointerToArray< LVecBase3d >::get_node_ref_count(void) const;

896 13 __getbuffer__ 0 4 1255 43 PointerToArray< LVecBase3d >::__getbuffer__ 0 1 244 0
94
int ::PointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

897 17 __releasebuffer__ 0 4 1255 47 PointerToArray< LVecBase3d >::__releasebuffer__ 0 1 245 0
94
void ::PointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

898 15 ~PointerToArray 0 4 1255 45 PointerToArray< LVecBase3d >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase3d >::~PointerToArray(void);

899 14 PointerToArray 0 4 1256 44 PointerToArray< LVecBase3f >::PointerToArray 0 4 246 247 248 249 0
305
inline ::PointerToArray< LVecBase3f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase3f const *)(0)))));
inline ::PointerToArray< LVecBase3f >::PointerToArray(PointerToArray< LVecBase3f > const &copy);
::PointerToArray< LVecBase3f >::PointerToArray(PyObject *self, PyObject *source);

900 11 empty_array 0 4 1256 41 PointerToArray< LVecBase3f >::empty_array 0 2 250 251 0
175
static inline PointerToArray< LVecBase3f > ::PointerToArray< LVecBase3f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase3f const *)(0)))));

901 4 size 0 4 1256 34 PointerToArray< LVecBase3f >::size 0 1 252 0
69
inline unsigned int ::PointerToArray< LVecBase3f >::size(void) const;

902 9 push_back 0 4 1256 39 PointerToArray< LVecBase3f >::push_back 0 1 253 0
75
inline void ::PointerToArray< LVecBase3f >::push_back(LVecBase3f const &x);

903 8 pop_back 0 4 1256 38 PointerToArray< LVecBase3f >::pop_back 0 1 254 0
59
inline void ::PointerToArray< LVecBase3f >::pop_back(void);

904 11 get_element 0 4 1256 41 PointerToArray< LVecBase3f >::get_element 0 1 255 0
91
inline LVecBase3f const &::PointerToArray< LVecBase3f >::get_element(unsigned int n) const;

905 11 set_element 0 4 1256 41 PointerToArray< LVecBase3f >::set_element 0 1 256 0
97
inline void ::PointerToArray< LVecBase3f >::set_element(unsigned int n, LVecBase3f const &value);

906 11 __getitem__ 0 4 1256 41 PointerToArray< LVecBase3f >::__getitem__ 0 1 257 0
91
inline LVecBase3f const &::PointerToArray< LVecBase3f >::__getitem__(unsigned int n) const;

907 11 __setitem__ 0 4 1256 41 PointerToArray< LVecBase3f >::__setitem__ 0 1 258 0
97
inline void ::PointerToArray< LVecBase3f >::__setitem__(unsigned int n, LVecBase3f const &value);

908 8 get_data 0 4 1256 38 PointerToArray< LVecBase3f >::get_data 0 1 259 0
81
inline basic_string< char > ::PointerToArray< LVecBase3f >::get_data(void) const;

909 8 set_data 0 4 1256 38 PointerToArray< LVecBase3f >::set_data 0 1 260 0
87
inline void ::PointerToArray< LVecBase3f >::set_data(basic_string< char > const &data);

910 11 get_subdata 0 4 1256 41 PointerToArray< LVecBase3f >::get_subdata 0 1 261 0
114
inline basic_string< char > ::PointerToArray< LVecBase3f >::get_subdata(unsigned int n, unsigned int count) const;

911 11 set_subdata 0 4 1256 41 PointerToArray< LVecBase3f >::set_subdata 0 1 262 0
126
inline void ::PointerToArray< LVecBase3f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

912 13 get_ref_count 0 4 1256 43 PointerToArray< LVecBase3f >::get_ref_count 0 1 263 0
69
inline int ::PointerToArray< LVecBase3f >::get_ref_count(void) const;

913 18 get_node_ref_count 0 4 1256 48 PointerToArray< LVecBase3f >::get_node_ref_count 0 1 264 0
74
inline int ::PointerToArray< LVecBase3f >::get_node_ref_count(void) const;

914 13 __getbuffer__ 0 4 1256 43 PointerToArray< LVecBase3f >::__getbuffer__ 0 1 265 0
94
int ::PointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

915 17 __releasebuffer__ 0 4 1256 47 PointerToArray< LVecBase3f >::__releasebuffer__ 0 1 266 0
94
void ::PointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

916 15 ~PointerToArray 0 4 1256 45 PointerToArray< LVecBase3f >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase3f >::~PointerToArray(void);

917 14 PointerToArray 0 4 1257 52 PointerToArray< UnalignedLMatrix4d >::PointerToArray 0 4 267 268 269 270 0
345
inline ::PointerToArray< UnalignedLMatrix4d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4d const *)(0)))));
inline ::PointerToArray< UnalignedLMatrix4d >::PointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
::PointerToArray< UnalignedLMatrix4d >::PointerToArray(PyObject *self, PyObject *source);

918 11 empty_array 0 4 1257 49 PointerToArray< UnalignedLMatrix4d >::empty_array 0 2 271 272 0
199
static inline PointerToArray< UnalignedLMatrix4d > ::PointerToArray< UnalignedLMatrix4d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4d const *)(0)))));

919 4 size 0 4 1257 42 PointerToArray< UnalignedLMatrix4d >::size 0 1 273 0
77
inline unsigned int ::PointerToArray< UnalignedLMatrix4d >::size(void) const;

920 9 push_back 0 4 1257 47 PointerToArray< UnalignedLMatrix4d >::push_back 0 1 274 0
91
inline void ::PointerToArray< UnalignedLMatrix4d >::push_back(UnalignedLMatrix4d const &x);

921 8 pop_back 0 4 1257 46 PointerToArray< UnalignedLMatrix4d >::pop_back 0 1 275 0
67
inline void ::PointerToArray< UnalignedLMatrix4d >::pop_back(void);

922 11 get_element 0 4 1257 49 PointerToArray< UnalignedLMatrix4d >::get_element 0 1 276 0
107
inline UnalignedLMatrix4d const &::PointerToArray< UnalignedLMatrix4d >::get_element(unsigned int n) const;

923 11 set_element 0 4 1257 49 PointerToArray< UnalignedLMatrix4d >::set_element 0 1 277 0
113
inline void ::PointerToArray< UnalignedLMatrix4d >::set_element(unsigned int n, UnalignedLMatrix4d const &value);

924 11 __getitem__ 0 4 1257 49 PointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 278 0
107
inline UnalignedLMatrix4d const &::PointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned int n) const;

925 11 __setitem__ 0 4 1257 49 PointerToArray< UnalignedLMatrix4d >::__setitem__ 0 1 279 0
113
inline void ::PointerToArray< UnalignedLMatrix4d >::__setitem__(unsigned int n, UnalignedLMatrix4d const &value);

926 8 get_data 0 4 1257 46 PointerToArray< UnalignedLMatrix4d >::get_data 0 1 280 0
89
inline basic_string< char > ::PointerToArray< UnalignedLMatrix4d >::get_data(void) const;

927 8 set_data 0 4 1257 46 PointerToArray< UnalignedLMatrix4d >::set_data 0 1 281 0
95
inline void ::PointerToArray< UnalignedLMatrix4d >::set_data(basic_string< char > const &data);

928 11 get_subdata 0 4 1257 49 PointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 282 0
122
inline basic_string< char > ::PointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned int n, unsigned int count) const;

929 11 set_subdata 0 4 1257 49 PointerToArray< UnalignedLMatrix4d >::set_subdata 0 1 283 0
134
inline void ::PointerToArray< UnalignedLMatrix4d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

930 13 get_ref_count 0 4 1257 51 PointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 284 0
77
inline int ::PointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

931 18 get_node_ref_count 0 4 1257 56 PointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 285 0
82
inline int ::PointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

932 13 __getbuffer__ 0 4 1257 51 PointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 286 0
102
int ::PointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

933 17 __releasebuffer__ 0 4 1257 55 PointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 287 0
102
void ::PointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

934 15 ~PointerToArray 0 4 1257 53 PointerToArray< UnalignedLMatrix4d >::~PointerToArray 0 0 0
62
::PointerToArray< UnalignedLMatrix4d >::~PointerToArray(void);

935 14 PointerToArray 0 4 1258 52 PointerToArray< UnalignedLMatrix4f >::PointerToArray 0 4 288 289 290 291 0
345
inline ::PointerToArray< UnalignedLMatrix4f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4f const *)(0)))));
inline ::PointerToArray< UnalignedLMatrix4f >::PointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
::PointerToArray< UnalignedLMatrix4f >::PointerToArray(PyObject *self, PyObject *source);

936 11 empty_array 0 4 1258 49 PointerToArray< UnalignedLMatrix4f >::empty_array 0 2 292 293 0
199
static inline PointerToArray< UnalignedLMatrix4f > ::PointerToArray< UnalignedLMatrix4f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4f const *)(0)))));

937 4 size 0 4 1258 42 PointerToArray< UnalignedLMatrix4f >::size 0 1 294 0
77
inline unsigned int ::PointerToArray< UnalignedLMatrix4f >::size(void) const;

938 9 push_back 0 4 1258 47 PointerToArray< UnalignedLMatrix4f >::push_back 0 1 295 0
91
inline void ::PointerToArray< UnalignedLMatrix4f >::push_back(UnalignedLMatrix4f const &x);

939 8 pop_back 0 4 1258 46 PointerToArray< UnalignedLMatrix4f >::pop_back 0 1 296 0
67
inline void ::PointerToArray< UnalignedLMatrix4f >::pop_back(void);

940 11 get_element 0 4 1258 49 PointerToArray< UnalignedLMatrix4f >::get_element 0 1 297 0
107
inline UnalignedLMatrix4f const &::PointerToArray< UnalignedLMatrix4f >::get_element(unsigned int n) const;

941 11 set_element 0 4 1258 49 PointerToArray< UnalignedLMatrix4f >::set_element 0 1 298 0
113
inline void ::PointerToArray< UnalignedLMatrix4f >::set_element(unsigned int n, UnalignedLMatrix4f const &value);

942 11 __getitem__ 0 4 1258 49 PointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 299 0
107
inline UnalignedLMatrix4f const &::PointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned int n) const;

943 11 __setitem__ 0 4 1258 49 PointerToArray< UnalignedLMatrix4f >::__setitem__ 0 1 300 0
113
inline void ::PointerToArray< UnalignedLMatrix4f >::__setitem__(unsigned int n, UnalignedLMatrix4f const &value);

944 8 get_data 0 4 1258 46 PointerToArray< UnalignedLMatrix4f >::get_data 0 1 301 0
89
inline basic_string< char > ::PointerToArray< UnalignedLMatrix4f >::get_data(void) const;

945 8 set_data 0 4 1258 46 PointerToArray< UnalignedLMatrix4f >::set_data 0 1 302 0
95
inline void ::PointerToArray< UnalignedLMatrix4f >::set_data(basic_string< char > const &data);

946 11 get_subdata 0 4 1258 49 PointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 303 0
122
inline basic_string< char > ::PointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned int n, unsigned int count) const;

947 11 set_subdata 0 4 1258 49 PointerToArray< UnalignedLMatrix4f >::set_subdata 0 1 304 0
134
inline void ::PointerToArray< UnalignedLMatrix4f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

948 13 get_ref_count 0 4 1258 51 PointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 305 0
77
inline int ::PointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

949 18 get_node_ref_count 0 4 1258 56 PointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 306 0
82
inline int ::PointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

950 13 __getbuffer__ 0 4 1258 51 PointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 307 0
102
int ::PointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

951 17 __releasebuffer__ 0 4 1258 55 PointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 308 0
102
void ::PointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

952 15 ~PointerToArray 0 4 1258 53 PointerToArray< UnalignedLMatrix4f >::~PointerToArray 0 0 0
62
::PointerToArray< UnalignedLMatrix4f >::~PointerToArray(void);

953 14 PointerToArray 0 4 1259 53 PointerToArray< UnalignedLVecBase4d >::PointerToArray 0 4 309 310 311 312 0
350
inline ::PointerToArray< UnalignedLVecBase4d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4d const *)(0)))));
inline ::PointerToArray< UnalignedLVecBase4d >::PointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
::PointerToArray< UnalignedLVecBase4d >::PointerToArray(PyObject *self, PyObject *source);

954 11 empty_array 0 4 1259 50 PointerToArray< UnalignedLVecBase4d >::empty_array 0 2 313 314 0
202
static inline PointerToArray< UnalignedLVecBase4d > ::PointerToArray< UnalignedLVecBase4d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4d const *)(0)))));

955 4 size 0 4 1259 43 PointerToArray< UnalignedLVecBase4d >::size 0 1 315 0
78
inline unsigned int ::PointerToArray< UnalignedLVecBase4d >::size(void) const;

956 9 push_back 0 4 1259 48 PointerToArray< UnalignedLVecBase4d >::push_back 0 1 316 0
93
inline void ::PointerToArray< UnalignedLVecBase4d >::push_back(UnalignedLVecBase4d const &x);

957 8 pop_back 0 4 1259 47 PointerToArray< UnalignedLVecBase4d >::pop_back 0 1 317 0
68
inline void ::PointerToArray< UnalignedLVecBase4d >::pop_back(void);

958 11 get_element 0 4 1259 50 PointerToArray< UnalignedLVecBase4d >::get_element 0 1 318 0
109
inline UnalignedLVecBase4d const &::PointerToArray< UnalignedLVecBase4d >::get_element(unsigned int n) const;

959 11 set_element 0 4 1259 50 PointerToArray< UnalignedLVecBase4d >::set_element 0 1 319 0
115
inline void ::PointerToArray< UnalignedLVecBase4d >::set_element(unsigned int n, UnalignedLVecBase4d const &value);

960 11 __getitem__ 0 4 1259 50 PointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 320 0
109
inline UnalignedLVecBase4d const &::PointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned int n) const;

961 11 __setitem__ 0 4 1259 50 PointerToArray< UnalignedLVecBase4d >::__setitem__ 0 1 321 0
115
inline void ::PointerToArray< UnalignedLVecBase4d >::__setitem__(unsigned int n, UnalignedLVecBase4d const &value);

962 8 get_data 0 4 1259 47 PointerToArray< UnalignedLVecBase4d >::get_data 0 1 322 0
90
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4d >::get_data(void) const;

963 8 set_data 0 4 1259 47 PointerToArray< UnalignedLVecBase4d >::set_data 0 1 323 0
96
inline void ::PointerToArray< UnalignedLVecBase4d >::set_data(basic_string< char > const &data);

964 11 get_subdata 0 4 1259 50 PointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 324 0
123
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned int n, unsigned int count) const;

965 11 set_subdata 0 4 1259 50 PointerToArray< UnalignedLVecBase4d >::set_subdata 0 1 325 0
135
inline void ::PointerToArray< UnalignedLVecBase4d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

966 13 get_ref_count 0 4 1259 52 PointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 326 0
78
inline int ::PointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

967 18 get_node_ref_count 0 4 1259 57 PointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 327 0
83
inline int ::PointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

968 13 __getbuffer__ 0 4 1259 52 PointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 328 0
103
int ::PointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

969 17 __releasebuffer__ 0 4 1259 56 PointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 329 0
103
void ::PointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

970 15 ~PointerToArray 0 4 1259 54 PointerToArray< UnalignedLVecBase4d >::~PointerToArray 0 0 0
63
::PointerToArray< UnalignedLVecBase4d >::~PointerToArray(void);

971 14 PointerToArray 0 4 1260 53 PointerToArray< UnalignedLVecBase4f >::PointerToArray 0 4 330 331 332 333 0
350
inline ::PointerToArray< UnalignedLVecBase4f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4f const *)(0)))));
inline ::PointerToArray< UnalignedLVecBase4f >::PointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
::PointerToArray< UnalignedLVecBase4f >::PointerToArray(PyObject *self, PyObject *source);

972 11 empty_array 0 4 1260 50 PointerToArray< UnalignedLVecBase4f >::empty_array 0 2 334 335 0
202
static inline PointerToArray< UnalignedLVecBase4f > ::PointerToArray< UnalignedLVecBase4f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4f const *)(0)))));

973 4 size 0 4 1260 43 PointerToArray< UnalignedLVecBase4f >::size 0 1 336 0
78
inline unsigned int ::PointerToArray< UnalignedLVecBase4f >::size(void) const;

974 9 push_back 0 4 1260 48 PointerToArray< UnalignedLVecBase4f >::push_back 0 1 337 0
93
inline void ::PointerToArray< UnalignedLVecBase4f >::push_back(UnalignedLVecBase4f const &x);

975 8 pop_back 0 4 1260 47 PointerToArray< UnalignedLVecBase4f >::pop_back 0 1 338 0
68
inline void ::PointerToArray< UnalignedLVecBase4f >::pop_back(void);

976 11 get_element 0 4 1260 50 PointerToArray< UnalignedLVecBase4f >::get_element 0 1 339 0
109
inline UnalignedLVecBase4f const &::PointerToArray< UnalignedLVecBase4f >::get_element(unsigned int n) const;

977 11 set_element 0 4 1260 50 PointerToArray< UnalignedLVecBase4f >::set_element 0 1 340 0
115
inline void ::PointerToArray< UnalignedLVecBase4f >::set_element(unsigned int n, UnalignedLVecBase4f const &value);

978 11 __getitem__ 0 4 1260 50 PointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 341 0
109
inline UnalignedLVecBase4f const &::PointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned int n) const;

979 11 __setitem__ 0 4 1260 50 PointerToArray< UnalignedLVecBase4f >::__setitem__ 0 1 342 0
115
inline void ::PointerToArray< UnalignedLVecBase4f >::__setitem__(unsigned int n, UnalignedLVecBase4f const &value);

980 8 get_data 0 4 1260 47 PointerToArray< UnalignedLVecBase4f >::get_data 0 1 343 0
90
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4f >::get_data(void) const;

981 8 set_data 0 4 1260 47 PointerToArray< UnalignedLVecBase4f >::set_data 0 1 344 0
96
inline void ::PointerToArray< UnalignedLVecBase4f >::set_data(basic_string< char > const &data);

982 11 get_subdata 0 4 1260 50 PointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 345 0
123
inline basic_string< char > ::PointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned int n, unsigned int count) const;

983 11 set_subdata 0 4 1260 50 PointerToArray< UnalignedLVecBase4f >::set_subdata 0 1 346 0
135
inline void ::PointerToArray< UnalignedLVecBase4f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

984 13 get_ref_count 0 4 1260 52 PointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 347 0
78
inline int ::PointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

985 18 get_node_ref_count 0 4 1260 57 PointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 348 0
83
inline int ::PointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

986 13 __getbuffer__ 0 4 1260 52 PointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 349 0
103
int ::PointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

987 17 __releasebuffer__ 0 4 1260 56 PointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 350 0
103
void ::PointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

988 15 ~PointerToArray 0 4 1260 54 PointerToArray< UnalignedLVecBase4f >::~PointerToArray 0 0 0
63
::PointerToArray< UnalignedLVecBase4f >::~PointerToArray(void);

989 9 make_copy 0 6 1261 25 BoundingVolume::make_copy 0 1 351 0
66
virtual BoundingVolume *BoundingVolume::make_copy(void) const = 0;

990 8 is_empty 0 4 1261 24 BoundingVolume::is_empty 0 1 352 525
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_empty
//       Access: Published
//  Description: Any kind of volume might be empty.  This is a
//               degenerate volume that contains no points; it's not
//               the same as, for instance, a sphere with radius zero,
//               since that contains one point (the center).  It
//               intersects with no other volumes.
////////////////////////////////////////////////////////////////////
49
inline bool BoundingVolume::is_empty(void) const;

991 11 is_infinite 0 4 1261 27 BoundingVolume::is_infinite 0 1 353 905
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_infinite
//       Access: Published
//  Description: The other side of the empty coin is an infinite
//               volume.  This is a degenerate state of a normally
//               finite volume that contains all points.  (Note that
//               some kinds of infinite bounding volumes, like binary
//               separating planes, do not contain all points and thus
//               correctly return is_infinite() == false, even though
//               they are technically infinite.  This is a special
//               case of the word 'infinite' meaning the volume covers
//               all points in space.)
//
//               It completely intersects with all other volumes
//               except empty volumes.
////////////////////////////////////////////////////////////////////
52
inline bool BoundingVolume::is_infinite(void) const;

992 12 set_infinite 0 4 1261 28 BoundingVolume::set_infinite 0 1 354 383
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::set_infinite
//       Access: Published
//  Description: Marks the volume as infinite, even if it is normally
//               finite.  You can think of this as an infinite
//               extend_by() operation.
////////////////////////////////////////////////////////////////////
47
inline void BoundingVolume::set_infinite(void);

993 9 extend_by 0 4 1261 25 BoundingVolume::extend_by 0 1 355 303
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::extend_by
//       Access: Published
//  Description: Increases the size of the volume to include the given
//               volume.
////////////////////////////////////////////////////////////////////
65
inline bool BoundingVolume::extend_by(BoundingVolume const *vol);

994 6 around 0 4 1261 22 BoundingVolume::around 0 0 573
// It might be nice to make these template member functions so we
// could have true STL-style first/last iterators, but that's
// impossible for virtual functions.

////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::around
//       Access: Published
//  Description: Resets the volume to enclose only the volumes
//               indicated.  Returns true if successful, false if the
//               volume doesn't know how to do that or can't do that.
////////////////////////////////////////////////////////////////////
87
bool BoundingVolume::around(BoundingVolume const **first, BoundingVolume const **last);

995 8 contains 0 4 1261 24 BoundingVolume::contains 0 1 356 372
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::contains
//       Access: Published
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
////////////////////////////////////////////////////////////////////
69
inline int BoundingVolume::contains(BoundingVolume const *vol) const;

996 6 output 0 6 1261 22 BoundingVolume::output 0 1 357 0
60
virtual void BoundingVolume::output(ostream &out) const = 0;

997 5 write 0 6 1261 21 BoundingVolume::write 0 2 358 359 220
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
virtual void BoundingVolume::write(ostream &out, int indent_level = (0)) const;

998 14 get_class_type 0 4 1261 30 BoundingVolume::get_class_type 0 1 360 0
55
static TypeHandle BoundingVolume::get_class_type(void);

999 15 ~BoundingVolume 0 4 1261 31 BoundingVolume::~BoundingVolume 0 0 0
38
BoundingVolume::~BoundingVolume(void);

1000 9 extend_by 0 4 1265 34 GeometricBoundingVolume::extend_by 0 2 361 362 619
////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               volume.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               point.
////////////////////////////////////////////////////////////////////
154
inline bool GeometricBoundingVolume::extend_by(GeometricBoundingVolume const *vol);
inline bool GeometricBoundingVolume::extend_by(LPoint3f const &point);

1001 6 around 0 4 1265 31 GeometricBoundingVolume::around 0 1 363 769
// It might be nice to make these template member functions so we
// could have true STL-style first/last iterators, but that's
// impossible for virtual functions.

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the volumes
//               indicated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the points
//               indicated.
////////////////////////////////////////////////////////////////////
211
inline bool GeometricBoundingVolume::around(GeometricBoundingVolume const **first, GeometricBoundingVolume const **last);
inline bool GeometricBoundingVolume::around(LPoint3f const *first, LPoint3f const *last);

1002 8 contains 0 4 1265 33 GeometricBoundingVolume::contains 0 3 364 365 366 1143
////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated line segment.
////////////////////////////////////////////////////////////////////
252
inline int GeometricBoundingVolume::contains(GeometricBoundingVolume const *vol) const;
inline int GeometricBoundingVolume::contains(LPoint3f const &point) const;
inline int GeometricBoundingVolume::contains(LPoint3f const &a, LPoint3f const &b) const;

1003 17 get_approx_center 0 6 1265 42 GeometricBoundingVolume::get_approx_center 0 1 367 0
76
virtual LPoint3f GeometricBoundingVolume::get_approx_center(void) const = 0;

1004 5 xform 0 6 1265 30 GeometricBoundingVolume::xform 0 1 368 0
70
virtual void GeometricBoundingVolume::xform(LMatrix4f const &mat) = 0;

1005 14 get_class_type 0 4 1265 39 GeometricBoundingVolume::get_class_type 0 1 369 0
64
static TypeHandle GeometricBoundingVolume::get_class_type(void);

1006 24 ~GeometricBoundingVolume 0 4 1265 49 GeometricBoundingVolume::~GeometricBoundingVolume 0 0 0
56
GeometricBoundingVolume::~GeometricBoundingVolume(void);

1007 7 get_min 0 6 1266 29 FiniteBoundingVolume::get_min 0 1 370 0
63
virtual LPoint3f FiniteBoundingVolume::get_min(void) const = 0;

1008 7 get_max 0 6 1266 29 FiniteBoundingVolume::get_max 0 1 371 0
63
virtual LPoint3f FiniteBoundingVolume::get_max(void) const = 0;

1009 10 get_volume 0 6 1266 32 FiniteBoundingVolume::get_volume 0 1 372 238
////////////////////////////////////////////////////////////////////
//     Function: FiniteBoundingVolume::get_volume
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
59
virtual float FiniteBoundingVolume::get_volume(void) const;

1010 14 get_class_type 0 4 1266 36 FiniteBoundingVolume::get_class_type 0 1 373 0
61
static TypeHandle FiniteBoundingVolume::get_class_type(void);

1011 21 ~FiniteBoundingVolume 0 4 1266 43 FiniteBoundingVolume::~FiniteBoundingVolume 0 0 0
50
FiniteBoundingVolume::~FiniteBoundingVolume(void);

1012 10 LParabolaf 0 4 1267 22 LParabolaf::LParabolaf 0 3 374 375 376 1375
// Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
185
inline LParabolaf::LParabolaf(void);
inline LParabolaf::LParabolaf(LVecBase3f const &a, LVecBase3f const &b, LVecBase3f const &c);
inline LParabolaf::LParabolaf(LParabolaf const &copy);

1013 10 operator = 0 4 1267 22 LParabolaf::operator = 0 1 377 235
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void LParabolaf::operator =(LParabolaf const &copy);

1014 11 ~LParabolaf 0 4 1267 23 LParabolaf::~LParabolaf 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline LParabolaf::~LParabolaf(void);

1015 5 xform 0 4 1267 17 LParabolaf::xform 0 1 378 754
// Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
////////////////////////////////////////////////////////////////////
45
void LParabolaf::xform(LMatrix4f const &mat);

1016 5 get_a 0 4 1267 17 LParabolaf::get_a 0 1 379 313
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3f const &LParabolaf::get_a(void) const;

1017 5 get_b 0 4 1267 17 LParabolaf::get_b 0 1 380 318
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3f const &LParabolaf::get_b(void) const;

1018 5 get_c 0 4 1267 17 LParabolaf::get_c 0 1 381 312
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3f const &LParabolaf::get_c(void) const;

1019 10 calc_point 0 4 1267 22 LParabolaf::calc_point 0 1 382 266
////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////
54
inline LPoint3f LParabolaf::calc_point(float t) const;

1020 6 output 0 4 1267 18 LParabolaf::output 0 1 383 216
////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
void LParabolaf::output(ostream &out) const;

1021 5 write 0 4 1267 17 LParabolaf::write 0 2 384 385 215
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
void LParabolaf::write(ostream &out, int indent_level = (0)) const;

1022 20 write_datagram_fixed 0 4 1267 32 LParabolaf::write_datagram_fixed 0 1 386 643
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
67
void LParabolaf::write_datagram_fixed(Datagram &destination) const;

1023 19 read_datagram_fixed 0 4 1267 31 LParabolaf::read_datagram_fixed 0 1 387 347
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
63
void LParabolaf::read_datagram_fixed(DatagramIterator &source);

1024 14 write_datagram 0 4 1267 26 LParabolaf::write_datagram 0 1 388 463
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
61
void LParabolaf::write_datagram(Datagram &destination) const;

1025 13 read_datagram 0 4 1267 25 LParabolaf::read_datagram 0 1 389 279
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
57
void LParabolaf::read_datagram(DatagramIterator &source);

1026 10 LParabolad 0 4 1268 22 LParabolad::LParabolad 0 3 390 391 392 2752
// Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

// Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
185
inline LParabolad::LParabolad(void);
inline LParabolad::LParabolad(LVecBase3d const &a, LVecBase3d const &b, LVecBase3d const &c);
inline LParabolad::LParabolad(LParabolad const &copy);

1027 10 operator = 0 4 1268 22 LParabolad::operator = 0 1 393 472
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void LParabolad::operator =(LParabolad const &copy);

1028 11 ~LParabolad 0 4 1268 23 LParabolad::~LParabolad 0 0 444
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline LParabolad::~LParabolad(void);

1029 5 xform 0 4 1268 17 LParabolad::xform 0 1 394 754
// Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
////////////////////////////////////////////////////////////////////
45
void LParabolad::xform(LMatrix4d const &mat);

1030 5 get_a 0 4 1268 17 LParabolad::get_a 0 1 395 628
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3d const &LParabolad::get_a(void) const;

1031 5 get_b 0 4 1268 17 LParabolad::get_b 0 1 396 638
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3d const &LParabolad::get_b(void) const;

1032 5 get_c 0 4 1268 17 LParabolad::get_c 0 1 397 626
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3d const &LParabolad::get_c(void) const;

1033 10 calc_point 0 4 1268 22 LParabolad::calc_point 0 1 398 534
////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////
55
inline LPoint3d LParabolad::calc_point(double t) const;

1034 6 output 0 4 1268 18 LParabolad::output 0 1 399 216
////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
void LParabolad::output(ostream &out) const;

1035 5 write 0 4 1268 17 LParabolad::write 0 2 400 401 215
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
void LParabolad::write(ostream &out, int indent_level = (0)) const;

1036 20 write_datagram_fixed 0 4 1268 32 LParabolad::write_datagram_fixed 0 1 402 643
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
67
void LParabolad::write_datagram_fixed(Datagram &destination) const;

1037 19 read_datagram_fixed 0 4 1268 31 LParabolad::read_datagram_fixed 0 1 403 347
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
63
void LParabolad::read_datagram_fixed(DatagramIterator &source);

1038 14 write_datagram 0 4 1268 26 LParabolad::write_datagram 0 1 404 463
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
61
void LParabolad::write_datagram(Datagram &destination) const;

1039 13 read_datagram 0 4 1268 25 LParabolad::read_datagram 0 1 405 279
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
57
void LParabolad::read_datagram(DatagramIterator &source);

1040 7 LPlanef 0 4 1269 16 LPlanef::LPlanef 0 5 406 407 408 409 410 2153
// Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////
295
inline LPlanef::LPlanef(void);
inline LPlanef::LPlanef(LVecBase4f const &copy);
inline LPlanef::LPlanef(LPoint3f const &a, LPoint3f const &b, LPoint3f const &c);
inline LPlanef::LPlanef(LVector3f const &normal, LPoint3f const &point);
inline LPlanef::LPlanef(float a, float b, float c, float d);

1041 10 operator * 0 4 1269 19 LPlanef::operator * 0 2 411 412 546
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
127
inline LPlanef LPlanef::operator *(LMatrix3f const &mat) const;
inline LPlanef LPlanef::operator *(LMatrix4f const &mat) const;

1042 11 operator *= 0 4 1269 20 LPlanef::operator *= 0 1 413 273
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
55
inline void LPlanef::operator *=(LMatrix4f const &mat);

1043 5 xform 0 4 1269 14 LPlanef::xform 0 1 414 258
////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
49
inline void LPlanef::xform(LMatrix4f const &mat);

1044 10 operator - 0 68 1269 19 LPlanef::operator - 0 1 415 268
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
////////////////////////////////////////////////////////////////////
47
inline LPlanef LPlanef::operator -(void) const;

1045 18 get_reflection_mat 0 4 1269 27 LPlanef::get_reflection_mat 0 1 416 854
// Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
////////////////////////////////////////////////////////////////////
50
LMatrix4f LPlanef::get_reflection_mat(void) const;

1046 10 get_normal 0 4 1269 19 LPlanef::get_normal 0 1 417 258
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////
49
inline LVector3f LPlanef::get_normal(void) const;

1047 9 get_point 0 4 1269 18 LPlanef::get_point 0 1 418 382
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
////////////////////////////////////////////////////////////////////
40
LPoint3f LPlanef::get_point(void) const;

1048 13 dist_to_plane 0 4 1269 22 LPlanef::dist_to_plane 0 1 419 612
////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////
65
inline float LPlanef::dist_to_plane(LPoint3f const &point) const;

1049 7 project 0 4 1269 16 LPlanef::project 0 1 420 307
////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////
62
inline LPoint3f LPlanef::project(LPoint3f const &point) const;

1050 4 flip 0 4 1269 13 LPlanef::flip 0 1 421 329
////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
////////////////////////////////////////////////////////////////////
32
inline void LPlanef::flip(void);

1051 15 intersects_line 0 4 1269 24 LPlanef::intersects_line 0 1 422 1628
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////
213
inline bool LPlanef::intersects_line(LPoint3f &intersection_point, LPoint3f const &p1, LPoint3f const &p2) const;
inline bool LPlanef::intersects_line(float &t, LPoint3f const &from, LVector3f const &delta) const;

1052 16 intersects_plane 0 4 1269 25 LPlanef::intersects_plane 0 1 423 589
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
////////////////////////////////////////////////////////////////////
93
bool LPlanef::intersects_plane(LPoint3f &from, LVector3f &delta, LPlanef const &other) const;

1053 19 intersects_parabola 0 4 1269 28 LPlanef::intersects_parabola 0 0 771
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_parabola
//       Access: Published
//  Description: Determines whether and where the indicated parabola
//               intersects with the plane.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t1 and t2
//               undefined.  If there is an intersection with the
//               plane, the function returns true and sets t1 and t2
//               to the parametric value that defines the two points
//               of intersection.  If the parabola is exactly tangent
//               to the plane, then t1 == t2.
////////////////////////////////////////////////////////////////////
90
bool LPlanef::intersects_parabola(float &t1, float &t2, LParabolaf const &parabola) const;

1054 6 output 0 4 1269 15 LPlanef::output 0 1 424 213
////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
void LPlanef::output(ostream &out) const;

1055 5 write 0 4 1269 14 LPlanef::write 0 2 425 426 212
////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
void LPlanef::write(ostream &out, int indent_level = (0)) const;

1056 8 ~LPlanef 0 4 1269 17 LPlanef::~LPlanef 0 0 0
24
LPlanef::~LPlanef(void);

1057 7 LPlaned 0 4 1271 16 LPlaned::LPlaned 0 5 427 428 429 430 431 4308
// Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////

// Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////
299
inline LPlaned::LPlaned(void);
inline LPlaned::LPlaned(LVecBase4d const &copy);
inline LPlaned::LPlaned(LPoint3d const &a, LPoint3d const &b, LPoint3d const &c);
inline LPlaned::LPlaned(LVector3d const &normal, LPoint3d const &point);
inline LPlaned::LPlaned(double a, double b, double c, double d);

1058 10 operator * 0 4 1271 19 LPlaned::operator * 0 2 432 433 1094
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
127
inline LPlaned LPlaned::operator *(LMatrix3d const &mat) const;
inline LPlaned LPlaned::operator *(LMatrix4d const &mat) const;

1059 11 operator *= 0 4 1271 20 LPlaned::operator *= 0 1 434 548
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
55
inline void LPlaned::operator *=(LMatrix4d const &mat);

1060 5 xform 0 4 1271 14 LPlaned::xform 0 1 435 518
////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
49
inline void LPlaned::xform(LMatrix4d const &mat);

1061 10 operator - 0 68 1271 19 LPlaned::operator - 0 1 436 538
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
////////////////////////////////////////////////////////////////////
47
inline LPlaned LPlaned::operator -(void) const;

1062 18 get_reflection_mat 0 4 1271 27 LPlaned::get_reflection_mat 0 1 437 854
// Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
////////////////////////////////////////////////////////////////////
50
LMatrix4d LPlaned::get_reflection_mat(void) const;

1063 10 get_normal 0 4 1271 19 LPlaned::get_normal 0 1 438 518
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////
49
inline LVector3d LPlaned::get_normal(void) const;

1064 9 get_point 0 4 1271 18 LPlaned::get_point 0 1 439 382
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
////////////////////////////////////////////////////////////////////
40
LPoint3d LPlaned::get_point(void) const;

1065 13 dist_to_plane 0 4 1271 22 LPlaned::dist_to_plane 0 1 440 1226
////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////
66
inline double LPlaned::dist_to_plane(LPoint3d const &point) const;

1066 7 project 0 4 1271 16 LPlaned::project 0 1 441 616
////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////
62
inline LPoint3d LPlaned::project(LPoint3d const &point) const;

1067 4 flip 0 4 1271 13 LPlaned::flip 0 1 442 660
////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
////////////////////////////////////////////////////////////////////
32
inline void LPlaned::flip(void);

1068 15 intersects_line 0 4 1271 24 LPlaned::intersects_line 0 1 443 3258
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////
214
inline bool LPlaned::intersects_line(LPoint3d &intersection_point, LPoint3d const &p1, LPoint3d const &p2) const;
inline bool LPlaned::intersects_line(double &t, LPoint3d const &from, LVector3d const &delta) const;

1069 16 intersects_plane 0 4 1271 25 LPlaned::intersects_plane 0 1 444 589
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
////////////////////////////////////////////////////////////////////
93
bool LPlaned::intersects_plane(LPoint3d &from, LVector3d &delta, LPlaned const &other) const;

1070 19 intersects_parabola 0 4 1271 28 LPlaned::intersects_parabola 0 0 771
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_parabola
//       Access: Published
//  Description: Determines whether and where the indicated parabola
//               intersects with the plane.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t1 and t2
//               undefined.  If there is an intersection with the
//               plane, the function returns true and sets t1 and t2
//               to the parametric value that defines the two points
//               of intersection.  If the parabola is exactly tangent
//               to the plane, then t1 == t2.
////////////////////////////////////////////////////////////////////
92
bool LPlaned::intersects_parabola(double &t1, double &t2, LParabolad const &parabola) const;

1071 6 output 0 4 1271 15 LPlaned::output 0 1 445 213
////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
void LPlaned::output(ostream &out) const;

1072 5 write 0 4 1271 14 LPlaned::write 0 2 446 447 212
////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
void LPlaned::write(ostream &out, int indent_level = (0)) const;

1073 8 ~LPlaned 0 4 1271 17 LPlaned::~LPlaned 0 0 0
24
LPlaned::~LPlaned(void);

1074 11 BoundingBox 0 4 1273 24 BoundingBox::BoundingBox 0 2 448 449 1001
// Filename: boundingBox.I
// Created by:  drose (31May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs an empty box object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs a specific box object.
////////////////////////////////////////////////////////////////////
113
inline BoundingBox::BoundingBox(void);
inline BoundingBox::BoundingBox(LPoint3f const &min, LPoint3f const &max);

1075 12 operator new 0 4 1273 25 BoundingBox::operator new 0 1 450 0
128
inline void *BoundingBox::operator new(unsigned int size);
inline void *BoundingBox::operator new(unsigned int size, void *ptr);

1076 15 operator delete 0 4 1273 28 BoundingBox::operator delete 0 0 0
110
inline void BoundingBox::operator delete(void *ptr);
inline void BoundingBox::operator delete(void *, void *);

1077 12 validate_ptr 0 4 1273 25 BoundingBox::validate_ptr 0 0 0
62
static inline bool BoundingBox::validate_ptr(void const *ptr);

1078 14 get_num_points 0 4 1273 27 BoundingBox::get_num_points 0 1 451 284
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline int BoundingBox::get_num_points(void) const;

1079 9 get_point 0 4 1273 22 BoundingBox::get_point 0 1 452 270
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_point
//       Access: Published
//  Description: Returns the nth vertex of the rectangular solid.
////////////////////////////////////////////////////////////////////
52
inline LPoint3f BoundingBox::get_point(int n) const;

1080 14 get_num_planes 0 4 1273 27 BoundingBox::get_num_planes 0 1 453 281
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline int BoundingBox::get_num_planes(void) const;

1081 9 get_plane 0 4 1273 22 BoundingBox::get_plane 0 1 454 268
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_plane
//       Access: Published
//  Description: Returns the nth face of the rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline LPlanef BoundingBox::get_plane(int n) const;

1082 14 get_class_type 0 4 1273 27 BoundingBox::get_class_type 0 1 455 0
52
static TypeHandle BoundingBox::get_class_type(void);

1083 12 ~BoundingBox 0 4 1273 25 BoundingBox::~BoundingBox 0 0 0
32
BoundingBox::~BoundingBox(void);

1084 9 LFrustumf 0 4 1274 20 LFrustumf::LFrustumf 0 1 456 686
// Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LFrustumf::LFrustumf(void);

1085 13 make_ortho_2D 0 4 1274 24 LFrustumf::make_ortho_2D 0 2 457 458 500
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////
117
inline void LFrustumf::make_ortho_2D(void);
inline void LFrustumf::make_ortho_2D(float l, float r, float t, float b);

1086 10 make_ortho 0 4 1274 21 LFrustumf::make_ortho 0 2 459 460 450
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////
155
inline void LFrustumf::make_ortho(float fnear, float ffar);
inline void LFrustumf::make_ortho(float fnear, float ffar, float l, float r, float t, float b);

1087 21 make_perspective_hfov 0 4 1274 32 LFrustumf::make_perspective_hfov 0 1 461 578
////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////
96
inline void LFrustumf::make_perspective_hfov(float xfov, float aspect, float fnear, float ffar);

1088 21 make_perspective_vfov 0 4 1274 32 LFrustumf::make_perspective_vfov 0 1 462 0
96
inline void LFrustumf::make_perspective_vfov(float yfov, float aspect, float fnear, float ffar);

1089 16 make_perspective 0 4 1274 27 LFrustumf::make_perspective 0 1 463 0
89
inline void LFrustumf::make_perspective(float xfov, float yfov, float fnear, float ffar);

1090 22 get_perspective_params 0 4 1274 33 LFrustumf::get_perspective_params 0 0 424
////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
228
inline void LFrustumf::get_perspective_params(float &yfov, float &aspect, float &fnear, float &ffar) const;
inline void LFrustumf::get_perspective_params(float &xfov, float &yfov, float &aspect, float &fnear, float &ffar) const;

1091 10 ~LFrustumf 0 4 1274 21 LFrustumf::~LFrustumf 0 0 0
28
LFrustumf::~LFrustumf(void);

1092 9 LFrustumd 0 4 1275 20 LFrustumd::LFrustumd 0 1 464 1374
// Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LFrustumd::LFrustumd(void);

1093 13 make_ortho_2D 0 4 1275 24 LFrustumd::make_ortho_2D 0 2 465 466 1002
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////
121
inline void LFrustumd::make_ortho_2D(void);
inline void LFrustumd::make_ortho_2D(double l, double r, double t, double b);

1094 10 make_ortho 0 4 1275 21 LFrustumd::make_ortho 0 2 467 468 902
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////
163
inline void LFrustumd::make_ortho(double fnear, double ffar);
inline void LFrustumd::make_ortho(double fnear, double ffar, double l, double r, double t, double b);

1095 21 make_perspective_hfov 0 4 1275 32 LFrustumd::make_perspective_hfov 0 1 469 1158
////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////
100
inline void LFrustumd::make_perspective_hfov(double xfov, double aspect, double fnear, double ffar);

1096 21 make_perspective_vfov 0 4 1275 32 LFrustumd::make_perspective_vfov 0 1 470 0
100
inline void LFrustumd::make_perspective_vfov(double yfov, double aspect, double fnear, double ffar);

1097 16 make_perspective 0 4 1275 27 LFrustumd::make_perspective 0 1 471 0
93
inline void LFrustumd::make_perspective(double xfov, double yfov, double fnear, double ffar);

1098 22 get_perspective_params 0 4 1275 33 LFrustumd::get_perspective_params 0 0 850
////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
237
inline void LFrustumd::get_perspective_params(double &yfov, double &aspect, double &fnear, double &ffar) const;
inline void LFrustumd::get_perspective_params(double &xfov, double &yfov, double &aspect, double &fnear, double &ffar) const;

1099 10 ~LFrustumd 0 4 1275 21 LFrustumd::~LFrustumd 0 0 0
28
LFrustumd::~LFrustumd(void);

1100 18 BoundingHexahedron 0 4 1276 38 BoundingHexahedron::BoundingHexahedron 0 3 472 473 474 1188
// Filename: boundingHexahedron.I
// Created by:  drose (03Oct99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
324
BoundingHexahedron::BoundingHexahedron(LFrustumf const &frustum, bool is_ortho, CoordinateSystem cs = (CS_default));
BoundingHexahedron::BoundingHexahedron(LPoint3f const &fll, LPoint3f const &flr, LPoint3f const &fur, LPoint3f const &ful, LPoint3f const &nll, LPoint3f const &nlr, LPoint3f const &nur, LPoint3f const &nul);

1101 14 get_num_points 0 4 1276 34 BoundingHexahedron::get_num_points 0 1 475 284
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a hexahedron.
////////////////////////////////////////////////////////////////////
58
inline int BoundingHexahedron::get_num_points(void) const;

1102 9 get_point 0 4 1276 29 BoundingHexahedron::get_point 0 1 476 270
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_point
//       Access: Published
//  Description: Returns the nth vertex of the hexahedron.
////////////////////////////////////////////////////////////////////
59
inline LPoint3f BoundingHexahedron::get_point(int n) const;

1103 14 get_num_planes 0 4 1276 34 BoundingHexahedron::get_num_planes 0 1 477 281
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a hexahedron.
////////////////////////////////////////////////////////////////////
58
inline int BoundingHexahedron::get_num_planes(void) const;

1104 9 get_plane 0 4 1276 29 BoundingHexahedron::get_plane 0 1 478 268
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_plane
//       Access: Published
//  Description: Returns the nth face of the hexahedron.
////////////////////////////////////////////////////////////////////
58
inline LPlanef BoundingHexahedron::get_plane(int n) const;

1105 14 get_class_type 0 4 1276 34 BoundingHexahedron::get_class_type 0 1 479 0
59
static TypeHandle BoundingHexahedron::get_class_type(void);

1106 19 ~BoundingHexahedron 0 4 1276 39 BoundingHexahedron::~BoundingHexahedron 0 0 0
46
BoundingHexahedron::~BoundingHexahedron(void);

1107 12 BoundingLine 0 4 1277 26 BoundingLine::BoundingLine 0 1 480 937
// Filename: boundingLine.I
// Created by:  drose (04Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
inline BoundingLine::BoundingLine(LPoint3f const &a, LPoint3f const &b);

1108 12 operator new 0 4 1277 26 BoundingLine::operator new 0 1 481 0
130
inline void *BoundingLine::operator new(unsigned int size);
inline void *BoundingLine::operator new(unsigned int size, void *ptr);

1109 15 operator delete 0 4 1277 29 BoundingLine::operator delete 0 0 0
112
inline void BoundingLine::operator delete(void *ptr);
inline void BoundingLine::operator delete(void *, void *);

1110 12 validate_ptr 0 4 1277 26 BoundingLine::validate_ptr 0 0 0
63
static inline bool BoundingLine::validate_ptr(void const *ptr);

1111 11 get_point_a 0 4 1277 25 BoundingLine::get_point_a 0 1 482 271
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_a
//       Access: Published
//  Description: Returns the first point that defines the line.
////////////////////////////////////////////////////////////////////
61
inline LPoint3f const &BoundingLine::get_point_a(void) const;

1112 11 get_point_b 0 4 1277 25 BoundingLine::get_point_b 0 1 483 272
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_b
//       Access: Published
//  Description: Returns the second point that defines the line.
////////////////////////////////////////////////////////////////////
54
inline LPoint3f BoundingLine::get_point_b(void) const;

1113 14 get_class_type 0 4 1277 28 BoundingLine::get_class_type 0 1 484 0
53
static TypeHandle BoundingLine::get_class_type(void);

1114 13 ~BoundingLine 0 4 1277 27 BoundingLine::~BoundingLine 0 0 0
34
BoundingLine::~BoundingLine(void);

1115 13 BoundingPlane 0 4 1278 28 BoundingPlane::BoundingPlane 0 2 485 486 1022
// Filename: boundingPlane.I
// Created by:  drose (19Aug05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Default Constructor
//       Access: Published
//  Description: Constructs an empty "plane" that has no
//               intersections.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
101
inline BoundingPlane::BoundingPlane(void);
inline BoundingPlane::BoundingPlane(LPlanef const &plane);

1116 12 operator new 0 4 1278 27 BoundingPlane::operator new 0 1 487 0
132
inline void *BoundingPlane::operator new(unsigned int size);
inline void *BoundingPlane::operator new(unsigned int size, void *ptr);

1117 15 operator delete 0 4 1278 30 BoundingPlane::operator delete 0 0 0
114
inline void BoundingPlane::operator delete(void *ptr);
inline void BoundingPlane::operator delete(void *, void *);

1118 12 validate_ptr 0 4 1278 27 BoundingPlane::validate_ptr 0 0 0
64
static inline bool BoundingPlane::validate_ptr(void const *ptr);

1119 9 get_plane 0 4 1278 24 BoundingPlane::get_plane 0 1 488 224
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::get_plane
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline LPlanef const &BoundingPlane::get_plane(void) const;

1120 14 get_class_type 0 4 1278 29 BoundingPlane::get_class_type 0 1 489 0
54
static TypeHandle BoundingPlane::get_class_type(void);

1121 14 ~BoundingPlane 0 4 1278 29 BoundingPlane::~BoundingPlane 0 0 0
36
BoundingPlane::~BoundingPlane(void);

1122 14 BoundingSphere 0 4 1279 30 BoundingSphere::BoundingSphere 0 2 490 491 1002
// Filename: boundingSphere.I
// Created by:  drose (02Oct99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs an empty sphere.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs a specific sphere.
////////////////////////////////////////////////////////////////////
121
inline BoundingSphere::BoundingSphere(void);
inline BoundingSphere::BoundingSphere(LPoint3f const &center, float radius);

1123 12 operator new 0 4 1279 28 BoundingSphere::operator new 0 1 492 0
134
inline void *BoundingSphere::operator new(unsigned int size);
inline void *BoundingSphere::operator new(unsigned int size, void *ptr);

1124 15 operator delete 0 4 1279 31 BoundingSphere::operator delete 0 0 0
116
inline void BoundingSphere::operator delete(void *ptr);
inline void BoundingSphere::operator delete(void *, void *);

1125 12 validate_ptr 0 4 1279 28 BoundingSphere::validate_ptr 0 0 0
65
static inline bool BoundingSphere::validate_ptr(void const *ptr);

1126 10 get_center 0 4 1279 26 BoundingSphere::get_center 0 1 493 226
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_center
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline LPoint3f BoundingSphere::get_center(void) const;

1127 10 get_radius 0 4 1279 26 BoundingSphere::get_radius 0 1 494 226
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_radius
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
inline float BoundingSphere::get_radius(void) const;

1128 14 get_class_type 0 4 1279 30 BoundingSphere::get_class_type 0 1 495 0
55
static TypeHandle BoundingSphere::get_class_type(void);

1129 15 ~BoundingSphere 0 4 1279 31 BoundingSphere::~BoundingSphere 0 0 0
38
BoundingSphere::~BoundingSphere(void);

1130 26 IntersectionBoundingVolume 0 4 1280 54 IntersectionBoundingVolume::IntersectionBoundingVolume 0 1 496 1017
// Filename: intersectionBoundingVolume.I
// Created by:  drose (08Feb12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
68
inline IntersectionBoundingVolume::IntersectionBoundingVolume(void);

1131 12 operator new 0 4 1280 40 IntersectionBoundingVolume::operator new 0 1 497 0
158
inline void *IntersectionBoundingVolume::operator new(unsigned int size);
inline void *IntersectionBoundingVolume::operator new(unsigned int size, void *ptr);

1132 15 operator delete 0 4 1280 43 IntersectionBoundingVolume::operator delete 0 0 0
140
inline void IntersectionBoundingVolume::operator delete(void *ptr);
inline void IntersectionBoundingVolume::operator delete(void *, void *);

1133 12 validate_ptr 0 4 1280 40 IntersectionBoundingVolume::validate_ptr 0 0 0
77
static inline bool IntersectionBoundingVolume::validate_ptr(void const *ptr);

1134 18 get_num_components 0 4 1280 46 IntersectionBoundingVolume::get_num_components 0 1 498 299
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the intersection.
////////////////////////////////////////////////////////////////////
70
inline int IntersectionBoundingVolume::get_num_components(void) const;

1135 13 get_component 0 4 1280 41 IntersectionBoundingVolume::get_component 0 1 499 287
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the intersection.
////////////////////////////////////////////////////////////////////
93
inline GeometricBoundingVolume const *IntersectionBoundingVolume::get_component(int n) const;

1136 16 clear_components 0 4 1280 44 IntersectionBoundingVolume::clear_components 0 1 500 283
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
////////////////////////////////////////////////////////////////////
56
void IntersectionBoundingVolume::clear_components(void);

1137 13 add_component 0 4 1280 41 IntersectionBoundingVolume::add_component 0 1 501 693
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
////////////////////////////////////////////////////////////////////
89
void IntersectionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1138 14 get_class_type 0 4 1280 42 IntersectionBoundingVolume::get_class_type 0 1 502 0
67
static TypeHandle IntersectionBoundingVolume::get_class_type(void);

1139 27 ~IntersectionBoundingVolume 0 4 1280 55 IntersectionBoundingVolume::~IntersectionBoundingVolume 0 0 0
62
IntersectionBoundingVolume::~IntersectionBoundingVolume(void);

1140 8 heads_up 0 1 0 8 heads_up 0 24 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 1390
////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
////////////////////////////////////////////////////////////////////
1255
void heads_up(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void heads_up(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1141 7 look_at 0 1 0 7 look_at 0 24 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 1390
////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
////////////////////////////////////////////////////////////////////
1243
void look_at(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void look_at(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1142 8 Mersenne 0 4 1281 18 Mersenne::Mersenne 0 1 503 35
/* initializes mt[N] with a seed */
43
Mersenne::Mersenne(unsigned long int seed);

1143 10 get_uint31 0 4 1281 20 Mersenne::get_uint31 0 1 504 58
/* generates a random number on [0,0x7fffffff]-interval */
45
unsigned long int Mersenne::get_uint31(void);

1144 9 ~Mersenne 0 4 1281 19 Mersenne::~Mersenne 0 0 0
26
Mersenne::~Mersenne(void);

1145 18 OmniBoundingVolume 0 4 1282 38 OmniBoundingVolume::OmniBoundingVolume 0 1 505 721
// Filename: omniBoundingVolume.I
// Created by:  drose (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OmniBoundingVolume::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline OmniBoundingVolume::OmniBoundingVolume(void);

1146 14 get_class_type 0 4 1282 34 OmniBoundingVolume::get_class_type 0 1 506 0
59
static TypeHandle OmniBoundingVolume::get_class_type(void);

1147 19 ~OmniBoundingVolume 0 4 1282 39 OmniBoundingVolume::~OmniBoundingVolume 0 0 0
46
OmniBoundingVolume::~OmniBoundingVolume(void);

1148 19 UnionBoundingVolume 0 4 1283 40 UnionBoundingVolume::UnionBoundingVolume 0 1 507 989
// Filename: unionBoundingVolume.I
// Created by:  drose (08Feb12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty union.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline UnionBoundingVolume::UnionBoundingVolume(void);

1149 12 operator new 0 4 1283 33 UnionBoundingVolume::operator new 0 1 508 0
144
inline void *UnionBoundingVolume::operator new(unsigned int size);
inline void *UnionBoundingVolume::operator new(unsigned int size, void *ptr);

1150 15 operator delete 0 4 1283 36 UnionBoundingVolume::operator delete 0 0 0
126
inline void UnionBoundingVolume::operator delete(void *ptr);
inline void UnionBoundingVolume::operator delete(void *, void *);

1151 12 validate_ptr 0 4 1283 33 UnionBoundingVolume::validate_ptr 0 0 0
70
static inline bool UnionBoundingVolume::validate_ptr(void const *ptr);

1152 18 get_num_components 0 4 1283 39 UnionBoundingVolume::get_num_components 0 1 509 285
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the union.
////////////////////////////////////////////////////////////////////
63
inline int UnionBoundingVolume::get_num_components(void) const;

1153 13 get_component 0 4 1283 34 UnionBoundingVolume::get_component 0 1 510 273
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the union.
////////////////////////////////////////////////////////////////////
86
inline GeometricBoundingVolume const *UnionBoundingVolume::get_component(int n) const;

1154 16 clear_components 0 4 1283 37 UnionBoundingVolume::clear_components 0 1 511 276
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
////////////////////////////////////////////////////////////////////
49
void UnionBoundingVolume::clear_components(void);

1155 13 add_component 0 4 1283 34 UnionBoundingVolume::add_component 0 1 512 686
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
////////////////////////////////////////////////////////////////////
82
void UnionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1156 19 filter_intersection 0 4 1283 40 UnionBoundingVolume::filter_intersection 0 1 513 347
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::filter_intersection
//       Access: Published
//  Description: Removes from the union any components that have no
//               intersection with the indicated volume.
////////////////////////////////////////////////////////////////////
76
void UnionBoundingVolume::filter_intersection(BoundingVolume const *volume);

1157 14 get_class_type 0 4 1283 35 UnionBoundingVolume::get_class_type 0 1 514 0
60
static TypeHandle UnionBoundingVolume::get_class_type(void);

1158 20 ~UnionBoundingVolume 0 4 1283 41 UnionBoundingVolume::~UnionBoundingVolume 0 0 0
48
UnionBoundingVolume::~UnionBoundingVolume(void);

1159 10 Randomizer 0 4 1284 22 Randomizer::Randomizer 0 3 515 516 517 1044
// Filename: randomizer.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Constructor
//       Access: Public
//  Description: If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
115
inline Randomizer::Randomizer(unsigned long int seed = (0));
inline Randomizer::Randomizer(Randomizer const &copy);

1160 10 operator = 0 4 1284 22 Randomizer::operator = 0 1 518 233
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Assignment Operator
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void Randomizer::operator =(Randomizer const &copy);

1161 10 random_int 0 4 1284 22 Randomizer::random_int 0 1 519 268
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_int
//       Access: Public
//  Description: Returns a random integer in the range [0, range).
////////////////////////////////////////////////////////////////////
45
inline int Randomizer::random_int(int range);

1162 11 random_real 0 4 1284 23 Randomizer::random_real 0 1 520 268
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real
//       Access: Public
//  Description: Returns a random double in the range [0, range).
////////////////////////////////////////////////////////////////////
52
inline double Randomizer::random_real(double range);

1163 16 random_real_unit 0 4 1284 28 Randomizer::random_real_unit 0 1 521 274
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real_unit
//       Access: Public
//  Description: Returns a random double in the range [-0.5, 0.5).
////////////////////////////////////////////////////////////////////
49
inline double Randomizer::random_real_unit(void);

1164 13 get_next_seed 0 4 1284 25 Randomizer::get_next_seed 0 1 522 313
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_next_seed
//       Access: Public, Static
//  Description: Returns a random seed value for the next global
//               Randomizer object.
////////////////////////////////////////////////////////////////////
64
static inline unsigned long int Randomizer::get_next_seed(void);

1165 8 get_seed 0 4 1284 20 Randomizer::get_seed 0 1 523 363
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_seed
//       Access: Public
//  Description: Returns a unique seed value based on the seed value
//               passed to this Randomizer object (and on its current
//               state).
////////////////////////////////////////////////////////////////////
52
inline unsigned long int Randomizer::get_seed(void);

1166 11 ~Randomizer 0 4 1284 23 Randomizer::~Randomizer 0 0 0
30
Randomizer::~Randomizer(void);

1167 8 get_seed 0 4 1285 21 PerlinNoise::get_seed 0 1 524 368
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise::get_seed
//       Access: Published
//  Description: Returns a unique seed value based on the seed value
//               passed to this PerlinNoise object (and on its current
//               state).
////////////////////////////////////////////////////////////////////
53
inline unsigned long int PerlinNoise::get_seed(void);

1168 12 ~PerlinNoise 0 4 1285 25 PerlinNoise::~PerlinNoise 0 0 0
32
PerlinNoise::~PerlinNoise(void);

1169 12 PerlinNoise2 0 4 1286 26 PerlinNoise2::PerlinNoise2 0 5 525 526 527 528 529 1633
// Filename: perlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
212
inline PerlinNoise2::PerlinNoise2(void);
inline PerlinNoise2::PerlinNoise2(double sx, double sy, int table_size = (256), unsigned long int seed = (0));
inline PerlinNoise2::PerlinNoise2(PerlinNoise2 const &copy);

1170 10 operator = 0 4 1286 24 PerlinNoise2::operator = 0 1 530 337
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
63
inline void PerlinNoise2::operator =(PerlinNoise2 const &copy);

1171 9 set_scale 0 4 1286 23 PerlinNoise2::set_scale 0 4 531 532 533 534 1070
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////
233
inline void PerlinNoise2::set_scale(double scale);
inline void PerlinNoise2::set_scale(double sx, double sy);
inline void PerlinNoise2::set_scale(LVecBase2f const &scale);
inline void PerlinNoise2::set_scale(LVecBase2d const &scale);

1172 5 noise 0 4 1286 19 PerlinNoise2::noise 0 3 535 536 537 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
184
inline double PerlinNoise2::noise(double x, double y) const;
inline float PerlinNoise2::noise(LVecBase2f const &value) const;
double PerlinNoise2::noise(LVecBase2d const &value) const;

1173 11 operator () 0 4 1286 25 PerlinNoise2::operator () 0 3 538 539 540 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the two inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
////////////////////////////////////////////////////////////////////
209
inline double PerlinNoise2::operator ()(double x, double y) const;
inline float PerlinNoise2::operator ()(LVecBase2f const &value) const;
inline double PerlinNoise2::operator ()(LVecBase2d const &value) const;

1174 13 ~PerlinNoise2 0 4 1286 27 PerlinNoise2::~PerlinNoise2 0 0 0
34
PerlinNoise2::~PerlinNoise2(void);

1175 12 PerlinNoise3 0 4 1287 26 PerlinNoise3::PerlinNoise3 0 5 541 542 543 544 545 1633
// Filename: perlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
223
inline PerlinNoise3::PerlinNoise3(void);
inline PerlinNoise3::PerlinNoise3(double sx, double sy, double sz, int table_size = (256), unsigned long int seed = (0));
inline PerlinNoise3::PerlinNoise3(PerlinNoise3 const &copy);

1176 10 operator = 0 4 1287 24 PerlinNoise3::operator = 0 1 546 337
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
63
inline void PerlinNoise3::operator =(PerlinNoise3 const &copy);

1177 9 set_scale 0 4 1287 23 PerlinNoise3::set_scale 0 4 547 548 549 550 1070
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////
244
inline void PerlinNoise3::set_scale(double scale);
inline void PerlinNoise3::set_scale(double sx, double sy, double sz);
inline void PerlinNoise3::set_scale(LVecBase3f const &scale);
inline void PerlinNoise3::set_scale(LVecBase3d const &scale);

1178 5 noise 0 4 1287 19 PerlinNoise3::noise 0 3 551 552 553 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
194
inline double PerlinNoise3::noise(double x, double y, double z) const;
inline float PerlinNoise3::noise(LVecBase3f const &value) const;
double PerlinNoise3::noise(LVecBase3d const &value) const;

1179 11 operator () 0 4 1287 25 PerlinNoise3::operator () 0 3 554 555 556 808
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
219
inline double PerlinNoise3::operator ()(double x, double y, double z) const;
inline float PerlinNoise3::operator ()(LVecBase3f const &value) const;
inline double PerlinNoise3::operator ()(LVecBase3d const &value) const;

1180 13 ~PerlinNoise3 0 4 1287 27 PerlinNoise3::~PerlinNoise3 0 0 0
34
PerlinNoise3::~PerlinNoise3(void);

1181 9 rotate_to 0 1 0 9 rotate_to 0 4 665 666 667 668 0
287
void rotate_to(LMatrix3f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix3d &mat, LVector3d const &a, LVector3d const &b);
void rotate_to(LMatrix4f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix4d &mat, LVector3d const &a, LVector3d const &b);

1182 19 StackedPerlinNoise2 0 4 1288 40 StackedPerlinNoise2::StackedPerlinNoise2 0 8 557 558 559 560 561 562 563 564 1865
// Filename: stackedPerlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise2 object with no levels.
//               You should call add_level() to add each level by
//               hand.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
322
inline StackedPerlinNoise2::StackedPerlinNoise2(void);
StackedPerlinNoise2::StackedPerlinNoise2(double sx, double sy, int num_levels = (2), double scale_factor = (4), double amp_scale = (0.5), int table_size = (256), unsigned long int seed = (0));
StackedPerlinNoise2::StackedPerlinNoise2(StackedPerlinNoise2 const &copy);

1183 10 operator = 0 4 1288 31 StackedPerlinNoise2::operator = 0 1 565 376
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
70
void StackedPerlinNoise2::operator =(StackedPerlinNoise2 const &copy);

1184 9 add_level 0 4 1288 30 StackedPerlinNoise2::add_level 0 2 566 567 328
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
////////////////////////////////////////////////////////////////////
81
void StackedPerlinNoise2::add_level(PerlinNoise2 const &level, double amp = (1));

1185 5 clear 0 4 1288 26 StackedPerlinNoise2::clear 0 1 568 327
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
////////////////////////////////////////////////////////////////////
38
void StackedPerlinNoise2::clear(void);

1186 5 noise 0 4 1288 26 StackedPerlinNoise2::noise 0 3 569 570 571 823
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
187
inline double StackedPerlinNoise2::noise(double x, double y);
inline float StackedPerlinNoise2::noise(LVecBase2f const &value);
double StackedPerlinNoise2::noise(LVecBase2d const &value);

1187 11 operator () 0 4 1288 32 StackedPerlinNoise2::operator () 0 3 572 573 574 829
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
212
inline double StackedPerlinNoise2::operator ()(double x, double y);
inline float StackedPerlinNoise2::operator ()(LVecBase2f const &value);
inline double StackedPerlinNoise2::operator ()(LVecBase2d const &value);

1188 20 ~StackedPerlinNoise2 0 4 1288 41 StackedPerlinNoise2::~StackedPerlinNoise2 0 0 0
48
StackedPerlinNoise2::~StackedPerlinNoise2(void);

1189 19 StackedPerlinNoise3 0 4 1289 40 StackedPerlinNoise3::StackedPerlinNoise3 0 8 575 576 577 578 579 580 581 582 1865
// Filename: stackedPerlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise3 object with no levels.
//               You should call add_level() to add each level by
//               hand.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
333
inline StackedPerlinNoise3::StackedPerlinNoise3(void);
StackedPerlinNoise3::StackedPerlinNoise3(double sx, double sy, double sz, int num_levels = (3), double scale_factor = (4), double amp_scale = (0.5), int table_size = (256), unsigned long int seed = (0));
StackedPerlinNoise3::StackedPerlinNoise3(StackedPerlinNoise3 const &copy);

1190 10 operator = 0 4 1289 31 StackedPerlinNoise3::operator = 0 1 583 376
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
70
void StackedPerlinNoise3::operator =(StackedPerlinNoise3 const &copy);

1191 9 add_level 0 4 1289 30 StackedPerlinNoise3::add_level 0 2 584 585 328
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
////////////////////////////////////////////////////////////////////
81
void StackedPerlinNoise3::add_level(PerlinNoise3 const &level, double amp = (1));

1192 5 clear 0 4 1289 26 StackedPerlinNoise3::clear 0 1 586 327
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
////////////////////////////////////////////////////////////////////
38
void StackedPerlinNoise3::clear(void);

1193 5 noise 0 4 1289 26 StackedPerlinNoise3::noise 0 3 587 588 589 823
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
197
inline double StackedPerlinNoise3::noise(double x, double y, double z);
inline float StackedPerlinNoise3::noise(LVecBase3f const &value);
double StackedPerlinNoise3::noise(LVecBase3d const &value);

1194 11 operator () 0 4 1289 32 StackedPerlinNoise3::operator () 0 3 590 591 592 829
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
222
inline double StackedPerlinNoise3::operator ()(double x, double y, double z);
inline float StackedPerlinNoise3::operator ()(LVecBase3f const &value);
inline double StackedPerlinNoise3::operator ()(LVecBase3d const &value);

1195 20 ~StackedPerlinNoise3 0 4 1289 41 StackedPerlinNoise3::~StackedPerlinNoise3 0 0 0
48
StackedPerlinNoise3::~StackedPerlinNoise3(void);

1196 12 Triangulator 0 4 1290 26 Triangulator::Triangulator 0 1 593 225
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
33
Triangulator::Triangulator(void);

1197 5 clear 0 4 1290 19 Triangulator::clear 0 1 594 337
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
////////////////////////////////////////////////////////////////////
31
void Triangulator::clear(void);

1198 10 add_vertex 0 4 1290 24 Triangulator::add_vertex 0 2 595 596 1114
// Filename: triangulator.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////
109
int Triangulator::add_vertex(LPoint2d const &point);
inline int Triangulator::add_vertex(double x, double y);

1199 16 get_num_vertices 0 4 1290 30 Triangulator::get_num_vertices 0 1 597 545
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
////////////////////////////////////////////////////////////////////
54
inline int Triangulator::get_num_vertices(void) const;

1200 10 get_vertex 0 4 1290 24 Triangulator::get_vertex 0 1 598 247
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
////////////////////////////////////////////////////////////////////
61
inline LPoint2d const &Triangulator::get_vertex(int n) const;

1201 13 clear_polygon 0 4 1290 27 Triangulator::clear_polygon 0 1 599 342
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear_polygon
//       Access: Published
//  Description: Removes the current polygon definition (and its set
//               of holes), but does not clear the vertex pool.
////////////////////////////////////////////////////////////////////
39
void Triangulator::clear_polygon(void);

1202 18 add_polygon_vertex 0 4 1290 32 Triangulator::add_polygon_vertex 0 1 600 645
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_polygon_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the polygon.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.  In particular, do not repeat the first
//               vertex at the end.
////////////////////////////////////////////////////////////////////
49
void Triangulator::add_polygon_vertex(int index);

1203 15 is_left_winding 0 4 1290 29 Triangulator::is_left_winding 0 1 601 394
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::is_left_winding
//       Access: Published
//  Description: Returns true if the polygon vertices are listed in
//               counterclockwise order, or false if they appear to be
//               listed in clockwise order.
////////////////////////////////////////////////////////////////////
54
inline bool Triangulator::is_left_winding(void) const;

1204 10 begin_hole 0 4 1290 24 Triangulator::begin_hole 0 1 602 308
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::begin_hole
//       Access: Published
//  Description: Finishes the previous hole, if any, and prepares to
//               add a new hole.
////////////////////////////////////////////////////////////////////
36
void Triangulator::begin_hole(void);

1205 15 add_hole_vertex 0 4 1290 29 Triangulator::add_hole_vertex 0 1 603 571
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_hole_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the current hole.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.
////////////////////////////////////////////////////////////////////
46
void Triangulator::add_hole_vertex(int index);

1206 11 triangulate 0 4 1290 25 Triangulator::triangulate 0 1 604 439
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
////////////////////////////////////////////////////////////////////
37
void Triangulator::triangulate(void);

1207 17 get_num_triangles 0 4 1290 31 Triangulator::get_num_triangles 0 1 605 328
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_triangles
//       Access: Published
//  Description: Returns the number of triangles generated by the
//               previous call to triangulate().
////////////////////////////////////////////////////////////////////
48
int Triangulator::get_num_triangles(void) const;

1208 15 get_triangle_v0 0 4 1290 29 Triangulator::get_triangle_v0 0 1 606 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v0
//       Access: Published
//  Description: Returns vertex 0 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v0(int n) const;

1209 15 get_triangle_v1 0 4 1290 29 Triangulator::get_triangle_v1 0 1 607 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v1
//       Access: Published
//  Description: Returns vertex 1 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v1(int n) const;

1210 15 get_triangle_v2 0 4 1290 29 Triangulator::get_triangle_v2 0 1 608 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v2
//       Access: Published
//  Description: Returns vertex 2 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v2(int n) const;

1211 13 ~Triangulator 0 4 1290 27 Triangulator::~Triangulator 0 0 0
34
Triangulator::~Triangulator(void);

1212 13 Triangulator3 0 4 1291 28 Triangulator3::Triangulator3 0 1 609 226
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
35
Triangulator3::Triangulator3(void);

1213 5 clear 0 4 1291 20 Triangulator3::clear 0 1 610 338
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
////////////////////////////////////////////////////////////////////
32
void Triangulator3::clear(void);

1214 10 add_vertex 0 4 1291 25 Triangulator3::add_vertex 0 2 611 612 1117
// Filename: triangulator3.I
// Created by:  drose (03Jan13)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////
121
int Triangulator3::add_vertex(LPoint3d const &point);
inline int Triangulator3::add_vertex(double x, double y, double z);

1215 16 get_num_vertices 0 4 1291 31 Triangulator3::get_num_vertices 0 1 613 546
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
////////////////////////////////////////////////////////////////////
55
inline int Triangulator3::get_num_vertices(void) const;

1216 10 get_vertex 0 4 1291 25 Triangulator3::get_vertex 0 1 614 248
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
////////////////////////////////////////////////////////////////////
62
inline LPoint3d const &Triangulator3::get_vertex(int n) const;

1217 11 triangulate 0 4 1291 26 Triangulator3::triangulate 0 1 615 440
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
////////////////////////////////////////////////////////////////////
38
void Triangulator3::triangulate(void);

1218 9 get_plane 0 4 1291 24 Triangulator3::get_plane 0 1 616 327
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_plane
//       Access: Published
//  Description: Returns the plane of the polygon.  This is only
//               available after calling triangulate().
////////////////////////////////////////////////////////////////////
59
inline LPlaned const &Triangulator3::get_plane(void) const;

1219 14 ~Triangulator3 0 4 1291 29 Triangulator3::~Triangulator3 0 0 0
36
Triangulator3::~Triangulator3(void);

668
1 14 Dtool_LL_p8UqP 0 7 8 1294 682 14 Dtool_LL_p8UqP 0 1 4 copy 1 1292  
2 14 Dtool_LL_pBbKJ 0 7 8 1294 682 14 Dtool_LL_pBbKJ 0 1 4 copy 1 1295  
3 14 Dtool_LL_pkmAP 0 7 8 1294 682 14 Dtool_LL_pkmAP 0 2 4 self 1 1297  6 source 1 1297  
4 14 Dtool_LL_pLoYb 0 6 9 1299 0 14 Dtool_LL_pLoYb 0 1 4 this 3 1292  
5 14 Dtool_LL_pdtz1 0 6 10 1300 0 14 Dtool_LL_pdtz1 0 2 4 this 3 1292  1 n 1 1299  
6 14 Dtool_LL_pyBEt 0 6 11 1300 0 14 Dtool_LL_pyBEt 0 2 4 this 3 1292  1 n 1 1299  
7 14 Dtool_LL_p4SAf 0 6 12 1303 0 14 Dtool_LL_p4SAf 0 1 4 this 3 1292  
8 14 Dtool_LL_pIPQw 0 6 13 1303 0 14 Dtool_LL_pIPQw 0 3 4 this 3 1292  1 n 1 1299  5 count 1 1299  
9 14 Dtool_LL_py8mi 0 6 14 1304 0 14 Dtool_LL_py8mi 0 1 4 this 3 1292  
10 14 Dtool_LL_pVkxg 0 6 15 1304 0 14 Dtool_LL_pVkxg 0 1 4 this 3 1292  
11 14 Dtool_LL_pQFDq 0 6 16 1304 0 14 Dtool_LL_pQFDq 0 4 4 this 3 1292  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
12 14 Dtool_LL_phMem 0 4 17 1307 0 14 Dtool_LL_phMem 0 3 4 this 3 1292  4 self 1 1297  4 view 1 1305  
13 14 Dtool_LL_pPOpe 0 4 5 1307 0 14 Dtool_LL_pPOpe 0 1 4 this 3 1308  
14 14 Dtool_LL_pEcA1 0 4 6 1307 0 14 Dtool_LL_pEcA1 0 2 4 this 3 1309  3 out 1 1311  
15 14 Dtool_LL_prVxk 0 7 25 1315 696 14 Dtool_LL_prVxk 0 1 4 copy 1 1313  
16 14 Dtool_LL_ppaza 0 7 25 1315 696 14 Dtool_LL_ppaza 0 1 4 copy 1 1316  
17 14 Dtool_LL_pnmHd 0 7 25 1315 696 14 Dtool_LL_pnmHd 0 2 4 self 1 1297  6 source 1 1297  
18 14 Dtool_LL_pKofp 0 6 26 1299 0 14 Dtool_LL_pKofp 0 1 4 this 3 1313  
19 14 Dtool_LL_pft6D 0 6 27 1318 0 14 Dtool_LL_pft6D 0 2 4 this 3 1313  1 n 1 1299  
20 14 Dtool_LL_p1BL7 0 6 28 1318 0 14 Dtool_LL_p1BL7 0 2 4 this 3 1313  1 n 1 1299  
21 14 Dtool_LL_p_SHt 0 6 29 1303 0 14 Dtool_LL_p_SHt 0 1 4 this 3 1313  
22 14 Dtool_LL_pJPZ_ 0 6 30 1303 0 14 Dtool_LL_pJPZ_ 0 3 4 this 3 1313  1 n 1 1299  5 count 1 1299  
23 14 Dtool_LL_px8tw 0 6 31 1304 0 14 Dtool_LL_px8tw 0 1 4 this 3 1313  
24 14 Dtool_LL_pUk4u 0 6 32 1304 0 14 Dtool_LL_pUk4u 0 1 4 this 3 1313  
25 14 Dtool_LL_pTFK4 0 6 33 1304 0 14 Dtool_LL_pTFK4 0 4 4 this 3 1313  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
26 14 Dtool_LL_piMl0 0 4 34 1307 0 14 Dtool_LL_piMl0 0 3 4 this 3 1313  4 self 1 1297  4 view 1 1305  
27 14 Dtool_LL_pPF3f 0 4 22 1307 0 14 Dtool_LL_pPF3f 0 1 4 this 3 1321  
28 14 Dtool_LL_pEXO2 0 4 23 1307 0 14 Dtool_LL_pEXO2 0 2 4 this 3 1322  3 out 1 1311  
29 14 Dtool_LL_p6k38 0 7 42 1326 710 14 Dtool_LL_p6k38 0 1 4 copy 1 1324  
30 14 Dtool_LL_pn6GJ 0 7 42 1326 710 14 Dtool_LL_pn6GJ 0 1 4 copy 1 1327  
31 14 Dtool_LL_pjKdf 0 7 42 1326 710 14 Dtool_LL_pjKdf 0 2 4 self 1 1297  6 source 1 1297  
32 14 Dtool_LL_pGRVp 0 6 43 1299 0 14 Dtool_LL_pGRVp 0 1 4 this 3 1324  
33 14 Dtool_LL_pcDC4 0 6 44 1329 0 14 Dtool_LL_pcDC4 0 2 4 this 3 1324  1 n 1 1299  
34 14 Dtool_LL_pCq1g 0 6 45 1329 0 14 Dtool_LL_pCq1g 0 2 4 this 3 1324  1 n 1 1299  
35 14 Dtool_LL_pIjLd 0 6 46 1303 0 14 Dtool_LL_pIjLd 0 1 4 this 3 1324  
36 14 Dtool_LL_pa_qG 0 6 47 1303 0 14 Dtool_LL_pa_qG 0 3 4 this 3 1324  1 n 1 1299  5 count 1 1299  
37 14 Dtool_LL_pzjgQ 0 6 48 1304 0 14 Dtool_LL_pzjgQ 0 1 4 this 3 1324  
38 14 Dtool_LL_pCwxW 0 6 49 1304 0 14 Dtool_LL_pCwxW 0 1 4 this 3 1324  
39 14 Dtool_LL_pQ0OC 0 6 50 1304 0 14 Dtool_LL_pQ0OC 0 4 4 this 3 1324  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
40 14 Dtool_LL_pbnUP 0 4 51 1307 0 14 Dtool_LL_pbnUP 0 3 4 this 3 1324  4 self 1 1297  4 view 1 1305  
41 14 Dtool_LL_pnoEy 0 4 39 1307 0 14 Dtool_LL_pnoEy 0 1 4 this 3 1332  
42 14 Dtool_LL_p6Pu_ 0 4 40 1307 0 14 Dtool_LL_p6Pu_ 0 2 4 this 3 1333  3 out 1 1311  
43 14 Dtool_LL_piMrA 0 7 59 1337 724 14 Dtool_LL_piMrA 0 1 4 copy 1 1335  
44 14 Dtool_LL_p2OwM 0 7 59 1337 724 14 Dtool_LL_p2OwM 0 1 4 copy 1 1338  
45 14 Dtool_LL_pKK9i 0 7 59 1337 724 14 Dtool_LL_pKK9i 0 2 4 self 1 1297  6 source 1 1297  
46 14 Dtool_LL_phR1s 0 6 60 1299 0 14 Dtool_LL_phR1s 0 1 4 this 3 1335  
47 14 Dtool_LL_pFCi7 0 6 61 1340 0 14 Dtool_LL_pFCi7 0 2 4 this 3 1335  1 n 1 1299  
48 14 Dtool_LL_p5qVk 0 6 62 1340 0 14 Dtool_LL_p5qVk 0 2 4 this 3 1335  1 n 1 1299  
49 14 Dtool_LL_pvjrg 0 6 63 1303 0 14 Dtool_LL_pvjrg 0 1 4 this 3 1335  
50 14 Dtool_LL_pz9KK 0 6 64 1303 0 14 Dtool_LL_pz9KK 0 3 4 this 3 1335  1 n 1 1299  5 count 1 1299  
51 14 Dtool_LL_pUjAU 0 6 65 1304 0 14 Dtool_LL_pUjAU 0 1 4 this 3 1335  
52 14 Dtool_LL_plwRa 0 6 66 1304 0 14 Dtool_LL_plwRa 0 1 4 this 3 1335  
53 14 Dtool_LL_pr1uF 0 6 67 1304 0 14 Dtool_LL_pr1uF 0 4 4 this 3 1335  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
54 14 Dtool_LL_pAm0S 0 4 68 1307 0 14 Dtool_LL_pAm0S 0 3 4 this 3 1335  4 self 1 1297  4 view 1 1305  
55 14 Dtool_LL_pkIIZ 0 4 56 1307 0 14 Dtool_LL_pkIIZ 0 1 4 this 3 1343  
56 14 Dtool_LL_p5vzm 0 4 57 1307 0 14 Dtool_LL_p5vzm 0 2 4 this 3 1344  3 out 1 1311  
57 14 Dtool_LL_pZ47T 0 7 76 1348 738 14 Dtool_LL_pZ47T 0 1 4 copy 1 1346  
58 14 Dtool_LL_p0kKo 0 7 76 1348 738 14 Dtool_LL_p0kKo 0 1 4 copy 1 1349  
59 14 Dtool_LL_psqhG 0 7 76 1348 738 14 Dtool_LL_psqhG 0 2 4 self 1 1297  6 source 1 1297  
60 14 Dtool_LL_pHxZQ 0 6 77 1299 0 14 Dtool_LL_pHxZQ 0 1 4 this 3 1346  
61 14 Dtool_LL_pfjFf 0 6 78 1351 0 14 Dtool_LL_pfjFf 0 2 4 this 3 1346  1 n 1 1299  
62 14 Dtool_LL_pDK4H 0 6 79 1351 0 14 Dtool_LL_pDK4H 0 2 4 this 3 1346  1 n 1 1299  
63 14 Dtool_LL_pJDPE 0 6 80 1303 0 14 Dtool_LL_pJDPE 0 1 4 this 3 1346  
64 14 Dtool_LL_paeut 0 6 81 1303 0 14 Dtool_LL_paeut 0 3 4 this 3 1346  1 n 1 1299  5 count 1 1299  
65 14 Dtool_LL_pzDj3 0 6 82 1304 0 14 Dtool_LL_pzDj3 0 1 4 this 3 1346  
66 14 Dtool_LL_pCQ09 0 6 83 1304 0 14 Dtool_LL_pCQ09 0 1 4 this 3 1346  
67 14 Dtool_LL_pQUSp 0 6 84 1304 0 14 Dtool_LL_pQUSp 0 4 4 this 3 1346  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
68 14 Dtool_LL_pbHX2 0 4 85 1307 0 14 Dtool_LL_pbHX2 0 3 4 this 3 1346  4 self 1 1297  4 view 1 1305  
69 14 Dtool_LL_pHkry 0 4 73 1307 0 14 Dtool_LL_pHkry 0 1 4 this 3 1354  
70 14 Dtool_LL_pZTXA 0 4 74 1307 0 14 Dtool_LL_pZTXA 0 2 4 this 3 1355  3 out 1 1311  
71 14 Dtool_LL_pAfuX 0 7 93 1359 752 14 Dtool_LL_pAfuX 0 1 4 copy 1 1357  
72 14 Dtool_LL_pHUzr 0 7 93 1359 752 14 Dtool_LL_pHUzr 0 1 4 copy 1 1360  
73 14 Dtool_LL_pLqBK 0 7 93 1359 752 14 Dtool_LL_pLqBK 0 2 4 self 1 1297  6 source 1 1297  
74 14 Dtool_LL_pux5T 0 6 94 1299 0 14 Dtool_LL_pux5T 0 1 4 this 3 1357  
75 14 Dtool_LL_pEili 0 6 95 1362 0 14 Dtool_LL_pEili 0 2 4 this 3 1357  1 n 1 1299  
76 14 Dtool_LL_p6KYL 0 6 96 1362 0 14 Dtool_LL_p6KYL 0 2 4 this 3 1357  1 n 1 1299  
77 14 Dtool_LL_pgDvH 0 6 97 1303 0 14 Dtool_LL_pgDvH 0 1 4 this 3 1357  
78 14 Dtool_LL_pzdOx 0 6 98 1303 0 14 Dtool_LL_pzdOx 0 3 4 this 3 1357  1 n 1 1299  5 count 1 1299  
79 14 Dtool_LL_pUDD7 0 6 99 1304 0 14 Dtool_LL_pUDD7 0 1 4 this 3 1357  
80 14 Dtool_LL_pqQUB 0 6 100 1304 0 14 Dtool_LL_pqQUB 0 1 4 this 3 1357  
81 14 Dtool_LL_prVys 0 6 101 1304 0 14 Dtool_LL_prVys 0 4 4 this 3 1357  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
82 14 Dtool_LL_pAG35 0 4 102 1307 0 14 Dtool_LL_pAG35 0 3 4 this 3 1357  4 self 1 1297  4 view 1 1305  
83 14 Dtool_LL_pEEvZ 0 4 90 1307 0 14 Dtool_LL_pEEvZ 0 1 4 this 3 1365  
84 14 Dtool_LL_pZzYn 0 4 91 1307 0 14 Dtool_LL_pZzYn 0 2 4 this 3 1366  3 out 1 1311  
85 14 Dtool_LL_pIjZj 0 7 110 1370 766 14 Dtool_LL_pIjZj 0 1 4 copy 1 1368  
86 14 Dtool_LL_p0fsj 0 7 110 1370 766 14 Dtool_LL_p0fsj 0 1 4 copy 1 1371  
87 14 Dtool_LL_pPdmd 0 7 110 1370 766 14 Dtool_LL_pPdmd 0 2 4 self 1 1297  6 source 1 1297  
88 14 Dtool_LL_p45Pf 0 6 111 1299 0 14 Dtool_LL_p45Pf 0 1 4 this 3 1368  
89 14 Dtool_LL_pp7fi 0 6 112 1373 0 14 Dtool_LL_pp7fi 0 2 4 this 3 1368  1 n 1 1299  
90 14 Dtool_LL_pXMaR 0 6 113 1373 0 14 Dtool_LL_pXMaR 0 2 4 this 3 1368  1 n 1 1299  
91 14 Dtool_LL_poMr_ 0 6 114 1303 0 14 Dtool_LL_poMr_ 0 1 4 this 3 1368  
92 14 Dtool_LL_pPquB 0 6 115 1303 0 14 Dtool_LL_pPquB 0 3 4 this 3 1368  1 n 1 1299  5 count 1 1299  
93 14 Dtool_LL_pCJFo 0 6 116 1304 0 14 Dtool_LL_pCJFo 0 1 4 this 3 1368  
94 14 Dtool_LL_psO2H 0 6 117 1304 0 14 Dtool_LL_psO2H 0 1 4 this 3 1368  
95 14 Dtool_LL_pu9_o 0 6 118 1304 0 14 Dtool_LL_pu9_o 0 4 4 this 3 1368  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
96 14 Dtool_LL_p9Mho 0 4 119 1307 0 14 Dtool_LL_p9Mho 0 3 4 this 3 1368  4 self 1 1297  4 view 1 1305  
97 14 Dtool_LL_pYk24 0 4 107 1307 0 14 Dtool_LL_pYk24 0 1 4 this 3 1376  
98 14 Dtool_LL_pIEmL 0 4 108 1307 0 14 Dtool_LL_pIEmL 0 2 4 this 3 1377  3 out 1 1311  
99 14 Dtool_LL_pL7R7 0 7 127 1381 780 14 Dtool_LL_pL7R7 0 1 4 copy 1 1379  
100 14 Dtool_LL_p13gU 0 7 127 1381 780 14 Dtool_LL_p13gU 0 1 4 copy 1 1382  
101 14 Dtool_LL_pPVXn 0 7 127 1381 780 14 Dtool_LL_pPVXn 0 2 4 self 1 1297  6 source 1 1297  
102 14 Dtool_LL_p4xAp 0 6 128 1299 0 14 Dtool_LL_p4xAp 0 1 4 this 3 1379  
103 14 Dtool_LL_ppzOs 0 6 129 1384 0 14 Dtool_LL_ppzOs 0 2 4 this 3 1379  1 n 1 1299  
104 14 Dtool_LL_pXELb 0 6 130 1384 0 14 Dtool_LL_pXELb 0 2 4 this 3 1379  1 n 1 1299  
105 14 Dtool_LL_ppUcJ 0 6 131 1303 0 14 Dtool_LL_ppUcJ 0 1 4 this 3 1379  
106 14 Dtool_LL_pPifL 0 6 132 1303 0 14 Dtool_LL_pPifL 0 3 4 this 3 1379  1 n 1 1299  5 count 1 1299  
107 14 Dtool_LL_pCB2x 0 6 133 1304 0 14 Dtool_LL_pCB2x 0 1 4 this 3 1379  
108 14 Dtool_LL_psGnR 0 6 134 1304 0 14 Dtool_LL_psGnR 0 1 4 this 3 1379  
109 14 Dtool_LL_pu1vy 0 6 135 1304 0 14 Dtool_LL_pu1vy 0 4 4 this 3 1379  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
110 14 Dtool_LL_p9ESy 0 4 136 1307 0 14 Dtool_LL_p9ESy 0 3 4 this 3 1379  4 self 1 1297  4 view 1 1305  
111 14 Dtool_LL_pQX_4 0 4 124 1307 0 14 Dtool_LL_pQX_4 0 1 4 this 3 1387  
112 14 Dtool_LL_pAXwL 0 4 125 1307 0 14 Dtool_LL_pAXwL 0 2 4 this 3 1388  3 out 1 1311  
113 14 Dtool_LL_png8j 0 7 144 1392 794 14 Dtool_LL_png8j 0 1 4 copy 1 1390  
114 14 Dtool_LL_pBa_J 0 7 144 1392 794 14 Dtool_LL_pBa_J 0 1 4 copy 1 1393  
115 14 Dtool_LL_pBhQh 0 7 144 1392 794 14 Dtool_LL_pBhQh 0 2 4 self 1 1297  6 source 1 1297  
116 14 Dtool_LL_p6gkS 0 6 145 1299 0 14 Dtool_LL_p6gkS 0 1 4 this 3 1390  
117 14 Dtool_LL_pQ6W8 0 6 146 1395 0 14 Dtool_LL_pQ6W8 0 2 4 this 3 1390  1 n 1 1299  
118 14 Dtool_LL_pZ7dZ 0 6 147 1395 0 14 Dtool_LL_pZ7dZ 0 2 4 this 3 1390  1 n 1 1299  
119 14 Dtool_LL_pV8Dh 0 6 148 1303 0 14 Dtool_LL_pV8Dh 0 1 4 this 3 1390  
120 14 Dtool_LL_pksLm 0 6 149 1303 0 14 Dtool_LL_pksLm 0 3 4 this 3 1390  1 n 1 1299  5 count 1 1299  
121 14 Dtool_LL_prjbv 0 6 150 1304 0 14 Dtool_LL_prjbv 0 1 4 this 3 1390  
122 14 Dtool_LL_pIPMo 0 6 151 1304 0 14 Dtool_LL_pIPMo 0 1 4 this 3 1390  
123 14 Dtool_LL_pp8kN 0 6 152 1304 0 14 Dtool_LL_pp8kN 0 4 4 this 3 1390  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
124 14 Dtool_LL_pPFO_ 0 4 153 1307 0 14 Dtool_LL_pPFO_ 0 3 4 this 3 1390  4 self 1 1297  4 view 1 1305  
125 14 Dtool_LL_pG_a7 0 4 141 1307 0 14 Dtool_LL_pG_a7 0 1 4 this 3 1398  
126 14 Dtool_LL_pC1FV 0 4 142 1307 0 14 Dtool_LL_pC1FV 0 2 4 this 3 1399  3 out 1 1311  
127 14 Dtool_LL_p_UYM 0 7 161 1403 808 14 Dtool_LL_p_UYM 0 1 4 copy 1 1401  
128 14 Dtool_LL_pzea6 0 7 161 1403 808 14 Dtool_LL_pzea6 0 1 4 copy 1 1404  
129 14 Dtool_LL_pGhsZ 0 7 161 1403 808 14 Dtool_LL_pGhsZ 0 2 4 self 1 1297  6 source 1 1297  
130 14 Dtool_LL_pxgAL 0 6 162 1299 0 14 Dtool_LL_pxgAL 0 1 4 this 3 1401  
131 14 Dtool_LL_pN6y0 0 6 163 1406 0 14 Dtool_LL_pN6y0 0 2 4 this 3 1401  1 n 1 1299  
132 14 Dtool_LL_pc75R 0 6 164 1406 0 14 Dtool_LL_pc75R 0 2 4 this 3 1401  1 n 1 1299  
133 14 Dtool_LL_pS8fZ 0 6 165 1303 0 14 Dtool_LL_pS8fZ 0 1 4 this 3 1401  
134 14 Dtool_LL_pvsne 0 6 166 1303 0 14 Dtool_LL_pvsne 0 3 4 this 3 1401  1 n 1 1299  5 count 1 1299  
135 14 Dtool_LL_puj3n 0 6 167 1304 0 14 Dtool_LL_puj3n 0 1 4 this 3 1401  
136 14 Dtool_LL_p1Mog 0 6 168 1304 0 14 Dtool_LL_p1Mog 0 1 4 this 3 1401  
137 14 Dtool_LL_pu8AG 0 6 169 1304 0 14 Dtool_LL_pu8AG 0 4 4 this 3 1401  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
138 14 Dtool_LL_pKFq3 0 4 170 1307 0 14 Dtool_LL_pKFq3 0 3 4 this 3 1401  4 self 1 1297  4 view 1 1305  
139 14 Dtool_LL_pHbVA 0 4 158 1307 0 14 Dtool_LL_pHbVA 0 1 4 this 3 1409  
140 14 Dtool_LL_pCp9Z 0 4 159 1307 0 14 Dtool_LL_pCp9Z 0 2 4 this 3 1410  3 out 1 1311  
141 14 Dtool_LL_pJ_k_ 0 7 173 1412 826 14 Dtool_LL_pJ_k_ 0 1 4 copy 1 1295  
142 14 Dtool_LL_p_zBg 0 7 173 1412 826 14 Dtool_LL_p_zBg 0 2 4 self 1 1297  6 source 1 1297  
143 14 Dtool_LL_p_KQr 0 7 173 1412 826 14 Dtool_LL_p_KQr 0 1 11 type_handle 1 1413  
144 14 Dtool_LL_pSpwv 0 7 173 1412 826 14 Dtool_LL_pSpwv 0 0 
145 14 Dtool_LL_pW6ft 0 7 174 1412 826 14 Dtool_LL_pW6ft 0 2 1 n 1 1299  11 type_handle 1 1413  
146 14 Dtool_LL_p81AE 0 7 174 1412 826 14 Dtool_LL_p81AE 0 1 1 n 1 1299  
147 14 Dtool_LL_pBZGM 0 6 175 1299 0 14 Dtool_LL_pBZGM 0 1 4 this 3 1295  
148 14 Dtool_LL_pKwOw 0 4 176 1307 0 14 Dtool_LL_pKwOw 0 2 4 this 3 1412  1 x 1 1300  
149 14 Dtool_LL_pdUXK 0 4 177 1307 0 14 Dtool_LL_pdUXK 0 1 4 this 3 1412  
150 14 Dtool_LL_pKjSZ 0 6 178 1300 0 14 Dtool_LL_pKjSZ 0 2 4 this 3 1295  1 n 1 1299  
151 14 Dtool_LL_pXaeg 0 4 179 1307 0 14 Dtool_LL_pXaeg 0 3 4 this 3 1412  1 n 1 1299  5 value 1 1300  
152 14 Dtool_LL_pbf7U 0 6 180 1300 0 14 Dtool_LL_pbf7U 0 2 4 this 3 1295  1 n 1 1299  
153 14 Dtool_LL_pt0fn 0 4 181 1307 0 14 Dtool_LL_pt0fn 0 3 4 this 3 1412  1 n 1 1299  5 value 1 1300  
154 14 Dtool_LL_p_t5N 0 6 182 1303 0 14 Dtool_LL_p_t5N 0 1 4 this 3 1295  
155 14 Dtool_LL_pyib6 0 4 183 1307 0 14 Dtool_LL_pyib6 0 2 4 this 3 1412  4 data 1 1303  
156 14 Dtool_LL_pLHeW 0 6 184 1303 0 14 Dtool_LL_pLHeW 0 3 4 this 3 1295  1 n 1 1299  5 count 1 1299  
157 14 Dtool_LL_pmg3K 0 4 185 1307 0 14 Dtool_LL_pmg3K 0 4 4 this 3 1412  1 n 1 1299  5 count 1 1299  4 data 1 1303  
158 14 Dtool_LL_p4bsv 0 6 186 1304 0 14 Dtool_LL_p4bsv 0 1 4 this 3 1295  
159 14 Dtool_LL_pJWyu 0 6 187 1304 0 14 Dtool_LL_pJWyu 0 1 4 this 3 1295  
160 14 Dtool_LL_pMQ40 0 6 188 1304 0 14 Dtool_LL_pMQ40 0 4 4 this 3 1412  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
161 14 Dtool_LL_p8Wmx 0 4 189 1307 0 14 Dtool_LL_p8Wmx 0 3 4 this 3 1295  4 self 1 1297  4 view 1 1305  
162 14 Dtool_LL_p8egW 0 7 192 1415 844 14 Dtool_LL_p8egW 0 1 4 copy 1 1316  
163 14 Dtool_LL_p9TFH 0 7 192 1415 844 14 Dtool_LL_p9TFH 0 2 4 self 1 1297  6 source 1 1297  
164 14 Dtool_LL_p_qVS 0 7 192 1415 844 14 Dtool_LL_p_qVS 0 1 11 type_handle 1 1413  
165 14 Dtool_LL_pTJ0W 0 7 192 1415 844 14 Dtool_LL_pTJ0W 0 0 
166 14 Dtool_LL_pVaiU 0 7 193 1415 844 14 Dtool_LL_pVaiU 0 2 1 n 1 1299  11 type_handle 1 1413  
167 14 Dtool_LL_p8VEr 0 7 193 1415 844 14 Dtool_LL_p8VEr 0 1 1 n 1 1299  
168 14 Dtool_LL_pB5Kz 0 6 194 1299 0 14 Dtool_LL_pB5Kz 0 1 4 this 3 1316  
169 14 Dtool_LL_pLXgY 0 4 195 1307 0 14 Dtool_LL_pLXgY 0 2 4 this 3 1415  1 x 1 1318  
170 14 Dtool_LL_pd0Yx 0 4 196 1307 0 14 Dtool_LL_pd0Yx 0 1 4 this 3 1415  
171 14 Dtool_LL_pJDVA 0 6 197 1318 0 14 Dtool_LL_pJDVA 0 2 4 this 3 1316  1 n 1 1299  
172 14 Dtool_LL_pc6__ 0 4 198 1307 0 14 Dtool_LL_pc6__ 0 3 4 this 3 1415  1 n 1 1299  5 value 1 1318  
173 14 Dtool_LL_pb_87 0 6 199 1318 0 14 Dtool_LL_pb_87 0 2 4 this 3 1316  1 n 1 1299  
174 14 Dtool_LL_pnU_G 0 4 200 1307 0 14 Dtool_LL_pnU_G 0 3 4 this 3 1415  1 n 1 1299  5 value 1 1318  
175 14 Dtool_LL_p_N90 0 6 201 1303 0 14 Dtool_LL_p_N90 0 1 4 this 3 1316  
176 14 Dtool_LL_pzCeh 0 4 202 1307 0 14 Dtool_LL_pzCeh 0 2 4 this 3 1415  4 data 1 1303  
177 14 Dtool_LL_pLnj9 0 6 203 1303 0 14 Dtool_LL_pLnj9 0 3 4 this 3 1316  1 n 1 1299  5 count 1 1299  
178 14 Dtool_LL_pmA7x 0 4 204 1307 0 14 Dtool_LL_pmA7x 0 4 4 this 3 1415  1 n 1 1299  5 count 1 1299  4 data 1 1303  
179 14 Dtool_LL_pn7wW 0 6 205 1304 0 14 Dtool_LL_pn7wW 0 1 4 this 3 1316  
180 14 Dtool_LL_pI21V 0 6 206 1304 0 14 Dtool_LL_pI21V 0 1 4 this 3 1316  
181 14 Dtool_LL_pNw7b 0 6 207 1304 0 14 Dtool_LL_pNw7b 0 4 4 this 3 1415  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
182 14 Dtool_LL_pj2qY 0 4 208 1307 0 14 Dtool_LL_pj2qY 0 3 4 this 3 1316  4 self 1 1297  4 view 1 1305  
183 14 Dtool_LL_ptlCd 0 7 211 1416 862 14 Dtool_LL_ptlCd 0 1 4 copy 1 1327  
184 14 Dtool_LL_poVny 0 7 211 1416 862 14 Dtool_LL_poVny 0 2 4 self 1 1297  6 source 1 1297  
185 14 Dtool_LL_peJpZ 0 7 211 1416 862 14 Dtool_LL_peJpZ 0 1 11 type_handle 1 1413  
186 14 Dtool_LL_pFfmo 0 7 211 1416 862 14 Dtool_LL_pFfmo 0 0 
187 14 Dtool_LL_pAaph 0 7 212 1416 862 14 Dtool_LL_pAaph 0 2 1 n 1 1299  11 type_handle 1 1413  
188 14 Dtool_LL_pLmTx 0 7 212 1416 862 14 Dtool_LL_pLmTx 0 1 1 n 1 1299  
189 14 Dtool_LL_pZRHz 0 6 213 1299 0 14 Dtool_LL_pZRHz 0 1 4 this 3 1327  
190 14 Dtool_LL_pZRc8 0 4 214 1307 0 14 Dtool_LL_pZRc8 0 2 4 this 3 1416  1 x 1 1329  
191 14 Dtool_LL_p9uf6 0 4 215 1307 0 14 Dtool_LL_p9uf6 0 1 4 this 3 1416  
192 14 Dtool_LL_pn3ba 0 6 216 1329 0 14 Dtool_LL_pn3ba 0 2 4 this 3 1327  1 n 1 1299  
193 14 Dtool_LL_pkHcM 0 4 217 1307 0 14 Dtool_LL_pkHcM 0 3 4 this 3 1416  1 n 1 1299  5 value 1 1329  
194 14 Dtool_LL_p4N1O 0 6 218 1329 0 14 Dtool_LL_p4N1O 0 2 4 this 3 1327  1 n 1 1299  
195 14 Dtool_LL_pM8xs 0 4 219 1307 0 14 Dtool_LL_pM8xs 0 3 4 this 3 1416  1 n 1 1299  5 value 1 1329  
196 14 Dtool_LL_pf3_s 0 6 220 1303 0 14 Dtool_LL_pf3_s 0 1 4 this 3 1327  
197 14 Dtool_LL_pXLP_ 0 4 221 1307 0 14 Dtool_LL_pXLP_ 0 2 4 this 3 1416  4 data 1 1303  
198 14 Dtool_LL_p2suB 0 6 222 1303 0 14 Dtool_LL_p2suB 0 3 4 this 3 1327  1 n 1 1299  5 count 1 1299  
199 14 Dtool_LL_pKkrQ 0 4 223 1307 0 14 Dtool_LL_pKkrQ 0 4 4 this 3 1416  1 n 1 1299  5 count 1 1299  4 data 1 1303  
200 14 Dtool_LL_pViqm 0 6 224 1304 0 14 Dtool_LL_pViqm 0 1 4 this 3 1327  
201 14 Dtool_LL_pFUyJ 0 6 225 1304 0 14 Dtool_LL_pFUyJ 0 1 4 this 3 1327  
202 14 Dtool_LL_pHyoO 0 6 226 1304 0 14 Dtool_LL_pHyoO 0 4 4 this 3 1416  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
203 14 Dtool_LL_p3ZCm 0 4 227 1307 0 14 Dtool_LL_p3ZCm 0 3 4 this 3 1327  4 self 1 1297  4 view 1 1305  
204 14 Dtool_LL_poJ1_ 0 7 230 1417 880 14 Dtool_LL_poJ1_ 0 1 4 copy 1 1338  
205 14 Dtool_LL_p8VXU 0 7 230 1417 880 14 Dtool_LL_p8VXU 0 2 4 self 1 1297  6 source 1 1297  
206 14 Dtool_LL_prOZ7 0 7 230 1417 880 14 Dtool_LL_prOZ7 0 1 11 type_handle 1 1413  
207 14 Dtool_LL_pRfWK 0 7 230 1417 880 14 Dtool_LL_pRfWK 0 0 
208 14 Dtool_LL_psbZD 0 7 231 1417 880 14 Dtool_LL_psbZD 0 2 1 n 1 1299  11 type_handle 1 1413  
209 14 Dtool_LL_pnlDT 0 7 231 1417 880 14 Dtool_LL_pnlDT 0 1 1 n 1 1299  
210 14 Dtool_LL_plS3U 0 6 232 1299 0 14 Dtool_LL_plS3U 0 1 4 this 3 1338  
211 14 Dtool_LL_pgR8_ 0 4 233 1307 0 14 Dtool_LL_pgR8_ 0 2 4 this 3 1417  1 x 1 1340  
212 14 Dtool_LL_pBuPc 0 4 234 1307 0 14 Dtool_LL_pBuPc 0 1 4 this 3 1417  
213 14 Dtool_LL_pI3L8 0 6 235 1340 0 14 Dtool_LL_pI3L8 0 2 4 this 3 1338  1 n 1 1299  
214 14 Dtool_LL_pw5Nu 0 4 236 1307 0 14 Dtool_LL_pw5Nu 0 3 4 this 3 1417  1 n 1 1299  5 value 1 1340  
215 14 Dtool_LL_pPNlw 0 6 237 1340 0 14 Dtool_LL_pPNlw 0 2 4 this 3 1338  1 n 1 1299  
216 14 Dtool_LL_pJOjO 0 4 238 1307 0 14 Dtool_LL_pJOjO 0 3 4 this 3 1417  1 n 1 1299  5 value 1 1340  
217 14 Dtool_LL_pz3uO 0 6 239 1303 0 14 Dtool_LL_pz3uO 0 1 4 this 3 1338  
218 14 Dtool_LL_p7L_g 0 4 240 1307 0 14 Dtool_LL_p7L_g 0 2 4 this 3 1417  4 data 1 1303  
219 14 Dtool_LL_pjsej 0 6 241 1303 0 14 Dtool_LL_pjsej 0 3 4 this 3 1338  1 n 1 1299  5 count 1 1299  
220 14 Dtool_LL_pnlby 0 4 242 1307 0 14 Dtool_LL_pnlby 0 4 4 this 3 1417  1 n 1 1299  5 count 1 1299  4 data 1 1303  
221 14 Dtool_LL_phiaI 0 6 243 1304 0 14 Dtool_LL_phiaI 0 1 4 this 3 1338  
222 14 Dtool_LL_pwXir 0 6 244 1304 0 14 Dtool_LL_pwXir 0 1 4 this 3 1338  
223 14 Dtool_LL_pUyYw 0 6 245 1304 0 14 Dtool_LL_pUyYw 0 4 4 this 3 1417  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
224 14 Dtool_LL_pbZyH 0 4 246 1307 0 14 Dtool_LL_pbZyH 0 3 4 this 3 1338  4 self 1 1297  4 view 1 1305  
225 14 Dtool_LL_pxLk_ 0 7 249 1418 898 14 Dtool_LL_pxLk_ 0 1 4 copy 1 1349  
226 14 Dtool_LL_ppFJG 0 7 249 1418 898 14 Dtool_LL_ppFJG 0 2 4 self 1 1297  6 source 1 1297  
227 14 Dtool_LL_pe5Kt 0 7 249 1418 898 14 Dtool_LL_pe5Kt 0 1 11 type_handle 1 1413  
228 14 Dtool_LL_pFPI8 0 7 249 1418 898 14 Dtool_LL_pFPI8 0 0 
229 14 Dtool_LL_pAqK1 0 7 250 1418 898 14 Dtool_LL_pAqK1 0 2 1 n 1 1299  11 type_handle 1 1413  
230 14 Dtool_LL_pIW1E 0 7 250 1418 898 14 Dtool_LL_pIW1E 0 1 1 n 1 1299  
231 14 Dtool_LL_pWBpG 0 6 251 1299 0 14 Dtool_LL_pWBpG 0 1 4 this 3 1349  
232 14 Dtool_LL_paxgj 0 4 252 1307 0 14 Dtool_LL_paxgj 0 2 4 this 3 1418  1 x 1 1351  
233 14 Dtool_LL_p8_BO 0 4 253 1307 0 14 Dtool_LL_p8_BO 0 1 4 this 3 1418  
234 14 Dtool_LL_pnn9t 0 6 254 1351 0 14 Dtool_LL_pnn9t 0 2 4 this 3 1349  1 n 1 1299  
235 14 Dtool_LL_pyo_m 0 4 255 1307 0 14 Dtool_LL_pyo_m 0 3 4 this 3 1418  1 n 1 1299  5 value 1 1351  
236 14 Dtool_LL_p4dXi 0 6 256 1351 0 14 Dtool_LL_p4dXi 0 2 4 this 3 1349  1 n 1 1299  
237 14 Dtool_LL_p9rTH 0 4 257 1307 0 14 Dtool_LL_p9rTH 0 3 4 this 3 1418  1 n 1 1299  5 value 1 1351  
238 14 Dtool_LL_pengA 0 6 258 1303 0 14 Dtool_LL_pengA 0 1 4 this 3 1349  
239 14 Dtool_LL_pU7xS 0 4 259 1307 0 14 Dtool_LL_pU7xS 0 2 4 this 3 1418  4 data 1 1303  
240 14 Dtool_LL_p2cPV 0 6 260 1303 0 14 Dtool_LL_p2cPV 0 3 4 this 3 1349  1 n 1 1299  5 count 1 1299  
241 14 Dtool_LL_pKUMk 0 4 261 1307 0 14 Dtool_LL_pKUMk 0 4 4 this 3 1418  1 n 1 1299  5 count 1 1299  4 data 1 1303  
242 14 Dtool_LL_pVSM6 0 6 262 1304 0 14 Dtool_LL_pVSM6 0 1 4 this 3 1349  
243 14 Dtool_LL_pFkUd 0 6 263 1304 0 14 Dtool_LL_pFkUd 0 1 4 this 3 1349  
244 14 Dtool_LL_pHCJi 0 6 264 1304 0 14 Dtool_LL_pHCJi 0 4 4 this 3 1418  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
245 14 Dtool_LL_p3Jk5 0 4 265 1307 0 14 Dtool_LL_p3Jk5 0 3 4 this 3 1349  4 self 1 1297  4 view 1 1305  
246 14 Dtool_LL_pPnWg 0 7 268 1419 916 14 Dtool_LL_pPnWg 0 1 4 copy 1 1360  
247 14 Dtool_LL_p8F5n 0 7 268 1419 916 14 Dtool_LL_p8F5n 0 2 4 self 1 1297  6 source 1 1297  
248 14 Dtool_LL_pq_6O 0 7 268 1419 916 14 Dtool_LL_pq_6O 0 1 11 type_handle 1 1413  
249 14 Dtool_LL_pRP4d 0 7 268 1419 916 14 Dtool_LL_pRP4d 0 0 
250 14 Dtool_LL_psr6W 0 7 269 1419 916 14 Dtool_LL_psr6W 0 2 1 n 1 1299  11 type_handle 1 1413  
251 14 Dtool_LL_pnVlm 0 7 269 1419 916 14 Dtool_LL_pnVlm 0 1 1 n 1 1299  
252 14 Dtool_LL_plCZo 0 6 270 1299 0 14 Dtool_LL_plCZo 0 1 4 this 3 1360  
253 14 Dtool_LL_phxAn 0 4 271 1307 0 14 Dtool_LL_phxAn 0 2 4 this 3 1419  1 x 1 1362  
254 14 Dtool_LL_pB_xv 0 4 272 1307 0 14 Dtool_LL_pB_xv 0 1 4 this 3 1419  
255 14 Dtool_LL_pLntP 0 6 273 1362 0 14 Dtool_LL_pLntP 0 2 4 this 3 1360  1 n 1 1299  
256 14 Dtool_LL_pB2vI 0 4 274 1307 0 14 Dtool_LL_pB2vI 0 3 4 this 3 1419  1 n 1 1299  5 value 1 1362  
257 14 Dtool_LL_pMdHE 0 6 275 1362 0 14 Dtool_LL_pMdHE 0 2 4 this 3 1360  1 n 1 1299  
258 14 Dtool_LL_pX5Cp 0 4 276 1307 0 14 Dtool_LL_pX5Cp 0 3 4 this 3 1419  1 n 1 1299  5 value 1 1362  
259 14 Dtool_LL_pznQi 0 6 277 1303 0 14 Dtool_LL_pznQi 0 1 4 this 3 1360  
260 14 Dtool_LL_p77h0 0 4 278 1307 0 14 Dtool_LL_p77h0 0 2 4 this 3 1419  4 data 1 1303  
261 14 Dtool_LL_pjc_2 0 6 279 1303 0 14 Dtool_LL_pjc_2 0 3 4 this 3 1360  1 n 1 1299  5 count 1 1299  
262 14 Dtool_LL_pmV8F 0 4 280 1307 0 14 Dtool_LL_pmV8F 0 4 4 this 3 1419  1 n 1 1299  5 count 1 1299  4 data 1 1303  
263 14 Dtool_LL_phS8b 0 6 281 1304 0 14 Dtool_LL_phS8b 0 1 4 this 3 1360  
264 14 Dtool_LL_pwnE_ 0 6 282 1304 0 14 Dtool_LL_pwnE_ 0 1 4 this 3 1360  
265 14 Dtool_LL_pTC5D 0 6 283 1304 0 14 Dtool_LL_pTC5D 0 4 4 this 3 1419  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
266 14 Dtool_LL_pbJUb 0 4 284 1307 0 14 Dtool_LL_pbJUb 0 3 4 this 3 1360  4 self 1 1297  4 view 1 1305  
267 14 Dtool_LL_p457Z 0 7 287 1420 934 14 Dtool_LL_p457Z 0 1 4 copy 1 1371  
268 14 Dtool_LL_p0LdI 0 7 287 1420 934 14 Dtool_LL_p0LdI 0 2 4 self 1 1297  6 source 1 1297  
269 14 Dtool_LL_pOf6R 0 7 287 1420 934 14 Dtool_LL_pOf6R 0 1 11 type_handle 1 1413  
270 14 Dtool_LL_p6Cf6 0 7 287 1420 934 14 Dtool_LL_p6Cf6 0 0 
271 14 Dtool_LL_pOyIK 0 7 288 1420 934 14 Dtool_LL_pOyIK 0 2 1 n 1 1299  11 type_handle 1 1413  
272 14 Dtool_LL_p4r_c 0 7 288 1420 934 14 Dtool_LL_p4r_c 0 1 1 n 1 1299  
273 14 Dtool_LL_pGoCu 0 6 289 1299 0 14 Dtool_LL_pGoCu 0 1 4 this 3 1371  
274 14 Dtool_LL_p3j_h 0 4 290 1307 0 14 Dtool_LL_p3j_h 0 2 4 this 3 1420  1 x 1 1373  
275 14 Dtool_LL_p5m0V 0 4 291 1307 0 14 Dtool_LL_p5m0V 0 1 4 this 3 1420  
276 14 Dtool_LL_pIOmv 0 6 292 1373 0 14 Dtool_LL_pIOmv 0 2 4 this 3 1371  1 n 1 1299  
277 14 Dtool_LL_pzc56 0 4 293 1307 0 14 Dtool_LL_pzc56 0 3 4 this 3 1420  1 n 1 1299  5 value 1 1373  
278 14 Dtool_LL_pVWEn 0 6 294 1373 0 14 Dtool_LL_pVWEn 0 2 4 this 3 1371  1 n 1 1299  
279 14 Dtool_LL_p7RxL 0 4 295 1307 0 14 Dtool_LL_p7RxL 0 3 4 this 3 1420  1 n 1 1299  5 value 1 1373  
280 14 Dtool_LL_pyCPe 0 6 296 1303 0 14 Dtool_LL_pyCPe 0 1 4 this 3 1371  
281 14 Dtool_LL_pYKyj 0 4 297 1307 0 14 Dtool_LL_pYKyj 0 2 4 this 3 1420  4 data 1 1303  
282 14 Dtool_LL_pyaOf 0 6 298 1303 0 14 Dtool_LL_pyaOf 0 3 4 this 3 1371  1 n 1 1299  5 count 1 1299  
283 14 Dtool_LL_pPeuN 0 4 299 1307 0 14 Dtool_LL_pPeuN 0 4 4 this 3 1420  1 n 1 1299  5 count 1 1299  4 data 1 1303  
284 14 Dtool_LL_pvZcS 0 6 300 1304 0 14 Dtool_LL_pvZcS 0 1 4 this 3 1371  
285 14 Dtool_LL_prlTC 0 6 301 1304 0 14 Dtool_LL_prlTC 0 1 4 this 3 1371  
286 14 Dtool_LL_pk1DD 0 6 302 1304 0 14 Dtool_LL_pk1DD 0 4 4 this 3 1420  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
287 14 Dtool_LL_puenS 0 4 303 1307 0 14 Dtool_LL_puenS 0 3 4 this 3 1371  4 self 1 1297  4 view 1 1305  
288 14 Dtool_LL_p4Nlo 0 7 306 1421 952 14 Dtool_LL_p4Nlo 0 1 4 copy 1 1382  
289 14 Dtool_LL_p0vWN 0 7 306 1421 952 14 Dtool_LL_p0vWN 0 2 4 self 1 1297  6 source 1 1297  
290 14 Dtool_LL_pOzyW 0 7 306 1421 952 14 Dtool_LL_pOzyW 0 1 11 type_handle 1 1413  
291 14 Dtool_LL_p6mY_ 0 7 306 1421 952 14 Dtool_LL_p6mY_ 0 0 
292 14 Dtool_LL_pOOBP 0 7 307 1421 952 14 Dtool_LL_pOOBP 0 2 1 n 1 1299  11 type_handle 1 1413  
293 14 Dtool_LL_p4X3h 0 7 307 1421 952 14 Dtool_LL_p4X3h 0 1 1 n 1 1299  
294 14 Dtool_LL_pGM6y 0 6 308 1299 0 14 Dtool_LL_pGM6y 0 1 4 this 3 1382  
295 14 Dtool_LL_p8N5m 0 4 309 1307 0 14 Dtool_LL_p8N5m 0 2 4 this 3 1421  1 x 1 1384  
296 14 Dtool_LL_p5asa 0 4 310 1307 0 14 Dtool_LL_p5asa 0 1 4 this 3 1421  
297 14 Dtool_LL_pIie0 0 6 311 1384 0 14 Dtool_LL_pIie0 0 2 4 this 3 1382  1 n 1 1299  
298 14 Dtool_LL_pykqE 0 4 312 1307 0 14 Dtool_LL_pykqE 0 3 4 this 3 1421  1 n 1 1299  5 value 1 1384  
299 14 Dtool_LL_pVq9r 0 6 313 1384 0 14 Dtool_LL_pVq9r 0 2 4 this 3 1382  1 n 1 1299  
300 14 Dtool_LL_p7ZiV 0 4 314 1307 0 14 Dtool_LL_p7ZiV 0 3 4 this 3 1421  1 n 1 1299  5 value 1 1384  
301 14 Dtool_LL_py_Ij 0 6 315 1303 0 14 Dtool_LL_py_Ij 0 1 4 this 3 1382  
302 14 Dtool_LL_pY2qo 0 4 316 1307 0 14 Dtool_LL_pY2qo 0 2 4 this 3 1421  4 data 1 1303  
303 14 Dtool_LL_py2Gk 0 6 317 1303 0 14 Dtool_LL_py2Gk 0 3 4 this 3 1382  1 n 1 1299  5 count 1 1299  
304 14 Dtool_LL_pP6mS 0 4 318 1307 0 14 Dtool_LL_pP6mS 0 4 4 this 3 1421  1 n 1 1299  5 count 1 1299  4 data 1 1303  
305 14 Dtool_LL_pv9UX 0 6 319 1304 0 14 Dtool_LL_pv9UX 0 1 4 this 3 1382  
306 14 Dtool_LL_prZMH 0 6 320 1304 0 14 Dtool_LL_prZMH 0 1 4 this 3 1382  
307 14 Dtool_LL_pkZ7H 0 6 321 1304 0 14 Dtool_LL_pkZ7H 0 4 4 this 3 1421  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
308 14 Dtool_LL_puifX 0 4 322 1307 0 14 Dtool_LL_puifX 0 3 4 this 3 1382  4 self 1 1297  4 view 1 1305  
309 14 Dtool_LL_pWYux 0 7 325 1422 970 14 Dtool_LL_pWYux 0 1 4 copy 1 1393  
310 14 Dtool_LL_pacm3 0 7 325 1422 970 14 Dtool_LL_pacm3 0 2 4 self 1 1297  6 source 1 1297  
311 14 Dtool_LL_pmafk 0 7 325 1422 970 14 Dtool_LL_pmafk 0 1 11 type_handle 1 1413  
312 14 Dtool_LL_pIfZ2 0 7 325 1422 970 14 Dtool_LL_pIfZ2 0 0 
313 14 Dtool_LL_pyhft 0 7 326 1422 970 14 Dtool_LL_pyhft 0 2 1 n 1 1299  11 type_handle 1 1413  
314 14 Dtool_LL_pL6dH 0 7 326 1422 970 14 Dtool_LL_pL6dH 0 1 1 n 1 1299  
315 14 Dtool_LL_pouvn 0 6 327 1299 0 14 Dtool_LL_pouvn 0 1 4 this 3 1393  
316 14 Dtool_LL_pkzRx 0 4 328 1307 0 14 Dtool_LL_pkzRx 0 2 4 this 3 1422  1 x 1 1395  
317 14 Dtool_LL_pY_qg 0 4 329 1307 0 14 Dtool_LL_pY_qg 0 1 4 this 3 1422  
318 14 Dtool_LL_pF1lc 0 6 330 1395 0 14 Dtool_LL_pF1lc 0 2 4 this 3 1393  1 n 1 1299  
319 14 Dtool_LL_pDiPw 0 4 331 1307 0 14 Dtool_LL_pDiPw 0 3 4 this 3 1422  1 n 1 1299  5 value 1 1395  
320 14 Dtool_LL_pk0HL 0 6 332 1395 0 14 Dtool_LL_pk0HL 0 2 4 this 3 1393  1 n 1 1299  
321 14 Dtool_LL_ph9QM 0 4 333 1307 0 14 Dtool_LL_ph9QM 0 3 4 this 3 1422  1 n 1 1299  5 value 1 1395  
322 14 Dtool_LL_pd49u 0 6 334 1303 0 14 Dtool_LL_pd49u 0 1 4 this 3 1393  
323 14 Dtool_LL_pmWMh 0 4 335 1307 0 14 Dtool_LL_pmWMh 0 2 4 this 3 1422  4 data 1 1303  
324 14 Dtool_LL_p_5dR 0 6 336 1303 0 14 Dtool_LL_p_5dR 0 3 4 this 3 1393  1 n 1 1299  5 count 1 1299  
325 14 Dtool_LL_pWBSj 0 4 337 1307 0 14 Dtool_LL_pWBSj 0 4 4 this 3 1422  1 n 1 1299  5 count 1 1299  4 data 1 1303  
326 14 Dtool_LL_ppiI2 0 6 338 1304 0 14 Dtool_LL_ppiI2 0 1 4 this 3 1393  
327 14 Dtool_LL_p_Tgy 0 6 339 1304 0 14 Dtool_LL_p_Tgy 0 1 4 this 3 1393  
328 14 Dtool_LL_pUGDL 0 6 340 1304 0 14 Dtool_LL_pUGDL 0 4 4 this 3 1422  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
329 14 Dtool_LL_ptp_9 0 4 341 1307 0 14 Dtool_LL_ptp_9 0 3 4 this 3 1393  4 self 1 1297  4 view 1 1305  
330 14 Dtool_LL_p3n8b 0 7 344 1423 988 14 Dtool_LL_p3n8b 0 1 4 copy 1 1404  
331 14 Dtool_LL_pZc0T 0 7 344 1423 988 14 Dtool_LL_pZc0T 0 2 4 self 1 1297  6 source 1 1297  
332 14 Dtool_LL_platA 0 7 344 1423 988 14 Dtool_LL_platA 0 1 11 type_handle 1 1413  
333 14 Dtool_LL_pLfnS 0 7 344 1423 988 14 Dtool_LL_pLfnS 0 0 
334 14 Dtool_LL_p1htJ 0 7 345 1423 988 14 Dtool_LL_p1htJ 0 2 1 n 1 1299  11 type_handle 1 1413  
335 14 Dtool_LL_pV6rj 0 7 345 1423 988 14 Dtool_LL_pV6rj 0 1 1 n 1 1299  
336 14 Dtool_LL_pru9D 0 6 346 1299 0 14 Dtool_LL_pru9D 0 1 4 this 3 1404  
337 14 Dtool_LL_pnDAh 0 4 347 1307 0 14 Dtool_LL_pnDAh 0 2 4 this 3 1423  1 x 1 1406  
338 14 Dtool_LL_pW_48 0 4 348 1307 0 14 Dtool_LL_pW_48 0 1 4 this 3 1423  
339 14 Dtool_LL_pH1z4 0 6 349 1406 0 14 Dtool_LL_pH1z4 0 2 4 this 3 1404  1 n 1 1299  
340 14 Dtool_LL_pQtdT 0 4 350 1307 0 14 Dtool_LL_pQtdT 0 3 4 this 3 1423  1 n 1 1299  5 value 1 1406  
341 14 Dtool_LL_pq0Vn 0 6 351 1406 0 14 Dtool_LL_pq0Vn 0 2 4 this 3 1404  1 n 1 1299  
342 14 Dtool_LL_px_ev 0 4 352 1307 0 14 Dtool_LL_px_ev 0 3 4 this 3 1423  1 n 1 1299  5 value 1 1406  
343 14 Dtool_LL_pA4LL 0 6 353 1303 0 14 Dtool_LL_pA4LL 0 1 4 this 3 1404  
344 14 Dtool_LL_pkWa9 0 4 354 1307 0 14 Dtool_LL_pkWa9 0 2 4 this 3 1423  4 data 1 1303  
345 14 Dtool_LL_p55rt 0 6 355 1303 0 14 Dtool_LL_p55rt 0 3 4 this 3 1404  1 n 1 1299  5 count 1 1299  
346 14 Dtool_LL_pQBg_ 0 4 356 1307 0 14 Dtool_LL_pQBg_ 0 4 4 this 3 1423  1 n 1 1299  5 count 1 1299  4 data 1 1303  
347 14 Dtool_LL_psiWS 0 6 357 1304 0 14 Dtool_LL_psiWS 0 1 4 this 3 1404  
348 14 Dtool_LL_phTuO 0 6 358 1304 0 14 Dtool_LL_phTuO 0 1 4 this 3 1404  
349 14 Dtool_LL_pqGRn 0 6 359 1304 0 14 Dtool_LL_pqGRn 0 4 4 this 3 1423  4 self 1 1297  4 view 1 1305  5 flags 1 1304  
350 14 Dtool_LL_popNa 0 4 360 1307 0 14 Dtool_LL_popNa 0 3 4 this 3 1404  4 self 1 1297  4 view 1 1305  
351 14 Dtool_LL_pi4zP 0 7 364 1426 999 14 Dtool_LL_pi4zP 0 1 4 this 3 1424  
352 14 Dtool_LL_pVfqL 0 6 365 1427 0 14 Dtool_LL_pVfqL 525 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_empty
//       Access: Published
//  Description: Any kind of volume might be empty.  This is a
//               degenerate volume that contains no points; it's not
//               the same as, for instance, a sphere with radius zero,
//               since that contains one point (the center).  It
//               intersects with no other volumes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1424  
353 14 Dtool_LL_pFsFC 0 6 366 1427 0 14 Dtool_LL_pFsFC 905 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_infinite
//       Access: Published
//  Description: The other side of the empty coin is an infinite
//               volume.  This is a degenerate state of a normally
//               finite volume that contains all points.  (Note that
//               some kinds of infinite bounding volumes, like binary
//               separating planes, do not contain all points and thus
//               correctly return is_infinite() == false, even though
//               they are technically infinite.  This is a special
//               case of the word 'infinite' meaning the volume covers
//               all points in space.)
//
//               It completely intersects with all other volumes
//               except empty volumes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1424  
354 14 Dtool_LL_pD2hm 0 4 367 1307 0 14 Dtool_LL_pD2hm 383 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::set_infinite
//       Access: Published
//  Description: Marks the volume as infinite, even if it is normally
//               finite.  You can think of this as an infinite
//               extend_by() operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1426  
355 14 Dtool_LL_pARix 0 6 368 1427 0 14 Dtool_LL_pARix 303 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::extend_by
//       Access: Published
//  Description: Increases the size of the volume to include the given
//               volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1426  3 vol 1 1424  
356 14 Dtool_LL_pdpPR 0 6 371 1304 0 14 Dtool_LL_pdpPR 372 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::contains
//       Access: Published
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1424  3 vol 1 1424  
357 14 Dtool_LL_pQbvQ 0 4 372 1307 0 14 Dtool_LL_pQbvQ 0 2 4 this 3 1424  3 out 1 1311  
358 14 Dtool_LL_pJz6_ 0 4 373 1307 0 14 Dtool_LL_pJz6_ 220 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1424  3 out 1 1311  12 indent_level 1 1304  
359 14 Dtool_LL_pZ2qR 0 4 373 1307 0 14 Dtool_LL_pZ2qR 220 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1424  3 out 1 1311  
360 14 Dtool_LL_prfVo 0 7 375 1413 0 14 Dtool_LL_prfVo 0 0 
361 14 Dtool_LL_pzZa3 0 6 378 1427 0 14 Dtool_LL_pzZa3 309 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1428  3 vol 1 1429  
362 14 Dtool_LL_p5ZtT 0 6 378 1427 0 14 Dtool_LL_p5ZtT 308 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1428  5 point 1 1431  
363 14 Dtool_LL_pdv6k 0 6 379 1427 0 14 Dtool_LL_pdv6k 300 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the points
//               indicated.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1428  5 first 1 1431  4 last 1 1431  
364 14 Dtool_LL_pB8A3 0 6 380 1304 0 14 Dtool_LL_pB8A3 378 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1429  3 vol 1 1429  
365 14 Dtool_LL_pEncR 0 6 380 1304 0 14 Dtool_LL_pEncR 377 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1429  5 point 1 1431  
366 14 Dtool_LL_p0SwX 0 6 380 1304 0 14 Dtool_LL_p0SwX 384 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated line segment.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1429  1 a 1 1431  1 b 1 1431  
367 14 Dtool_LL_pGh7m 0 7 381 1434 0 14 Dtool_LL_pGh7m 0 1 4 this 3 1429  
368 14 Dtool_LL_pIb98 0 4 382 1307 0 14 Dtool_LL_pIb98 0 2 4 this 3 1428  3 mat 1 1435  
369 14 Dtool_LL_pB1fo 0 7 383 1413 0 14 Dtool_LL_pB1fo 0 0 
370 14 Dtool_LL_phQ34 0 7 386 1434 0 14 Dtool_LL_phQ34 0 1 4 this 3 1438  
371 14 Dtool_LL_paM3J 0 7 387 1434 0 14 Dtool_LL_paM3J 0 1 4 this 3 1438  
372 14 Dtool_LL_p6P0K 0 6 388 1440 0 14 Dtool_LL_p6P0K 238 ////////////////////////////////////////////////////////////////////
//     Function: FiniteBoundingVolume::get_volume
//       Access: Public, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1438  
373 14 Dtool_LL_pITxA 0 7 389 1413 0 14 Dtool_LL_pITxA 0 0 
374 14 Dtool_LL_poFk1 0 7 392 1441 1014 14 Dtool_LL_poFk1 763 // Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
//////////////////////////////////////////////////////////////////// 0 
375 14 Dtool_LL_pGkWK 0 7 392 1441 1014 14 Dtool_LL_pGkWK 227 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1442  
376 14 Dtool_LL_p3msS 0 7 392 1441 1014 14 Dtool_LL_p3msS 381 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
//////////////////////////////////////////////////////////////////// 3 1 a 1 1362  1 b 1 1362  1 c 1 1362  
377 14 Dtool_LL_pEaDA 0 6 393 1441 0 14 Dtool_LL_pEaDA 235 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1441  4 copy 1 1442  
378 14 Dtool_LL_phT0m 0 4 395 1307 0 14 Dtool_LL_phT0m 754 // Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1441  3 mat 1 1435  
379 14 Dtool_LL_pbQJP 0 6 396 1362 0 14 Dtool_LL_pbQJP 313 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1442  
380 14 Dtool_LL_pbMBU 0 6 397 1362 0 14 Dtool_LL_pbMBU 318 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1442  
381 14 Dtool_LL_pbo6Y 0 6 398 1362 0 14 Dtool_LL_pbo6Y 312 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1442  
382 14 Dtool_LL_peihv 0 7 399 1434 0 14 Dtool_LL_peihv 266 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1442  1 t 1 1440  
383 14 Dtool_LL_pD9H1 0 4 400 1307 0 14 Dtool_LL_pD9H1 216 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1442  3 out 1 1311  
384 14 Dtool_LL_pH6YY 0 4 401 1307 0 14 Dtool_LL_pH6YY 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1442  3 out 1 1311  12 indent_level 1 1304  
385 14 Dtool_LL_pcjiE 0 4 401 1307 0 14 Dtool_LL_pcjiE 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1442  3 out 1 1311  
386 14 Dtool_LL_pfMsi 0 4 402 1307 0 14 Dtool_LL_pfMsi 643 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1442  11 destination 1 1444  
387 14 Dtool_LL_pfdOf 0 4 403 1307 0 14 Dtool_LL_pfdOf 347 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1441  6 source 1 1446  
388 14 Dtool_LL_p5xmf 0 4 404 1307 0 14 Dtool_LL_p5xmf 463 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1442  11 destination 1 1444  
389 14 Dtool_LL_p5pnx 0 4 405 1307 0 14 Dtool_LL_p5pnx 279 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1441  6 source 1 1446  
390 14 Dtool_LL_pK6Cy 0 7 407 1448 1028 14 Dtool_LL_pK6Cy 763 // Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
//////////////////////////////////////////////////////////////////// 0 
391 14 Dtool_LL_pNAVD 0 7 407 1448 1028 14 Dtool_LL_pNAVD 227 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1449  
392 14 Dtool_LL_pHAjH 0 7 407 1448 1028 14 Dtool_LL_pHAjH 381 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
//////////////////////////////////////////////////////////////////// 3 1 a 1 1351  1 b 1 1351  1 c 1 1351  
393 14 Dtool_LL_pL2jM 0 6 408 1448 0 14 Dtool_LL_pL2jM 235 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1448  4 copy 1 1449  
394 14 Dtool_LL_pE2xP 0 4 410 1307 0 14 Dtool_LL_pE2xP 754 // Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1448  3 mat 1 1451  
395 14 Dtool_LL_pF8Jf 0 6 411 1351 0 14 Dtool_LL_pF8Jf 313 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1449  
396 14 Dtool_LL_pFgBk 0 6 412 1351 0 14 Dtool_LL_pFgBk 318 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1449  
397 14 Dtool_LL_pFE6o 0 6 413 1351 0 14 Dtool_LL_pFE6o 312 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1449  
398 14 Dtool_LL_phQkC 0 7 414 1456 0 14 Dtool_LL_phQkC 266 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1449  1 t 1 1455  
399 14 Dtool_LL_pipHF 0 4 415 1307 0 14 Dtool_LL_pipHF 216 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1449  3 out 1 1311  
400 14 Dtool_LL_p68Zo 0 4 416 1307 0 14 Dtool_LL_p68Zo 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1449  3 out 1 1311  12 indent_level 1 1304  
401 14 Dtool_LL_p5diU 0 4 416 1307 0 14 Dtool_LL_p5diU 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1449  3 out 1 1311  
402 14 Dtool_LL_pBYsy 0 4 417 1307 0 14 Dtool_LL_pBYsy 643 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1449  11 destination 1 1444  
403 14 Dtool_LL_p9JOv 0 4 418 1307 0 14 Dtool_LL_p9JOv 347 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1448  6 source 1 1446  
404 14 Dtool_LL_pbsmv 0 4 419 1307 0 14 Dtool_LL_pbsmv 463 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1449  11 destination 1 1444  
405 14 Dtool_LL_pY9nB 0 4 420 1307 0 14 Dtool_LL_pY9nB 279 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1448  6 source 1 1446  
406 14 Dtool_LL_p8HBL 0 7 423 1457 1056 14 Dtool_LL_p8HBL 881 // Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
//////////////////////////////////////////////////////////////////// 0 
407 14 Dtool_LL_poS5k 0 7 423 1457 1056 14 Dtool_LL_poS5k 429 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
//////////////////////////////////////////////////////////////////// 3 1 a 1 1431  1 b 1 1431  1 c 1 1431  
408 14 Dtool_LL_pkFDu 0 7 423 1457 1056 14 Dtool_LL_pkFDu 223 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1458  
409 14 Dtool_LL_pKn6W 0 7 423 1457 1056 14 Dtool_LL_pKn6W 314 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
//////////////////////////////////////////////////////////////////// 2 6 normal 1 1460  5 point 1 1431  
410 14 Dtool_LL_p_VoQ 0 7 423 1457 1056 14 Dtool_LL_p_VoQ 298 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
//////////////////////////////////////////////////////////////////// 4 1 a 1 1440  1 b 1 1440  1 c 1 1440  1 d 1 1440  
411 14 Dtool_LL_pmVHz 0 7 424 1457 1056 14 Dtool_LL_pmVHz 272 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1463  3 mat 1 1318  
412 14 Dtool_LL_pwV_j 0 7 424 1457 1056 14 Dtool_LL_pwV_j 272 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1463  3 mat 1 1435  
413 14 Dtool_LL_palO9 0 6 425 1457 0 14 Dtool_LL_palO9 273 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1457  3 mat 1 1435  
414 14 Dtool_LL_pXLe5 0 4 426 1307 0 14 Dtool_LL_pXLe5 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1457  3 mat 1 1435  
415 14 Dtool_LL_p9crq 0 7 427 1457 1056 14 Dtool_LL_p9crq 268 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1463  
416 14 Dtool_LL_p18X3 0 7 428 1465 0 14 Dtool_LL_p18X3 854 // Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1463  
417 14 Dtool_LL_pnRGL 0 7 429 1466 0 14 Dtool_LL_pnRGL 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1463  
418 14 Dtool_LL_pnb87 0 7 430 1434 0 14 Dtool_LL_pnb87 382 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1463  
419 14 Dtool_LL_pDsvK 0 6 431 1440 0 14 Dtool_LL_pDsvK 612 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1463  5 point 1 1431  
420 14 Dtool_LL_pqGnr 0 7 432 1434 0 14 Dtool_LL_pqGnr 307 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1463  5 point 1 1431  
421 14 Dtool_LL_py_b8 0 4 433 1307 0 14 Dtool_LL_py_b8 329 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1457  
422 14 Dtool_LL_p2XGL 0 6 434 1427 0 14 Dtool_LL_p2XGL 610 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1463  18 intersection_point 1 1434  2 p1 1 1431  2 p2 1 1431  
423 14 Dtool_LL_p4dcr 0 6 435 1427 0 14 Dtool_LL_p4dcr 589 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1463  4 from 1 1434  5 delta 1 1466  5 other 1 1463  
424 14 Dtool_LL_p6d8d 0 4 437 1307 0 14 Dtool_LL_p6d8d 213 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1463  3 out 1 1311  
425 14 Dtool_LL_pvP_l 0 4 438 1307 0 14 Dtool_LL_pvP_l 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1463  3 out 1 1311  12 indent_level 1 1304  
426 14 Dtool_LL_pHDHy 0 4 438 1307 0 14 Dtool_LL_pHDHy 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1463  3 out 1 1311  
427 14 Dtool_LL_psXRI 0 7 442 1467 1073 14 Dtool_LL_psXRI 881 // Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
//////////////////////////////////////////////////////////////////// 0 
428 14 Dtool_LL_pySWh 0 7 442 1467 1073 14 Dtool_LL_pySWh 429 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
//////////////////////////////////////////////////////////////////// 3 1 a 1 1468  1 b 1 1468  1 c 1 1468  
429 14 Dtool_LL_p01QE 0 7 442 1467 1073 14 Dtool_LL_p01QE 223 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1470  
430 14 Dtool_LL_pa0EO 0 7 442 1467 1073 14 Dtool_LL_pa0EO 314 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
//////////////////////////////////////////////////////////////////// 2 6 normal 1 1472  5 point 1 1468  
431 14 Dtool_LL_pc0U2 0 7 442 1467 1073 14 Dtool_LL_pc0U2 298 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
//////////////////////////////////////////////////////////////////// 4 1 a 1 1455  1 b 1 1455  1 c 1 1455  1 d 1 1455  
432 14 Dtool_LL_pMPq4 0 7 443 1467 1073 14 Dtool_LL_pMPq4 272 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1475  3 mat 1 1300  
433 14 Dtool_LL_pGPip 0 7 443 1467 1073 14 Dtool_LL_pGPip 272 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1475  3 mat 1 1451  
434 14 Dtool_LL_pmvt6 0 6 444 1467 0 14 Dtool_LL_pmvt6 273 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1467  3 mat 1 1451  
435 14 Dtool_LL_pfeCb 0 4 445 1307 0 14 Dtool_LL_pfeCb 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1467  3 mat 1 1451  
436 14 Dtool_LL_p9uOo 0 7 446 1467 1073 14 Dtool_LL_p9uOo 268 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1475  
437 14 Dtool_LL_p1q70 0 7 447 1477 0 14 Dtool_LL_p1q70 854 // Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1475  
438 14 Dtool_LL_pnDqI 0 7 448 1478 0 14 Dtool_LL_pnDqI 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1475  
439 14 Dtool_LL_pnJg5 0 7 449 1456 0 14 Dtool_LL_pnJg5 382 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1475  
440 14 Dtool_LL_pDA3F 0 6 450 1455 0 14 Dtool_LL_pDA3F 612 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1475  5 point 1 1468  
441 14 Dtool_LL_p4sJp 0 7 451 1456 0 14 Dtool_LL_p4sJp 307 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1475  5 point 1 1468  
442 14 Dtool_LL_pyM_5 0 4 452 1307 0 14 Dtool_LL_pyM_5 329 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1467  
443 14 Dtool_LL_p53GC 0 6 453 1427 0 14 Dtool_LL_p53GC 610 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1475  18 intersection_point 1 1456  2 p1 1 1468  2 p2 1 1468  
444 14 Dtool_LL_pymJY 0 6 454 1427 0 14 Dtool_LL_pymJY 589 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1475  4 from 1 1456  5 delta 1 1478  5 other 1 1475  
445 14 Dtool_LL_p6Tgb 0 4 456 1307 0 14 Dtool_LL_p6Tgb 213 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1475  3 out 1 1311  
446 14 Dtool_LL_pvBij 0 4 457 1307 0 14 Dtool_LL_pvBij 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1475  3 out 1 1311  12 indent_level 1 1304  
447 14 Dtool_LL_pHRrv 0 4 457 1307 0 14 Dtool_LL_pHRrv 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1475  3 out 1 1311  
448 14 Dtool_LL_pC_T2 0 7 460 1479 1083 14 Dtool_LL_pC_T2 742 // Filename: boundingBox.I
// Created by:  drose (31May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs an empty box object.
//////////////////////////////////////////////////////////////////// 0 
449 14 Dtool_LL_pUDkp 0 7 460 1479 1083 14 Dtool_LL_pUDkp 257 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs a specific box object.
//////////////////////////////////////////////////////////////////// 2 3 min 1 1431  3 max 1 1431  
450 14 Dtool_LL_p3R23 0 4 461 1307 0 14 Dtool_LL_p3R23 0 2 4 this 3 1479  4 size 1 1299  
451 14 Dtool_LL_pCqx3 0 6 464 1304 0 14 Dtool_LL_pCqx3 284 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a rectangular solid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1480  
452 14 Dtool_LL_poi08 0 7 465 1434 0 14 Dtool_LL_poi08 270 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_point
//       Access: Published
//  Description: Returns the nth vertex of the rectangular solid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1480  1 n 1 1304  
453 14 Dtool_LL_pyaSV 0 6 466 1304 0 14 Dtool_LL_pyaSV 281 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a rectangular solid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1480  
454 14 Dtool_LL_pjuTV 0 7 467 1457 1056 14 Dtool_LL_pjuTV 268 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_plane
//       Access: Published
//  Description: Returns the nth face of the rectangular solid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1480  1 n 1 1304  
455 14 Dtool_LL_pAHSK 0 7 468 1413 0 14 Dtool_LL_pAHSK 0 0 
456 14 Dtool_LL_pnyr_ 0 7 471 1482 1091 14 Dtool_LL_pnyr_ 686 // Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
//////////////////////////////////////////////////////////////////// 0 
457 14 Dtool_LL_paWHx 0 4 472 1307 0 14 Dtool_LL_paWHx 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 1 4 this 3 1482  
458 14 Dtool_LL_p5EUb 0 4 472 1307 0 14 Dtool_LL_p5EUb 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 5 4 this 3 1482  1 l 1 1440  1 r 1 1440  1 t 1 1440  1 b 1 1440  
459 14 Dtool_LL_pQfBG 0 4 473 1307 0 14 Dtool_LL_pQfBG 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 3 4 this 3 1482  5 fnear 1 1440  4 ffar 1 1440  
460 14 Dtool_LL_pR5m5 0 4 473 1307 0 14 Dtool_LL_pR5m5 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 7 4 this 3 1482  5 fnear 1 1440  4 ffar 1 1440  1 l 1 1440  1 r 1 1440  1 t 1 1440  1 b 1 1440  
461 14 Dtool_LL_pnUSt 0 4 474 1307 0 14 Dtool_LL_pnUSt 578 ////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
//////////////////////////////////////////////////////////////////// 5 4 this 3 1482  4 xfov 1 1440  6 aspect 1 1440  5 fnear 1 1440  4 ffar 1 1440  
462 14 Dtool_LL_pxcU1 0 4 475 1307 0 14 Dtool_LL_pxcU1 0 5 4 this 3 1482  4 yfov 1 1440  6 aspect 1 1440  5 fnear 1 1440  4 ffar 1 1440  
463 14 Dtool_LL_pH1Ii 0 4 476 1307 0 14 Dtool_LL_pH1Ii 0 5 4 this 3 1482  4 xfov 1 1440  4 yfov 1 1440  5 fnear 1 1440  4 ffar 1 1440  
464 14 Dtool_LL_p8tL7 0 7 480 1483 1099 14 Dtool_LL_p8tL7 686 // Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
//////////////////////////////////////////////////////////////////// 0 
465 14 Dtool_LL_pzWnt 0 4 481 1307 0 14 Dtool_LL_pzWnt 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 1 4 this 3 1483  
466 14 Dtool_LL_pm4tc 0 4 481 1307 0 14 Dtool_LL_pm4tc 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 5 4 this 3 1483  1 l 1 1455  1 r 1 1455  1 t 1 1455  1 b 1 1455  
467 14 Dtool_LL_pOWs2 0 4 482 1307 0 14 Dtool_LL_pOWs2 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 3 4 this 3 1483  5 fnear 1 1455  4 ffar 1 1455  
468 14 Dtool_LL_pylfV 0 4 482 1307 0 14 Dtool_LL_pylfV 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 7 4 this 3 1483  5 fnear 1 1455  4 ffar 1 1455  1 l 1 1455  1 r 1 1455  1 t 1 1455  1 b 1 1455  
469 14 Dtool_LL_prCzZ 0 4 483 1307 0 14 Dtool_LL_prCzZ 578 ////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
//////////////////////////////////////////////////////////////////// 5 4 this 3 1483  4 xfov 1 1455  6 aspect 1 1455  5 fnear 1 1455  4 ffar 1 1455  
470 14 Dtool_LL_pxe0h 0 4 484 1307 0 14 Dtool_LL_pxe0h 0 5 4 this 3 1483  4 yfov 1 1455  6 aspect 1 1455  5 fnear 1 1455  4 ffar 1 1455  
471 14 Dtool_LL_pUNoW 0 4 485 1307 0 14 Dtool_LL_pUNoW 0 5 4 this 3 1483  4 xfov 1 1455  4 yfov 1 1455  5 fnear 1 1455  4 ffar 1 1455  
472 14 Dtool_LL_pXsrR 0 7 489 1487 1106 14 Dtool_LL_pXsrR 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 7 frustum 1 1484  8 is_ortho 1 1427  2 cs 1 1486  
473 14 Dtool_LL_pG6CF 0 7 489 1487 1106 14 Dtool_LL_pG6CF 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 7 frustum 1 1484  8 is_ortho 1 1427  
474 14 Dtool_LL_praJQ 0 7 489 1487 1106 14 Dtool_LL_praJQ 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 8 3 fll 1 1431  3 flr 1 1431  3 fur 1 1431  3 ful 1 1431  3 nll 1 1431  3 nlr 1 1431  3 nur 1 1431  3 nul 1 1431  
475 14 Dtool_LL_pjxzO 0 6 490 1304 0 14 Dtool_LL_pjxzO 284 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a hexahedron.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1488  
476 14 Dtool_LL_pI7ir 0 7 491 1434 0 14 Dtool_LL_pI7ir 270 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_point
//       Access: Published
//  Description: Returns the nth vertex of the hexahedron.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1488  1 n 1 1304  
477 14 Dtool_LL_pcorK 0 6 492 1304 0 14 Dtool_LL_pcorK 281 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a hexahedron.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1488  
478 14 Dtool_LL_pSYfp 0 7 493 1457 1056 14 Dtool_LL_pSYfp 268 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_plane
//       Access: Published
//  Description: Returns the nth face of the hexahedron.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1488  1 n 1 1304  
479 14 Dtool_LL_p6Mjt 0 7 494 1413 0 14 Dtool_LL_p6Mjt 0 0 
480 14 Dtool_LL_pAR_R 0 7 497 1490 1114 14 Dtool_LL_pAR_R 225 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 1 a 1 1431  1 b 1 1431  
481 14 Dtool_LL_ptKOi 0 4 498 1307 0 14 Dtool_LL_ptKOi 0 2 4 this 3 1490  4 size 1 1299  
482 14 Dtool_LL_pRIF_ 0 6 501 1431 0 14 Dtool_LL_pRIF_ 271 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_a
//       Access: Published
//  Description: Returns the first point that defines the line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1491  
483 14 Dtool_LL_pI2G_ 0 7 502 1434 0 14 Dtool_LL_pI2G_ 272 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_b
//       Access: Published
//  Description: Returns the second point that defines the line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1491  
484 14 Dtool_LL_pmcUv 0 7 503 1413 0 14 Dtool_LL_pmcUv 0 0 
485 14 Dtool_LL_pwCTi 0 7 506 1493 1121 14 Dtool_LL_pwCTi 794 // Filename: boundingPlane.I
// Created by:  drose (19Aug05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Default Constructor
//       Access: Published
//  Description: Constructs an empty "plane" that has no
//               intersections.
//////////////////////////////////////////////////////////////////// 0 
486 14 Dtool_LL_pjRVc 0 7 506 1493 1121 14 Dtool_LL_pjRVc 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 5 plane 1 1463  
487 14 Dtool_LL_p7Vwa 0 4 507 1307 0 14 Dtool_LL_p7Vwa 0 2 4 this 3 1493  4 size 1 1299  
488 14 Dtool_LL_pMOJy 0 6 510 1463 0 14 Dtool_LL_pMOJy 224 ////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::get_plane
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1494  
489 14 Dtool_LL_pPW_8 0 7 511 1413 0 14 Dtool_LL_pPW_8 0 0 
490 14 Dtool_LL_pqeoF 0 7 514 1496 1129 14 Dtool_LL_pqeoF 744 // Filename: boundingSphere.I
// Created by:  drose (02Oct99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs an empty sphere.
//////////////////////////////////////////////////////////////////// 0 
491 14 Dtool_LL_pX3ZH 0 7 514 1496 1129 14 Dtool_LL_pX3ZH 256 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs a specific sphere.
//////////////////////////////////////////////////////////////////// 2 6 center 1 1431  6 radius 1 1440  
492 14 Dtool_LL_pXC2T 0 4 515 1307 0 14 Dtool_LL_pXC2T 0 2 4 this 3 1496  4 size 1 1299  
493 14 Dtool_LL_pzKph 0 7 518 1434 0 14 Dtool_LL_pzKph 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_center
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1497  
494 14 Dtool_LL_pyYsx 0 6 519 1440 0 14 Dtool_LL_pyYsx 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_radius
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1497  
495 14 Dtool_LL_pwySa 0 7 520 1413 0 14 Dtool_LL_pwySa 0 0 
496 14 Dtool_LL_paiLm 0 7 523 1499 1139 14 Dtool_LL_paiLm 774 // Filename: intersectionBoundingVolume.I
// Created by:  drose (08Feb12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty intersection.
//////////////////////////////////////////////////////////////////// 0 
497 14 Dtool_LL_pHGaj 0 4 524 1307 0 14 Dtool_LL_pHGaj 0 2 4 this 3 1499  4 size 1 1299  
498 14 Dtool_LL_pxGye 0 6 527 1304 0 14 Dtool_LL_pxGye 299 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the intersection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1500  
499 14 Dtool_LL_pmAog 0 7 528 1429 0 14 Dtool_LL_pmAog 287 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the intersection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1500  1 n 1 1304  
500 14 Dtool_LL_pCAAK 0 4 529 1307 0 14 Dtool_LL_pCAAK 283 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1499  
501 14 Dtool_LL_p_v4Q 0 4 530 1307 0 14 Dtool_LL_p_v4Q 693 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1499  9 component 1 1429  
502 14 Dtool_LL_pfzt2 0 7 531 1413 0 14 Dtool_LL_pfzt2 0 0 
503 14 Dtool_LL_pllv3 0 7 536 1503 1144 14 Dtool_LL_pllv3 35 /* initializes mt[N] with a seed */ 1 4 seed 1 1502  
504 14 Dtool_LL_pBSDv 0 6 537 1502 0 14 Dtool_LL_pBSDv 58 /* generates a random number on [0,0x7fffffff]-interval */ 1 4 this 3 1503  
505 14 Dtool_LL_pRdBj 0 7 540 1504 1147 14 Dtool_LL_pRdBj 721 // Filename: omniBoundingVolume.I
// Created by:  drose (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OmniBoundingVolume::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
506 14 Dtool_LL_pbPVO 0 7 541 1413 0 14 Dtool_LL_pbPVO 0 0 
507 14 Dtool_LL_pQPnm 0 7 544 1505 1158 14 Dtool_LL_pQPnm 753 // Filename: unionBoundingVolume.I
// Created by:  drose (08Feb12)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty union.
//////////////////////////////////////////////////////////////////// 0 
508 14 Dtool_LL_piBQE 0 4 545 1307 0 14 Dtool_LL_piBQE 0 2 4 this 3 1505  4 size 1 1299  
509 14 Dtool_LL_pjE8H 0 6 548 1304 0 14 Dtool_LL_pjE8H 285 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the union.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1506  
510 14 Dtool_LL_pSxAQ 0 7 549 1429 0 14 Dtool_LL_pSxAQ 273 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the union.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1506  1 n 1 1304  
511 14 Dtool_LL_pWCpg 0 4 550 1307 0 14 Dtool_LL_pWCpg 276 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1505  
512 14 Dtool_LL_pTdHH 0 4 551 1307 0 14 Dtool_LL_pTdHH 686 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1505  9 component 1 1429  
513 14 Dtool_LL_pWSy_ 0 4 552 1307 0 14 Dtool_LL_pWSy_ 347 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::filter_intersection
//       Access: Published
//  Description: Removes from the union any components that have no
//               intersection with the indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1505  6 volume 1 1424  
514 14 Dtool_LL_pkuIR 0 7 553 1413 0 14 Dtool_LL_pkuIR 0 0 
515 14 Dtool_LL_pOl4j 0 7 556 1510 1166 14 Dtool_LL_pOl4j 225 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1508  
516 14 Dtool_LL_p_45c 0 7 556 1510 1166 14 Dtool_LL_p_45c 817 // Filename: randomizer.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Constructor
//       Access: Public
//  Description: If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 1 4 seed 1 1502  
517 14 Dtool_LL_pYb6h 0 7 556 1510 1166 14 Dtool_LL_pYb6h 817 // Filename: randomizer.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Constructor
//       Access: Public
//  Description: If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 0 
518 14 Dtool_LL_pMMRU 0 6 557 1510 0 14 Dtool_LL_pMMRU 233 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Assignment Operator
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1510  4 copy 1 1508  
519 14 Dtool_LL_puMD_ 0 6 558 1304 0 14 Dtool_LL_puMD_ 268 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_int
//       Access: Public
//  Description: Returns a random integer in the range [0, range).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1510  5 range 1 1304  
520 14 Dtool_LL_pbxNX 0 6 559 1455 0 14 Dtool_LL_pbxNX 268 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real
//       Access: Public
//  Description: Returns a random double in the range [0, range).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1510  5 range 1 1455  
521 14 Dtool_LL_pod85 0 6 560 1455 0 14 Dtool_LL_pod85 274 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real_unit
//       Access: Public
//  Description: Returns a random double in the range [-0.5, 0.5).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1510  
522 14 Dtool_LL_ps5Z3 0 6 561 1502 0 14 Dtool_LL_ps5Z3 313 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_next_seed
//       Access: Public, Static
//  Description: Returns a random seed value for the next global
//               Randomizer object.
//////////////////////////////////////////////////////////////////// 0 
523 14 Dtool_LL_p3bLi 0 6 562 1502 0 14 Dtool_LL_p3bLi 363 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_seed
//       Access: Public
//  Description: Returns a unique seed value based on the seed value
//               passed to this Randomizer object (and on its current
//               state).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1510  
524 14 Dtool_LL_pB_ig 0 6 565 1502 0 14 Dtool_LL_pB_ig 368 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise::get_seed
//       Access: Published
//  Description: Returns a unique seed value based on the seed value
//               passed to this PerlinNoise object (and on its current
//               state).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1511  
525 14 Dtool_LL_pv6cm 0 7 568 1512 1174 14 Dtool_LL_pv6cm 872 // Filename: perlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
//////////////////////////////////////////////////////////////////// 0 
526 14 Dtool_LL_psfkp 0 7 568 1512 1174 14 Dtool_LL_psfkp 329 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1513  
527 14 Dtool_LL_pGeIA 0 7 568 1512 1174 14 Dtool_LL_pGeIA 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 4 2 sx 1 1455  2 sy 1 1455  10 table_size 1 1304  4 seed 1 1502  
528 14 Dtool_LL_p9P5z 0 7 568 1512 1174 14 Dtool_LL_p9P5z 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 1455  2 sy 1 1455  10 table_size 1 1304  
529 14 Dtool_LL_pCOIG 0 7 568 1512 1174 14 Dtool_LL_pCOIG 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 1455  2 sy 1 1455  
530 14 Dtool_LL_pM_IZ 0 6 569 1512 0 14 Dtool_LL_pM_IZ 337 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1512  4 copy 1 1513  
531 14 Dtool_LL_pg7Cf 0 4 570 1307 0 14 Dtool_LL_pg7Cf 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1512  5 scale 1 1329  
532 14 Dtool_LL_pGuCP 0 4 570 1307 0 14 Dtool_LL_pGuCP 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1512  5 scale 1 1340  
533 14 Dtool_LL_pBSzQ 0 4 570 1307 0 14 Dtool_LL_pBSzQ 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1512  5 scale 1 1455  
534 14 Dtool_LL_pgNGr 0 4 570 1307 0 14 Dtool_LL_pgNGr 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1512  2 sx 1 1455  2 sy 1 1455  
535 14 Dtool_LL_p5PlC 0 6 571 1455 0 14 Dtool_LL_p5PlC 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1513  5 value 1 1329  
536 14 Dtool_LL_pdIqC 0 6 571 1440 0 14 Dtool_LL_pdIqC 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1513  5 value 1 1340  
537 14 Dtool_LL_pPCI3 0 6 571 1455 0 14 Dtool_LL_pPCI3 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1513  1 x 1 1455  1 y 1 1455  
538 14 Dtool_LL_pJm1a 0 6 572 1455 0 14 Dtool_LL_pJm1a 264 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1513  5 value 1 1329  
539 14 Dtool_LL_pJCuf 0 6 572 1440 0 14 Dtool_LL_pJCuf 264 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1513  5 value 1 1340  
540 14 Dtool_LL_pEAH_ 0 6 572 1455 0 14 Dtool_LL_pEAH_ 270 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the two inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1513  1 x 1 1455  1 y 1 1455  
541 14 Dtool_LL_pPLfp 0 7 575 1515 1180 14 Dtool_LL_pPLfp 872 // Filename: perlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
//////////////////////////////////////////////////////////////////// 0 
542 14 Dtool_LL_pukoc 0 7 575 1515 1180 14 Dtool_LL_pukoc 329 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1516  
543 14 Dtool_LL_p58i2 0 7 575 1515 1180 14 Dtool_LL_p58i2 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 5 2 sx 1 1455  2 sy 1 1455  2 sz 1 1455  10 table_size 1 1304  4 seed 1 1502  
544 14 Dtool_LL_pXjDy 0 7 575 1515 1180 14 Dtool_LL_pXjDy 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 4 2 sx 1 1455  2 sy 1 1455  2 sz 1 1455  10 table_size 1 1304  
545 14 Dtool_LL_pBU40 0 7 575 1515 1180 14 Dtool_LL_pBU40 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 1455  2 sy 1 1455  2 sz 1 1455  
546 14 Dtool_LL_pNxrp 0 6 576 1515 0 14 Dtool_LL_pNxrp 337 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1515  4 copy 1 1516  
547 14 Dtool_LL_p0JOD 0 4 577 1307 0 14 Dtool_LL_p0JOD 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1515  5 scale 1 1351  
548 14 Dtool_LL_prdOz 0 4 577 1307 0 14 Dtool_LL_prdOz 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1515  5 scale 1 1362  
549 14 Dtool_LL_pBcPT 0 4 577 1307 0 14 Dtool_LL_pBcPT 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1515  5 scale 1 1455  
550 14 Dtool_LL_pTM4f 0 4 577 1307 0 14 Dtool_LL_pTM4f 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1515  2 sx 1 1455  2 sy 1 1455  2 sz 1 1455  
551 14 Dtool_LL_pxYBh 0 6 578 1455 0 14 Dtool_LL_pxYBh 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1516  5 value 1 1351  
552 14 Dtool_LL_pVTGh 0 6 578 1440 0 14 Dtool_LL_pVTGh 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1516  5 value 1 1362  
553 14 Dtool_LL_psWEW 0 6 578 1455 0 14 Dtool_LL_psWEW 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1516  1 x 1 1455  1 y 1 1455  1 z 1 1455  
554 14 Dtool_LL_p18Wd 0 6 579 1455 0 14 Dtool_LL_p18Wd 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1516  5 value 1 1351  
555 14 Dtool_LL_p1YPi 0 6 579 1440 0 14 Dtool_LL_p1YPi 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1516  5 value 1 1362  
556 14 Dtool_LL_p_joi 0 6 579 1455 0 14 Dtool_LL_p_joi 272 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1516  1 x 1 1455  1 y 1 1455  1 z 1 1455  
557 14 Dtool_LL_pATvG 0 7 583 1518 1188 14 Dtool_LL_pATvG 876 // Filename: stackedPerlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise2 object with no levels.
//               You should call add_level() to add each level by
//               hand.
//////////////////////////////////////////////////////////////////// 0 
558 14 Dtool_LL_pOBoG 0 7 583 1518 1188 14 Dtool_LL_pOBoG 368 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1519  
559 14 Dtool_LL_pJSRe 0 7 583 1518 1188 14 Dtool_LL_pJSRe 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 7 2 sx 1 1455  2 sy 1 1455  10 num_levels 1 1304  12 scale_factor 1 1455  9 amp_scale 1 1455  10 table_size 1 1304  4 seed 1 1502  
560 14 Dtool_LL_p1q92 0 7 583 1518 1188 14 Dtool_LL_p1q92 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 6 2 sx 1 1455  2 sy 1 1455  10 num_levels 1 1304  12 scale_factor 1 1455  9 amp_scale 1 1455  10 table_size 1 1304  
561 14 Dtool_LL_ppveW 0 7 583 1518 1188 14 Dtool_LL_ppveW 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 5 2 sx 1 1455  2 sy 1 1455  10 num_levels 1 1304  12 scale_factor 1 1455  9 amp_scale 1 1455  
562 14 Dtool_LL_pJ86_ 0 7 583 1518 1188 14 Dtool_LL_pJ86_ 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 4 2 sx 1 1455  2 sy 1 1455  10 num_levels 1 1304  12 scale_factor 1 1455  
563 14 Dtool_LL_p9SEq 0 7 583 1518 1188 14 Dtool_LL_p9SEq 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 3 2 sx 1 1455  2 sy 1 1455  10 num_levels 1 1304  
564 14 Dtool_LL_p8Mpe 0 7 583 1518 1188 14 Dtool_LL_p8Mpe 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 2 2 sx 1 1455  2 sy 1 1455  
565 14 Dtool_LL_puaKK 0 6 584 1518 0 14 Dtool_LL_puaKK 376 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1518  4 copy 1 1519  
566 14 Dtool_LL_pjEp3 0 4 585 1307 0 14 Dtool_LL_pjEp3 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1518  5 level 1 1513  3 amp 1 1455  
567 14 Dtool_LL_p_n9S 0 4 585 1307 0 14 Dtool_LL_p_n9S 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1518  5 level 1 1513  
568 14 Dtool_LL_pc8sO 0 4 586 1307 0 14 Dtool_LL_pc8sO 327 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1518  
569 14 Dtool_LL_pZyC_ 0 6 587 1455 0 14 Dtool_LL_pZyC_ 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1518  5 value 1 1329  
570 14 Dtool_LL_pcyQb 0 6 587 1440 0 14 Dtool_LL_pcyQb 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1518  5 value 1 1340  
571 14 Dtool_LL_p1thz 0 6 587 1455 0 14 Dtool_LL_p1thz 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1518  1 x 1 1455  1 y 1 1455  
572 14 Dtool_LL_pgny9 0 6 588 1455 0 14 Dtool_LL_pgny9 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1518  5 value 1 1329  
573 14 Dtool_LL_pHqyL 0 6 588 1440 0 14 Dtool_LL_pHqyL 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1518  5 value 1 1340  
574 14 Dtool_LL_p0TSf 0 6 588 1455 0 14 Dtool_LL_p0TSf 279 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1518  1 x 1 1455  1 y 1 1455  
575 14 Dtool_LL_p_B5N 0 7 591 1521 1195 14 Dtool_LL_p_B5N 876 // Filename: stackedPerlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise3 object with no levels.
//               You should call add_level() to add each level by
//               hand.
//////////////////////////////////////////////////////////////////// 0 
576 14 Dtool_LL_pkcOQ 0 7 591 1521 1195 14 Dtool_LL_pkcOQ 368 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1522  
577 14 Dtool_LL_pqAFA 0 7 591 1521 1195 14 Dtool_LL_pqAFA 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 8 2 sx 1 1455  2 sy 1 1455  2 sz 1 1455  10 num_levels 1 1304  12 scale_factor 1 1455  9 amp_scale 1 1455  10 table_size 1 1304  4 seed 1 1502  
578 14 Dtool_LL_pJa_5 0 7 591 1521 1195 14 Dtool_LL_pJa_5 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 7 2 sx 1 1455  2 sy 1 1455  2 sz 1 1455  10 num_levels 1 1304  12 scale_factor 1 1455  9 amp_scale 1 1455  10 table_size 1 1304  
579 14 Dtool_LL_pbcHj 0 7 591 1521 1195 14 Dtool_LL_pbcHj 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 6 2 sx 1 1455  2 sy 1 1455  2 sz 1 1455  10 num_levels 1 1304  12 scale_factor 1 1455  9 amp_scale 1 1455  
580 14 Dtool_LL_pD8iG 0 7 591 1521 1195 14 Dtool_LL_pD8iG 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 5 2 sx 1 1455  2 sy 1 1455  2 sz 1 1455  10 num_levels 1 1304  12 scale_factor 1 1455  
581 14 Dtool_LL_pfg_v 0 7 591 1521 1195 14 Dtool_LL_pfg_v 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 4 2 sx 1 1455  2 sy 1 1455  2 sz 1 1455  10 num_levels 1 1304  
582 14 Dtool_LL_pV0sw 0 7 591 1521 1195 14 Dtool_LL_pV0sw 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 3 2 sx 1 1455  2 sy 1 1455  2 sz 1 1455  
583 14 Dtool_LL_p8rsk 0 6 592 1521 0 14 Dtool_LL_p8rsk 376 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1521  4 copy 1 1522  
584 14 Dtool_LL_pOHpF 0 4 593 1307 0 14 Dtool_LL_pOHpF 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1521  5 level 1 1516  3 amp 1 1455  
585 14 Dtool_LL_pbp9g 0 4 593 1307 0 14 Dtool_LL_pbp9g 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1521  5 level 1 1516  
586 14 Dtool_LL_pu9sV 0 4 594 1307 0 14 Dtool_LL_pu9sV 327 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1521  
587 14 Dtool_LL_pIjeI 0 6 595 1455 0 14 Dtool_LL_pIjeI 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1521  5 value 1 1351  
588 14 Dtool_LL_pKjsk 0 6 595 1440 0 14 Dtool_LL_pKjsk 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1521  5 value 1 1362  
589 14 Dtool_LL_p9XOm 0 6 595 1455 0 14 Dtool_LL_p9XOm 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1521  1 x 1 1455  1 y 1 1455  1 z 1 1455  
590 14 Dtool_LL_pTpAh 0 6 596 1455 0 14 Dtool_LL_pTpAh 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1521  5 value 1 1351  
591 14 Dtool_LL_p3rAv 0 6 596 1440 0 14 Dtool_LL_p3rAv 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1521  5 value 1 1362  
592 14 Dtool_LL_przlU 0 6 596 1455 0 14 Dtool_LL_przlU 279 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1521  1 x 1 1455  1 y 1 1455  1 z 1 1455  
593 14 Dtool_LL_pFBK1 0 7 599 1524 1211 14 Dtool_LL_pFBK1 225 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
594 14 Dtool_LL_pVJYT 0 4 600 1307 0 14 Dtool_LL_pVJYT 337 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1524  
595 14 Dtool_LL_pgPrY 0 6 601 1304 0 14 Dtool_LL_pgPrY 312 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1524  5 point 1 1525  
596 14 Dtool_LL_p7U2X 0 6 601 1304 0 14 Dtool_LL_p7U2X 800 // Filename: triangulator.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1524  1 x 1 1455  1 y 1 1455  
597 14 Dtool_LL_pihH8 0 6 602 1304 0 14 Dtool_LL_pihH8 545 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1528  
598 14 Dtool_LL_pcI6X 0 6 603 1525 0 14 Dtool_LL_pcI6X 247 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1528  1 n 1 1304  
599 14 Dtool_LL_pyAY7 0 4 604 1307 0 14 Dtool_LL_pyAY7 342 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear_polygon
//       Access: Published
//  Description: Removes the current polygon definition (and its set
//               of holes), but does not clear the vertex pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1524  
600 14 Dtool_LL_plJzv 0 4 605 1307 0 14 Dtool_LL_plJzv 645 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_polygon_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the polygon.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.  In particular, do not repeat the first
//               vertex at the end.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1524  5 index 1 1304  
601 14 Dtool_LL_pyuMa 0 6 606 1427 0 14 Dtool_LL_pyuMa 394 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::is_left_winding
//       Access: Published
//  Description: Returns true if the polygon vertices are listed in
//               counterclockwise order, or false if they appear to be
//               listed in clockwise order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1528  
602 14 Dtool_LL_pcIaQ 0 4 607 1307 0 14 Dtool_LL_pcIaQ 308 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::begin_hole
//       Access: Published
//  Description: Finishes the previous hole, if any, and prepares to
//               add a new hole.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1524  
603 14 Dtool_LL_pK0o5 0 4 608 1307 0 14 Dtool_LL_pK0o5 571 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_hole_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the current hole.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1524  5 index 1 1304  
604 14 Dtool_LL_pDWnH 0 4 609 1307 0 14 Dtool_LL_pDWnH 439 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1524  
605 14 Dtool_LL_pH7LS 0 6 610 1304 0 14 Dtool_LL_pH7LS 328 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_triangles
//       Access: Published
//  Description: Returns the number of triangles generated by the
//               previous call to triangulate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1528  
606 14 Dtool_LL_p6J8i 0 6 611 1304 0 14 Dtool_LL_p6J8i 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v0
//       Access: Published
//  Description: Returns vertex 0 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1528  1 n 1 1304  
607 14 Dtool_LL_pyO8_ 0 6 612 1304 0 14 Dtool_LL_pyO8_ 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v1
//       Access: Published
//  Description: Returns vertex 1 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1528  1 n 1 1304  
608 14 Dtool_LL_prD8a 0 6 613 1304 0 14 Dtool_LL_prD8a 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v2
//       Access: Published
//  Description: Returns vertex 2 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1528  1 n 1 1304  
609 14 Dtool_LL_poJgk 0 7 616 1530 1219 14 Dtool_LL_poJgk 226 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
610 14 Dtool_LL_pHOzr 0 4 617 1307 0 14 Dtool_LL_pHOzr 338 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1530  
611 14 Dtool_LL_pfch4 0 6 618 1304 0 14 Dtool_LL_pfch4 313 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1530  5 point 1 1468  
612 14 Dtool_LL_pkHDm 0 6 618 1304 0 14 Dtool_LL_pkHDm 802 // Filename: triangulator3.I
// Created by:  drose (03Jan13)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1530  1 x 1 1455  1 y 1 1455  1 z 1 1455  
613 14 Dtool_LL_pYK_E 0 6 619 1304 0 14 Dtool_LL_pYK_E 546 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1531  
614 14 Dtool_LL_pD8o_ 0 6 620 1468 0 14 Dtool_LL_pD8o_ 248 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1531  1 n 1 1304  
615 14 Dtool_LL_pBq6z 0 4 621 1307 0 14 Dtool_LL_pBq6z 440 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1530  
616 14 Dtool_LL_pDce5 0 6 622 1475 0 14 Dtool_LL_pDce5 327 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_plane
//       Access: Published
//  Description: Returns the plane of the polygon.  This is only
//               available after calling triangulate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1531  
617 14 Dtool_LL_pyYd4 0 4 533 1307 0 14 Dtool_LL_pyYd4 0 3 3 mat 1 1533  3 fwd 1 1472  2 cs 1 1486  
618 14 Dtool_LL_pmjSo 0 4 533 1307 0 14 Dtool_LL_pmjSo 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 1533  3 fwd 1 1472  2 up 1 1472  2 cs 1 1486  
619 14 Dtool_LL_pv5m2 0 4 533 1307 0 14 Dtool_LL_pv5m2 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 1533  3 fwd 1 1472  2 up 1 1472  
620 14 Dtool_LL_pTJmh 0 4 533 1307 0 14 Dtool_LL_pTJmh 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 1533  3 fwd 1 1472  
621 14 Dtool_LL_p5qVz 0 4 533 1307 0 14 Dtool_LL_p5qVz 0 3 3 mat 1 1534  3 fwd 1 1460  2 cs 1 1486  
622 14 Dtool_LL_pstmb 0 4 533 1307 0 14 Dtool_LL_pstmb 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 1534  3 fwd 1 1460  2 up 1 1460  2 cs 1 1486  
623 14 Dtool_LL_p5P9p 0 4 533 1307 0 14 Dtool_LL_p5P9p 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 1534  3 fwd 1 1460  2 up 1 1460  
624 14 Dtool_LL_pucec 0 4 533 1307 0 14 Dtool_LL_pucec 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 1534  3 fwd 1 1460  
625 14 Dtool_LL_py0V9 0 4 533 1307 0 14 Dtool_LL_py0V9 0 3 3 mat 1 1477  3 fwd 1 1472  2 cs 1 1486  
626 14 Dtool_LL_pm_Kt 0 4 533 1307 0 14 Dtool_LL_pm_Kt 0 4 3 mat 1 1477  3 fwd 1 1472  2 up 1 1472  2 cs 1 1486  
627 14 Dtool_LL_pvdh7 0 4 533 1307 0 14 Dtool_LL_pvdh7 0 3 3 mat 1 1477  3 fwd 1 1472  2 up 1 1472  
628 14 Dtool_LL_pTtem 0 4 533 1307 0 14 Dtool_LL_pTtem 0 2 3 mat 1 1477  3 fwd 1 1472  
629 14 Dtool_LL_p5GM4 0 4 533 1307 0 14 Dtool_LL_p5GM4 0 3 3 mat 1 1465  3 fwd 1 1460  2 cs 1 1486  
630 14 Dtool_LL_psJfg 0 4 533 1307 0 14 Dtool_LL_psJfg 0 4 3 mat 1 1465  3 fwd 1 1460  2 up 1 1460  2 cs 1 1486  
631 14 Dtool_LL_p5j1u 0 4 533 1307 0 14 Dtool_LL_p5j1u 0 3 3 mat 1 1465  3 fwd 1 1460  2 up 1 1460  
632 14 Dtool_LL_puwWh 0 4 533 1307 0 14 Dtool_LL_puwWh 0 2 3 mat 1 1465  3 fwd 1 1460  
633 14 Dtool_LL_pTxQm 0 4 533 1307 0 14 Dtool_LL_pTxQm 0 3 4 quat 1 1535  3 fwd 1 1472  2 cs 1 1486  
634 14 Dtool_LL_pd9Wi 0 4 533 1307 0 14 Dtool_LL_pd9Wi 0 4 4 quat 1 1535  3 fwd 1 1472  2 up 1 1472  2 cs 1 1486  
635 14 Dtool_LL_piZq8 0 4 533 1307 0 14 Dtool_LL_piZq8 0 3 4 quat 1 1535  3 fwd 1 1472  2 up 1 1472  
636 14 Dtool_LL_p3Jjx 0 4 533 1307 0 14 Dtool_LL_p3Jjx 0 2 4 quat 1 1535  3 fwd 1 1472  
637 14 Dtool_LL_pRh3W 0 4 533 1307 0 14 Dtool_LL_pRh3W 0 3 4 quat 1 1537  3 fwd 1 1460  2 cs 1 1486  
638 14 Dtool_LL_pjnkT 0 4 533 1307 0 14 Dtool_LL_pjnkT 0 4 4 quat 1 1537  3 fwd 1 1460  2 up 1 1460  2 cs 1 1486  
639 14 Dtool_LL_pHl5t 0 4 533 1307 0 14 Dtool_LL_pHl5t 0 3 4 quat 1 1537  3 fwd 1 1460  2 up 1 1460  
640 14 Dtool_LL_p1YKi 0 4 533 1307 0 14 Dtool_LL_p1YKi 0 2 4 quat 1 1537  3 fwd 1 1460  
641 14 Dtool_LL_p2iJ6 0 4 534 1307 0 14 Dtool_LL_p2iJ6 0 3 3 mat 1 1533  3 fwd 1 1472  2 cs 1 1486  
642 14 Dtool_LL_pe3n7 0 4 534 1307 0 14 Dtool_LL_pe3n7 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 1533  3 fwd 1 1472  2 up 1 1472  2 cs 1 1486  
643 14 Dtool_LL_pYQHg 0 4 534 1307 0 14 Dtool_LL_pYQHg 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 1533  3 fwd 1 1472  2 up 1 1472  
644 14 Dtool_LL_phTgt 0 4 534 1307 0 14 Dtool_LL_phTgt 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 1533  3 fwd 1 1472  
645 14 Dtool_LL_pTR_D 0 4 534 1307 0 14 Dtool_LL_pTR_D 0 3 3 mat 1 1534  3 fwd 1 1460  2 cs 1 1486  
646 14 Dtool_LL_pzsOP 0 4 534 1307 0 14 Dtool_LL_pzsOP 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 1534  3 fwd 1 1460  2 up 1 1460  2 cs 1 1486  
647 14 Dtool_LL_p04uz 0 4 534 1307 0 14 Dtool_LL_p04uz 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 1534  3 fwd 1 1460  2 up 1 1460  
648 14 Dtool_LL_pNDW3 0 4 534 1307 0 14 Dtool_LL_pNDW3 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 1534  3 fwd 1 1460  
649 14 Dtool_LL_p_RT6 0 4 534 1307 0 14 Dtool_LL_p_RT6 0 3 3 mat 1 1477  3 fwd 1 1472  2 cs 1 1486  
650 14 Dtool_LL_pWkx7 0 4 534 1307 0 14 Dtool_LL_pWkx7 0 4 3 mat 1 1477  3 fwd 1 1472  2 up 1 1472  2 cs 1 1486  
651 14 Dtool_LL_pQhRg 0 4 534 1307 0 14 Dtool_LL_pQhRg 0 3 3 mat 1 1477  3 fwd 1 1472  2 up 1 1472  
652 14 Dtool_LL_ppCqt 0 4 534 1307 0 14 Dtool_LL_ppCqt 0 2 3 mat 1 1477  3 fwd 1 1472  
653 14 Dtool_LL_pbAJE 0 4 534 1307 0 14 Dtool_LL_pbAJE 0 3 3 mat 1 1465  3 fwd 1 1460  2 cs 1 1486  
654 14 Dtool_LL_pLcXP 0 4 534 1307 0 14 Dtool_LL_pLcXP 0 4 3 mat 1 1465  3 fwd 1 1460  2 up 1 1460  2 cs 1 1486  
655 14 Dtool_LL_pMJ3z 0 4 534 1307 0 14 Dtool_LL_pMJ3z 0 3 3 mat 1 1465  3 fwd 1 1460  2 up 1 1460  
656 14 Dtool_LL_p1yf3 0 4 534 1307 0 14 Dtool_LL_p1yf3 0 2 3 mat 1 1465  3 fwd 1 1460  
657 14 Dtool_LL_pdgkh 0 4 534 1307 0 14 Dtool_LL_pdgkh 0 3 4 quat 1 1535  3 fwd 1 1472  2 cs 1 1486  
658 14 Dtool_LL_pq4at 0 4 534 1307 0 14 Dtool_LL_pq4at 0 4 4 quat 1 1535  3 fwd 1 1472  2 up 1 1472  2 cs 1 1486  
659 14 Dtool_LL_p6OSa 0 4 534 1307 0 14 Dtool_LL_p6OSa 0 3 4 quat 1 1535  3 fwd 1 1472  2 up 1 1472  
660 14 Dtool_LL_pmF_T 0 4 534 1307 0 14 Dtool_LL_pmF_T 0 2 4 quat 1 1535  3 fwd 1 1472  
661 14 Dtool_LL_pPvHl 0 4 534 1307 0 14 Dtool_LL_pPvHl 0 3 4 quat 1 1537  3 fwd 1 1460  2 cs 1 1486  
662 14 Dtool_LL_p_f8w 0 4 534 1307 0 14 Dtool_LL_p_f8w 0 4 4 quat 1 1537  3 fwd 1 1460  2 up 1 1460  2 cs 1 1486  
663 14 Dtool_LL_pxh1d 0 4 534 1307 0 14 Dtool_LL_pxh1d 0 3 4 quat 1 1537  3 fwd 1 1460  2 up 1 1460  
664 14 Dtool_LL_pGIgX 0 4 534 1307 0 14 Dtool_LL_pGIgX 0 2 4 quat 1 1537  3 fwd 1 1460  
665 14 Dtool_LL_p8zF6 0 4 581 1307 0 14 Dtool_LL_p8zF6 0 3 3 mat 1 1533  1 a 1 1472  1 b 1 1472  
666 14 Dtool_LL_p6uMk 0 4 581 1307 0 14 Dtool_LL_p6uMk 0 3 3 mat 1 1534  1 a 1 1460  1 b 1 1460  
667 14 Dtool_LL_pxzTW 0 4 581 1307 0 14 Dtool_LL_pxzTW 0 3 3 mat 1 1477  1 a 1 1472  1 b 1 1472  
668 14 Dtool_LL_p_uaA 0 4 581 1307 0 14 Dtool_LL_p_uaA 0 3 3 mat 1 1465  1 a 1 1460  1 b 1 1460  
319
1220 14 CPTA_LMatrix3d 0 141313 32 ConstPointerToArray< LMatrix3d > 32 ConstPointerToArray< LMatrix3d > 0 0 0 1 672 682 0 9 673 674 675 676 677 678 679 680 681 0 0 1 0 1221 0 0 0 0 0

1221 31 PointerToArrayBase< LMatrix3d > 0 26625 31 PointerToArrayBase< LMatrix3d > 31 PointerToArrayBase< LMatrix3d > 0 0 0 0 671 0 0 0 0 1 0 1222 0 0 0 0 0

1222 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 0 0 0 0 0 2 669 670 0 0 1 0 1223 0 0 0 0 0

1223 13 PointerToVoid 0 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : PointerToVoid
// Description : This is the non-template part of the base class for
//               PointerTo and ConstPointerTo.  It is necessary so we
//               can keep a pointer to a non-template class within the
//               ReferenceCount object, to implement weak reference
//               pointers--we need to have something to clean up when
//               the ReferenceCount object destructs.
//
//               This is the base class for PointerToBase<T>.
////////////////////////////////////////////////////////////////////

1224 14 CPTA_LMatrix3f 0 141313 32 ConstPointerToArray< LMatrix3f > 32 ConstPointerToArray< LMatrix3f > 0 0 0 1 686 696 0 9 687 688 689 690 691 692 693 694 695 0 0 1 0 1225 0 0 0 0 0

1225 31 PointerToArrayBase< LMatrix3f > 0 26625 31 PointerToArrayBase< LMatrix3f > 31 PointerToArrayBase< LMatrix3f > 0 0 0 0 685 0 0 0 0 1 0 1226 0 0 0 0 0

1226 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 0 0 0 0 0 2 683 684 0 0 1 0 1223 0 0 0 0 0

1227 15 CPTA_LVecBase2d 0 141313 33 ConstPointerToArray< LVecBase2d > 33 ConstPointerToArray< LVecBase2d > 0 0 0 1 700 710 0 9 701 702 703 704 705 706 707 708 709 0 0 1 0 1228 0 0 0 0 0

1228 32 PointerToArrayBase< LVecBase2d > 0 26625 32 PointerToArrayBase< LVecBase2d > 32 PointerToArrayBase< LVecBase2d > 0 0 0 0 699 0 0 0 0 1 0 1229 0 0 0 0 0

1229 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 0 0 0 0 0 2 697 698 0 0 1 0 1223 0 0 0 0 0

1230 15 CPTA_LVecBase2f 0 141313 33 ConstPointerToArray< LVecBase2f > 33 ConstPointerToArray< LVecBase2f > 0 0 0 1 714 724 0 9 715 716 717 718 719 720 721 722 723 0 0 1 0 1231 0 0 0 0 0

1231 32 PointerToArrayBase< LVecBase2f > 0 26625 32 PointerToArrayBase< LVecBase2f > 32 PointerToArrayBase< LVecBase2f > 0 0 0 0 713 0 0 0 0 1 0 1232 0 0 0 0 0

1232 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 0 0 0 0 0 2 711 712 0 0 1 0 1223 0 0 0 0 0

1233 15 CPTA_LVecBase3d 0 141313 33 ConstPointerToArray< LVecBase3d > 33 ConstPointerToArray< LVecBase3d > 0 0 0 1 728 738 0 9 729 730 731 732 733 734 735 736 737 0 0 1 0 1234 0 0 0 0 0

1234 32 PointerToArrayBase< LVecBase3d > 0 26625 32 PointerToArrayBase< LVecBase3d > 32 PointerToArrayBase< LVecBase3d > 0 0 0 0 727 0 0 0 0 1 0 1235 0 0 0 0 0

1235 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 0 0 0 0 0 2 725 726 0 0 1 0 1223 0 0 0 0 0

1236 15 CPTA_LVecBase3f 0 141313 33 ConstPointerToArray< LVecBase3f > 33 ConstPointerToArray< LVecBase3f > 0 0 0 1 742 752 0 9 743 744 745 746 747 748 749 750 751 0 0 1 0 1237 0 0 0 0 0

1237 32 PointerToArrayBase< LVecBase3f > 0 26625 32 PointerToArrayBase< LVecBase3f > 32 PointerToArrayBase< LVecBase3f > 0 0 0 0 741 0 0 0 0 1 0 1238 0 0 0 0 0

1238 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 0 0 0 0 0 2 739 740 0 0 1 0 1223 0 0 0 0 0

1239 14 CPTA_LMatrix4d 0 141313 41 ConstPointerToArray< UnalignedLMatrix4d > 41 ConstPointerToArray< UnalignedLMatrix4d > 0 0 0 1 756 766 0 9 757 758 759 760 761 762 763 764 765 0 0 1 0 1240 0 0 0 0 0

1240 40 PointerToArrayBase< UnalignedLMatrix4d > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4d > 40 PointerToArrayBase< UnalignedLMatrix4d > 0 0 0 0 755 0 0 0 0 1 0 1241 0 0 0 0 0

1241 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 0 0 0 0 0 2 753 754 0 0 1 0 1223 0 0 0 0 0

1242 14 CPTA_LMatrix4f 0 141313 41 ConstPointerToArray< UnalignedLMatrix4f > 41 ConstPointerToArray< UnalignedLMatrix4f > 0 0 0 1 770 780 0 9 771 772 773 774 775 776 777 778 779 0 0 1 0 1243 0 0 0 0 0

1243 40 PointerToArrayBase< UnalignedLMatrix4f > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4f > 40 PointerToArrayBase< UnalignedLMatrix4f > 0 0 0 0 769 0 0 0 0 1 0 1244 0 0 0 0 0

1244 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 0 0 0 0 0 2 767 768 0 0 1 0 1223 0 0 0 0 0

1245 15 CPTA_LVecBase4d 0 141313 42 ConstPointerToArray< UnalignedLVecBase4d > 42 ConstPointerToArray< UnalignedLVecBase4d > 0 0 0 1 784 794 0 9 785 786 787 788 789 790 791 792 793 0 0 1 0 1246 0 0 0 0 0

1246 41 PointerToArrayBase< UnalignedLVecBase4d > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4d > 41 PointerToArrayBase< UnalignedLVecBase4d > 0 0 0 0 783 0 0 0 0 1 0 1247 0 0 0 0 0

1247 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 0 0 0 0 0 2 781 782 0 0 1 0 1223 0 0 0 0 0

1248 15 CPTA_LVecBase4f 0 141313 42 ConstPointerToArray< UnalignedLVecBase4f > 42 ConstPointerToArray< UnalignedLVecBase4f > 0 0 0 1 798 808 0 9 799 800 801 802 803 804 805 806 807 0 0 1 0 1249 0 0 0 0 0

1249 41 PointerToArrayBase< UnalignedLVecBase4f > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4f > 41 PointerToArrayBase< UnalignedLVecBase4f > 0 0 0 0 797 0 0 0 0 1 0 1250 0 0 0 0 0

1250 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 0 0 0 0 0 2 795 796 0 0 1 0 1223 0 0 0 0 0

1251 13 PTA_LMatrix3d 0 141313 27 PointerToArray< LMatrix3d > 27 PointerToArray< LMatrix3d > 0 0 0 1 809 826 0 16 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 0 0 1 0 1221 0 0 0 0 0

1252 13 PTA_LMatrix3f 0 141313 27 PointerToArray< LMatrix3f > 27 PointerToArray< LMatrix3f > 0 0 0 1 827 844 0 16 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 0 0 1 0 1225 0 0 0 0 0

1253 14 PTA_LVecBase2d 0 141313 28 PointerToArray< LVecBase2d > 28 PointerToArray< LVecBase2d > 0 0 0 1 845 862 0 16 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 0 0 1 0 1228 0 0 0 0 0

1254 14 PTA_LVecBase2f 0 141313 28 PointerToArray< LVecBase2f > 28 PointerToArray< LVecBase2f > 0 0 0 1 863 880 0 16 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 0 0 1 0 1231 0 0 0 0 0

1255 14 PTA_LVecBase3d 0 141313 28 PointerToArray< LVecBase3d > 28 PointerToArray< LVecBase3d > 0 0 0 1 881 898 0 16 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 0 0 1 0 1234 0 0 0 0 0

1256 14 PTA_LVecBase3f 0 141313 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 1 899 916 0 16 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 0 0 1 0 1237 0 0 0 0 0

1257 13 PTA_LMatrix4d 0 141313 36 PointerToArray< UnalignedLMatrix4d > 36 PointerToArray< UnalignedLMatrix4d > 0 0 0 1 917 934 0 16 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 0 0 1 0 1240 0 0 0 0 0

1258 13 PTA_LMatrix4f 0 141313 36 PointerToArray< UnalignedLMatrix4f > 36 PointerToArray< UnalignedLMatrix4f > 0 0 0 1 935 952 0 16 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 0 0 1 0 1243 0 0 0 0 0

1259 14 PTA_LVecBase4d 0 141313 37 PointerToArray< UnalignedLVecBase4d > 37 PointerToArray< UnalignedLVecBase4d > 0 0 0 1 953 970 0 16 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 0 0 1 0 1246 0 0 0 0 0

1260 14 PTA_LVecBase4f 0 141313 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 1 971 988 0 16 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 0 0 1 0 1249 0 0 0 0 0

1261 14 BoundingVolume 0 141313 14 BoundingVolume 14 BoundingVolume 0 0 0 0 999 0 10 989 990 991 992 993 994 995 996 997 998 0 0 1 0 1262 0 0 0 2 1263 1264 596
////////////////////////////////////////////////////////////////////
//       Class : BoundingVolume
// Description : This is an abstract class for any volume in any sense
//               which can be said to define the locality of reference
//               of a node in a graph, along with all of its
//               descendants.  It is not necessarily a geometric
//               volume (although see GeometricBoundingVolume); this
//               is simply an abstract interface for bounds of any
//               sort.
////////////////////////////////////////////////////////////////////

1262 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1263 17 IntersectionFlags 0 794624 33 BoundingVolume::IntersectionFlags 33 BoundingVolume::IntersectionFlags 1261 0 0 0 0 0 0 0 0 0 5 18 IF_no_intersection 34 BoundingVolume::IF_no_intersection 0 11 IF_possible 27 BoundingVolume::IF_possible 1 7 IF_some 23 BoundingVolume::IF_some 2 6 IF_all 22 BoundingVolume::IF_all 4 18 IF_dont_understand 34 BoundingVolume::IF_dont_understand 8 0 77
// The contains() functions return the union of one or more of these
// bits.

1264 10 BoundsType 0 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 1261 0 0 0 0 0 0 0 0 0 4 10 BT_default 26 BoundingVolume::BT_default 0 7 BT_best 23 BoundingVolume::BT_best 1 9 BT_sphere 25 BoundingVolume::BT_sphere 2 6 BT_box 22 BoundingVolume::BT_box 3 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

1265 23 GeometricBoundingVolume 0 141313 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 1006 0 6 1000 1001 1002 1003 1004 1005 0 0 1 0 1261 0 0 0 0 380
////////////////////////////////////////////////////////////////////
//       Class : GeometricBoundingVolume
// Description : This is another abstract class, for a general class
//               of bounding volumes that actually enclose points in
//               3-d space, such as BSP's and bounding spheres.
////////////////////////////////////////////////////////////////////

1266 20 FiniteBoundingVolume 0 141313 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 1011 0 4 1007 1008 1009 1010 0 0 1 0 1265 0 0 0 0 378
////////////////////////////////////////////////////////////////////
//       Class : FiniteBoundingVolume
// Description : A special kind of GeometricBoundingVolume that is
//               known to be finite.  It is possible to query this
//               kind of volume for its minimum and maximum extents.
////////////////////////////////////////////////////////////////////

1267 10 LParabolaf 0 26625 10 LParabolaf 10 LParabolaf 0 0 0 1 1012 1014 0 12 1013 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 0 0 0 0 0 921
// Filename: parabola_src.h
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LParabola
// Description : An abstract mathematical description of a parabola,
//               particularly useful for describing arcs of
//               projectiles.
//
//               The parabolic equation, given parametrically here, is
//               P = At^2 + Bt + C.
////////////////////////////////////////////////////////////////////

1268 10 LParabolad 0 26625 10 LParabolad 10 LParabolad 0 0 0 1 1026 1028 0 12 1027 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 0 0 0 0 0 921
// Filename: parabola_src.h
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LParabola
// Description : An abstract mathematical description of a parabola,
//               particularly useful for describing arcs of
//               projectiles.
//
//               The parabolic equation, given parametrically here, is
//               P = At^2 + Bt + C.
////////////////////////////////////////////////////////////////////

1269 7 LPlanef 0 141313 7 LPlanef 7 LPlanef 0 0 0 1 1040 1056 0 15 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 0 0 1 0 1270 0 0 0 0 786
// Filename: plane_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPlane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

1270 10 LVecBase4f 0 2049 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1271 7 LPlaned 0 141313 7 LPlaned 7 LPlaned 0 0 0 1 1057 1073 0 15 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 0 0 1 0 1272 0 0 0 0 786
// Filename: plane_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPlane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

1272 10 LVecBase4d 0 2049 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1273 11 BoundingBox 0 141313 11 BoundingBox 11 BoundingBox 0 0 0 1 1074 1083 0 8 1075 1076 1077 1078 1079 1080 1081 1082 2 1539 1540 0 1 0 1266 0 0 0 0 416
////////////////////////////////////////////////////////////////////
//       Class : BoundingBox
// Description : An axis-aligned bounding box; that is, a minimum and
//               maximum coordinate triple.
//
//               This box is always axis-aligned.  If you need a more
//               general bounding box, try BoundingHexahedron.
////////////////////////////////////////////////////////////////////

1274 9 LFrustumf 0 141313 9 LFrustumf 9 LFrustumf 0 0 0 1 1084 1091 0 6 1085 1086 1087 1088 1089 1090 0 0 0 0 0 666
// Filename: frustum_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LFrustum
// Description :
////////////////////////////////////////////////////////////////////

1275 9 LFrustumd 0 141313 9 LFrustumd 9 LFrustumd 0 0 0 1 1092 1099 0 6 1093 1094 1095 1096 1097 1098 0 0 0 0 0 666
// Filename: frustum_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LFrustum
// Description :
////////////////////////////////////////////////////////////////////

1276 18 BoundingHexahedron 0 141313 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 1 1100 1106 0 5 1101 1102 1103 1104 1105 2 1541 1542 0 1 0 1266 0 0 0 0 556
////////////////////////////////////////////////////////////////////
//       Class : BoundingHexahedron
// Description : This defines a bounding convex hexahedron.  It is
//               typically used to represent a frustum, but may
//               represent any enclosing convex hexahedron, including
//               simple boxes.  However, if all you want is an
//               axis-aligned bounding box, you may be better off with
//               the simpler BoundingBox class.
////////////////////////////////////////////////////////////////////

1277 12 BoundingLine 0 141313 12 BoundingLine 12 BoundingLine 0 0 0 1 1107 1114 0 6 1108 1109 1110 1111 1112 1113 0 0 1 0 1265 0 0 0 0 584
////////////////////////////////////////////////////////////////////
//       Class : BoundingLine
// Description : This funny bounding volume is an infinite line with
//               no thickness and extending to infinity in both
//               directions.
//
//               Note that it *always* extends in both directions,
//               despite the fact that you specify two points to the
//               constructor.  These are not endpoints, they are two
//               arbitrary points on the line.
////////////////////////////////////////////////////////////////////

1278 13 BoundingPlane 0 141313 13 BoundingPlane 13 BoundingPlane 0 0 0 1 1115 1121 0 5 1116 1117 1118 1119 1120 0 0 1 0 1265 0 0 0 0 482
////////////////////////////////////////////////////////////////////
//       Class : BoundingPlane
// Description : This funny bounding volume is an infinite plane that
//               divides space into two regions: the part behind the
//               normal, which is "inside" the bounding volume, and
//               the part in front of the normal, which is "outside"
//               the bounding volume.
////////////////////////////////////////////////////////////////////

1279 14 BoundingSphere 0 141313 14 BoundingSphere 14 BoundingSphere 0 0 0 1 1122 1129 0 6 1123 1124 1125 1126 1127 1128 0 0 1 0 1266 0 0 0 0 354
////////////////////////////////////////////////////////////////////
//       Class : BoundingSphere
// Description : This defines a bounding sphere, consisting of a
//               center and a radius.  It is always a sphere, and
//               never an ellipsoid or other quadric.
////////////////////////////////////////////////////////////////////

1280 26 IntersectionBoundingVolume 0 141313 26 IntersectionBoundingVolume 26 IntersectionBoundingVolume 0 0 0 1 1130 1139 0 8 1131 1132 1133 1134 1135 1136 1137 1138 1 1543 0 1 0 1265 0 0 0 0 479
////////////////////////////////////////////////////////////////////
//       Class : IntersectionBoundingVolume
// Description : This special bounding volume is the intersection of all of
//               its constituent bounding volumes.
//
//               A point is defined to be within an
//               IntersectionBoundingVolume if it is within all of its
//               component bounding volumes.
////////////////////////////////////////////////////////////////////

1281 8 Mersenne 0 141313 8 Mersenne 8 Mersenne 0 0 0 1 1142 1144 0 1 1143 0 0 0 0 0 0

1282 18 OmniBoundingVolume 0 141313 18 OmniBoundingVolume 18 OmniBoundingVolume 0 0 0 1 1145 1147 0 1 1146 0 0 1 0 1265 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : OmniBoundingVolume
// Description : This is a special kind of GeometricBoundingVolume
//               that fills all of space.
////////////////////////////////////////////////////////////////////

1283 19 UnionBoundingVolume 0 141313 19 UnionBoundingVolume 19 UnionBoundingVolume 0 0 0 1 1148 1158 0 9 1149 1150 1151 1152 1153 1154 1155 1156 1157 1 1544 0 1 0 1265 0 0 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : UnionBoundingVolume
// Description : This special bounding volume is the union of all of
//               its constituent bounding volumes.
//
//               A point is defined to be within a UnionBoundingVolume
//               if it is within any one or more of its component
//               bounding volumes.
////////////////////////////////////////////////////////////////////

1284 10 Randomizer 0 141313 10 Randomizer 10 Randomizer 0 0 0 1 1159 1166 0 6 1160 1161 1162 1163 1164 1165 0 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : Randomizer
// Description : A handy class to return random numbers.
////////////////////////////////////////////////////////////////////

1285 11 PerlinNoise 0 141313 11 PerlinNoise 11 PerlinNoise 0 0 0 0 1168 0 1 1167 0 0 0 0 0 401
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise
// Description : This is the base class for PerlinNoise2 and
//               PerlinNoise3, different dimensions of Perlin noise
//               implementation.  The base class just collects the
//               common functionality.
////////////////////////////////////////////////////////////////////

1286 12 PerlinNoise2 0 141313 12 PerlinNoise2 12 PerlinNoise2 0 0 0 1 1169 1174 0 4 1170 1171 1172 1173 0 0 1 0 1285 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise2
// Description : This class provides an implementation of Perlin noise
//               for 2 variables.  This code is loosely based on the
//               reference implementation at
//               http://mrl.nyu.edu/~perlin/noise/ .
////////////////////////////////////////////////////////////////////

1287 12 PerlinNoise3 0 141313 12 PerlinNoise3 12 PerlinNoise3 0 0 0 1 1175 1180 0 4 1176 1177 1178 1179 0 0 1 0 1285 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise3
// Description : This class provides an implementation of Perlin noise
//               for 3 variables.  This code is loosely based on the
//               reference implementation at
//               http://mrl.nyu.edu/~perlin/noise/ .
////////////////////////////////////////////////////////////////////

1288 19 StackedPerlinNoise2 0 141313 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 1 1182 1188 0 5 1183 1184 1185 1186 1187 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise2
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

1289 19 StackedPerlinNoise3 0 141313 19 StackedPerlinNoise3 19 StackedPerlinNoise3 0 0 0 1 1189 1195 0 5 1190 1191 1192 1193 1194 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise3
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

1290 12 Triangulator 0 141313 12 Triangulator 12 Triangulator 0 0 0 1 1196 1211 0 14 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1 1545 0 0 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : Triangulator
// Description : This class can triangulate a convex or concave
//               polygon, even one with holes.  It is adapted from an
//               algorithm published as:
//
//               Narkhede A. and Manocha D., Fast polygon
//               triangulation algorithm based on Seidel's Algorithm,
//               UNC-CH, 1994.
//
//               http://www.cs.unc.edu/~dm/CODE/GEM/chapter.html
//
//               It works strictly on 2-d points.  See Triangulator3
//               for 3-d points.
////////////////////////////////////////////////////////////////////

1291 13 Triangulator3 0 141313 13 Triangulator3 13 Triangulator3 0 0 0 1 1212 1219 0 6 1213 1214 1215 1216 1217 1218 1 1546 0 1 0 1290 0 0 0 0 497
////////////////////////////////////////////////////////////////////
//       Class : Triangulator3
// Description : This is an extension of Triangulator to handle
//               polygons with three-dimensional points.  It assumes
//               all of the points lie in a single plane, and
//               internally projects the supplied points into 2-D for
//               passing to the underlying Triangulator object.
////////////////////////////////////////////////////////////////////

1292 40 ConstPointerToArray< LMatrix3d > const * 0 8576 40 ConstPointerToArray< LMatrix3d > const * 40 ConstPointerToArray< LMatrix3d > const * 0 0 1293 0 0 0 0 0 0 0 0 0 0

1293 38 ConstPointerToArray< LMatrix3d > const 0 8832 38 ConstPointerToArray< LMatrix3d > const 38 ConstPointerToArray< LMatrix3d > const 0 0 1220 0 0 0 0 0 0 0 0 0 0

1294 34 ConstPointerToArray< LMatrix3d > * 0 8576 34 ConstPointerToArray< LMatrix3d > * 34 ConstPointerToArray< LMatrix3d > * 0 0 1220 0 0 0 0 0 0 0 0 0 0

1295 35 PointerToArray< LMatrix3d > const * 0 8576 35 PointerToArray< LMatrix3d > const * 35 PointerToArray< LMatrix3d > const * 0 0 1296 0 0 0 0 0 0 0 0 0 0

1296 33 PointerToArray< LMatrix3d > const 0 8832 33 PointerToArray< LMatrix3d > const 33 PointerToArray< LMatrix3d > const 0 0 1251 0 0 0 0 0 0 0 0 0 0

1297 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1298 0 0 0 0 0 0 0 0 0 0

1298 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

1299 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1300 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 1301 0 0 0 0 0 0 0 0 0 0

1301 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 1302 0 0 0 0 0 0 0 0 0 0

1302 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 4 1547 1548 1549 1550 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

1303 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1304 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1305 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1306 0 0 0 0 0 0 0 0 0 0

1306 9 Py_buffer 0 1024 9 Py_buffer 9 Py_buffer 0 0 0 0 0 0 0 0 0 0 0 0 0

1307 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1308 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 0 1222 0 0 0 0 0 0 0 0 0 0

1309 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 0 1310 0 0 0 0 0 0 0 0 0 0

1310 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 0 1222 0 0 0 0 0 0 0 0 0 0

1311 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1312 0 0 0 0 0 0 0 0 0 0

1312 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1313 40 ConstPointerToArray< LMatrix3f > const * 0 8576 40 ConstPointerToArray< LMatrix3f > const * 40 ConstPointerToArray< LMatrix3f > const * 0 0 1314 0 0 0 0 0 0 0 0 0 0

1314 38 ConstPointerToArray< LMatrix3f > const 0 8832 38 ConstPointerToArray< LMatrix3f > const 38 ConstPointerToArray< LMatrix3f > const 0 0 1224 0 0 0 0 0 0 0 0 0 0

1315 34 ConstPointerToArray< LMatrix3f > * 0 8576 34 ConstPointerToArray< LMatrix3f > * 34 ConstPointerToArray< LMatrix3f > * 0 0 1224 0 0 0 0 0 0 0 0 0 0

1316 35 PointerToArray< LMatrix3f > const * 0 8576 35 PointerToArray< LMatrix3f > const * 35 PointerToArray< LMatrix3f > const * 0 0 1317 0 0 0 0 0 0 0 0 0 0

1317 33 PointerToArray< LMatrix3f > const 0 8832 33 PointerToArray< LMatrix3f > const 33 PointerToArray< LMatrix3f > const 0 0 1252 0 0 0 0 0 0 0 0 0 0

1318 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1319 0 0 0 0 0 0 0 0 0 0

1319 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1320 0 0 0 0 0 0 0 0 0 0

1320 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 4 1551 1552 1553 1554 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

1321 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 0 1226 0 0 0 0 0 0 0 0 0 0

1322 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 0 1323 0 0 0 0 0 0 0 0 0 0

1323 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 0 1226 0 0 0 0 0 0 0 0 0 0

1324 41 ConstPointerToArray< LVecBase2d > const * 0 8576 41 ConstPointerToArray< LVecBase2d > const * 41 ConstPointerToArray< LVecBase2d > const * 0 0 1325 0 0 0 0 0 0 0 0 0 0

1325 39 ConstPointerToArray< LVecBase2d > const 0 8832 39 ConstPointerToArray< LVecBase2d > const 39 ConstPointerToArray< LVecBase2d > const 0 0 1227 0 0 0 0 0 0 0 0 0 0

1326 35 ConstPointerToArray< LVecBase2d > * 0 8576 35 ConstPointerToArray< LVecBase2d > * 35 ConstPointerToArray< LVecBase2d > * 0 0 1227 0 0 0 0 0 0 0 0 0 0

1327 36 PointerToArray< LVecBase2d > const * 0 8576 36 PointerToArray< LVecBase2d > const * 36 PointerToArray< LVecBase2d > const * 0 0 1328 0 0 0 0 0 0 0 0 0 0

1328 34 PointerToArray< LVecBase2d > const 0 8832 34 PointerToArray< LVecBase2d > const 34 PointerToArray< LVecBase2d > const 0 0 1253 0 0 0 0 0 0 0 0 0 0

1329 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 1330 0 0 0 0 0 0 0 0 0 0

1330 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 1331 0 0 0 0 0 0 0 0 0 0

1331 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1332 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 0 1229 0 0 0 0 0 0 0 0 0 0

1333 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 0 1334 0 0 0 0 0 0 0 0 0 0

1334 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 0 1229 0 0 0 0 0 0 0 0 0 0

1335 41 ConstPointerToArray< LVecBase2f > const * 0 8576 41 ConstPointerToArray< LVecBase2f > const * 41 ConstPointerToArray< LVecBase2f > const * 0 0 1336 0 0 0 0 0 0 0 0 0 0

1336 39 ConstPointerToArray< LVecBase2f > const 0 8832 39 ConstPointerToArray< LVecBase2f > const 39 ConstPointerToArray< LVecBase2f > const 0 0 1230 0 0 0 0 0 0 0 0 0 0

1337 35 ConstPointerToArray< LVecBase2f > * 0 8576 35 ConstPointerToArray< LVecBase2f > * 35 ConstPointerToArray< LVecBase2f > * 0 0 1230 0 0 0 0 0 0 0 0 0 0

1338 36 PointerToArray< LVecBase2f > const * 0 8576 36 PointerToArray< LVecBase2f > const * 36 PointerToArray< LVecBase2f > const * 0 0 1339 0 0 0 0 0 0 0 0 0 0

1339 34 PointerToArray< LVecBase2f > const 0 8832 34 PointerToArray< LVecBase2f > const 34 PointerToArray< LVecBase2f > const 0 0 1254 0 0 0 0 0 0 0 0 0 0

1340 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 1341 0 0 0 0 0 0 0 0 0 0

1341 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 1342 0 0 0 0 0 0 0 0 0 0

1342 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 752
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1343 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 0 1232 0 0 0 0 0 0 0 0 0 0

1344 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 0 1345 0 0 0 0 0 0 0 0 0 0

1345 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 0 1232 0 0 0 0 0 0 0 0 0 0

1346 41 ConstPointerToArray< LVecBase3d > const * 0 8576 41 ConstPointerToArray< LVecBase3d > const * 41 ConstPointerToArray< LVecBase3d > const * 0 0 1347 0 0 0 0 0 0 0 0 0 0

1347 39 ConstPointerToArray< LVecBase3d > const 0 8832 39 ConstPointerToArray< LVecBase3d > const 39 ConstPointerToArray< LVecBase3d > const 0 0 1233 0 0 0 0 0 0 0 0 0 0

1348 35 ConstPointerToArray< LVecBase3d > * 0 8576 35 ConstPointerToArray< LVecBase3d > * 35 ConstPointerToArray< LVecBase3d > * 0 0 1233 0 0 0 0 0 0 0 0 0 0

1349 36 PointerToArray< LVecBase3d > const * 0 8576 36 PointerToArray< LVecBase3d > const * 36 PointerToArray< LVecBase3d > const * 0 0 1350 0 0 0 0 0 0 0 0 0 0

1350 34 PointerToArray< LVecBase3d > const 0 8832 34 PointerToArray< LVecBase3d > const 34 PointerToArray< LVecBase3d > const 0 0 1255 0 0 0 0 0 0 0 0 0 0

1351 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 1352 0 0 0 0 0 0 0 0 0 0

1352 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 1353 0 0 0 0 0 0 0 0 0 0

1353 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1354 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 0 1235 0 0 0 0 0 0 0 0 0 0

1355 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 0 1356 0 0 0 0 0 0 0 0 0 0

1356 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 0 1235 0 0 0 0 0 0 0 0 0 0

1357 41 ConstPointerToArray< LVecBase3f > const * 0 8576 41 ConstPointerToArray< LVecBase3f > const * 41 ConstPointerToArray< LVecBase3f > const * 0 0 1358 0 0 0 0 0 0 0 0 0 0

1358 39 ConstPointerToArray< LVecBase3f > const 0 8832 39 ConstPointerToArray< LVecBase3f > const 39 ConstPointerToArray< LVecBase3f > const 0 0 1236 0 0 0 0 0 0 0 0 0 0

1359 35 ConstPointerToArray< LVecBase3f > * 0 8576 35 ConstPointerToArray< LVecBase3f > * 35 ConstPointerToArray< LVecBase3f > * 0 0 1236 0 0 0 0 0 0 0 0 0 0

1360 36 PointerToArray< LVecBase3f > const * 0 8576 36 PointerToArray< LVecBase3f > const * 36 PointerToArray< LVecBase3f > const * 0 0 1361 0 0 0 0 0 0 0 0 0 0

1361 34 PointerToArray< LVecBase3f > const 0 8832 34 PointerToArray< LVecBase3f > const 34 PointerToArray< LVecBase3f > const 0 0 1256 0 0 0 0 0 0 0 0 0 0

1362 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1363 0 0 0 0 0 0 0 0 0 0

1363 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1364 0 0 0 0 0 0 0 0 0 0

1364 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1365 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 0 1238 0 0 0 0 0 0 0 0 0 0

1366 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 0 1367 0 0 0 0 0 0 0 0 0 0

1367 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 0 1238 0 0 0 0 0 0 0 0 0 0

1368 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4d > const * 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 0 1369 0 0 0 0 0 0 0 0 0 0

1369 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4d > const 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 0 1239 0 0 0 0 0 0 0 0 0 0

1370 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4d > * 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 0 1239 0 0 0 0 0 0 0 0 0 0

1371 44 PointerToArray< UnalignedLMatrix4d > const * 0 8576 44 PointerToArray< UnalignedLMatrix4d > const * 44 PointerToArray< UnalignedLMatrix4d > const * 0 0 1372 0 0 0 0 0 0 0 0 0 0

1372 42 PointerToArray< UnalignedLMatrix4d > const 0 8832 42 PointerToArray< UnalignedLMatrix4d > const 42 PointerToArray< UnalignedLMatrix4d > const 0 0 1257 0 0 0 0 0 0 0 0 0 0

1373 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 1374 0 0 0 0 0 0 0 0 0 0

1374 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 1375 0 0 0 0 0 0 0 0 0 0

1375 18 UnalignedLMatrix4d 0 2048 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1376 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 0 1241 0 0 0 0 0 0 0 0 0 0

1377 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 0 1378 0 0 0 0 0 0 0 0 0 0

1378 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 0 1241 0 0 0 0 0 0 0 0 0 0

1379 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4f > const * 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 0 1380 0 0 0 0 0 0 0 0 0 0

1380 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4f > const 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 0 1242 0 0 0 0 0 0 0 0 0 0

1381 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4f > * 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 0 1242 0 0 0 0 0 0 0 0 0 0

1382 44 PointerToArray< UnalignedLMatrix4f > const * 0 8576 44 PointerToArray< UnalignedLMatrix4f > const * 44 PointerToArray< UnalignedLMatrix4f > const * 0 0 1383 0 0 0 0 0 0 0 0 0 0

1383 42 PointerToArray< UnalignedLMatrix4f > const 0 8832 42 PointerToArray< UnalignedLMatrix4f > const 42 PointerToArray< UnalignedLMatrix4f > const 0 0 1258 0 0 0 0 0 0 0 0 0 0

1384 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 1385 0 0 0 0 0 0 0 0 0 0

1385 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 1386 0 0 0 0 0 0 0 0 0 0

1386 18 UnalignedLMatrix4f 0 2048 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1387 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 0 1244 0 0 0 0 0 0 0 0 0 0

1388 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 0 1389 0 0 0 0 0 0 0 0 0 0

1389 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 0 1244 0 0 0 0 0 0 0 0 0 0

1390 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4d > const * 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 0 1391 0 0 0 0 0 0 0 0 0 0

1391 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4d > const 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 0 1245 0 0 0 0 0 0 0 0 0 0

1392 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4d > * 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 0 1245 0 0 0 0 0 0 0 0 0 0

1393 45 PointerToArray< UnalignedLVecBase4d > const * 0 8576 45 PointerToArray< UnalignedLVecBase4d > const * 45 PointerToArray< UnalignedLVecBase4d > const * 0 0 1394 0 0 0 0 0 0 0 0 0 0

1394 43 PointerToArray< UnalignedLVecBase4d > const 0 8832 43 PointerToArray< UnalignedLVecBase4d > const 43 PointerToArray< UnalignedLVecBase4d > const 0 0 1259 0 0 0 0 0 0 0 0 0 0

1395 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 1396 0 0 0 0 0 0 0 0 0 0

1396 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 1397 0 0 0 0 0 0 0 0 0 0

1397 19 UnalignedLVecBase4d 0 2048 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1398 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 0 1247 0 0 0 0 0 0 0 0 0 0

1399 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 0 1400 0 0 0 0 0 0 0 0 0 0

1400 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 0 1247 0 0 0 0 0 0 0 0 0 0

1401 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4f > const * 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 0 1402 0 0 0 0 0 0 0 0 0 0

1402 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4f > const 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 0 1248 0 0 0 0 0 0 0 0 0 0

1403 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4f > * 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 0 1248 0 0 0 0 0 0 0 0 0 0

1404 45 PointerToArray< UnalignedLVecBase4f > const * 0 8576 45 PointerToArray< UnalignedLVecBase4f > const * 45 PointerToArray< UnalignedLVecBase4f > const * 0 0 1405 0 0 0 0 0 0 0 0 0 0

1405 43 PointerToArray< UnalignedLVecBase4f > const 0 8832 43 PointerToArray< UnalignedLVecBase4f > const 43 PointerToArray< UnalignedLVecBase4f > const 0 0 1260 0 0 0 0 0 0 0 0 0 0

1406 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 1407 0 0 0 0 0 0 0 0 0 0

1407 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 1408 0 0 0 0 0 0 0 0 0 0

1408 19 UnalignedLVecBase4f 0 2048 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1409 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 0 1250 0 0 0 0 0 0 0 0 0 0

1410 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 0 1411 0 0 0 0 0 0 0 0 0 0

1411 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 0 1250 0 0 0 0 0 0 0 0 0 0

1412 29 PointerToArray< LMatrix3d > * 0 8576 29 PointerToArray< LMatrix3d > * 29 PointerToArray< LMatrix3d > * 0 0 1251 0 0 0 0 0 0 0 0 0 0

1413 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1414 0 0 0 0 0 0 0 0 0 0

1414 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1415 29 PointerToArray< LMatrix3f > * 0 8576 29 PointerToArray< LMatrix3f > * 29 PointerToArray< LMatrix3f > * 0 0 1252 0 0 0 0 0 0 0 0 0 0

1416 30 PointerToArray< LVecBase2d > * 0 8576 30 PointerToArray< LVecBase2d > * 30 PointerToArray< LVecBase2d > * 0 0 1253 0 0 0 0 0 0 0 0 0 0

1417 30 PointerToArray< LVecBase2f > * 0 8576 30 PointerToArray< LVecBase2f > * 30 PointerToArray< LVecBase2f > * 0 0 1254 0 0 0 0 0 0 0 0 0 0

1418 30 PointerToArray< LVecBase3d > * 0 8576 30 PointerToArray< LVecBase3d > * 30 PointerToArray< LVecBase3d > * 0 0 1255 0 0 0 0 0 0 0 0 0 0

1419 30 PointerToArray< LVecBase3f > * 0 8576 30 PointerToArray< LVecBase3f > * 30 PointerToArray< LVecBase3f > * 0 0 1256 0 0 0 0 0 0 0 0 0 0

1420 38 PointerToArray< UnalignedLMatrix4d > * 0 8576 38 PointerToArray< UnalignedLMatrix4d > * 38 PointerToArray< UnalignedLMatrix4d > * 0 0 1257 0 0 0 0 0 0 0 0 0 0

1421 38 PointerToArray< UnalignedLMatrix4f > * 0 8576 38 PointerToArray< UnalignedLMatrix4f > * 38 PointerToArray< UnalignedLMatrix4f > * 0 0 1258 0 0 0 0 0 0 0 0 0 0

1422 39 PointerToArray< UnalignedLVecBase4d > * 0 8576 39 PointerToArray< UnalignedLVecBase4d > * 39 PointerToArray< UnalignedLVecBase4d > * 0 0 1259 0 0 0 0 0 0 0 0 0 0

1423 39 PointerToArray< UnalignedLVecBase4f > * 0 8576 39 PointerToArray< UnalignedLVecBase4f > * 39 PointerToArray< UnalignedLVecBase4f > * 0 0 1260 0 0 0 0 0 0 0 0 0 0

1424 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 1425 0 0 0 0 0 0 0 0 0 0

1425 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 1261 0 0 0 0 0 0 0 0 0 0

1426 16 BoundingVolume * 0 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 1261 0 0 0 0 0 0 0 0 0 0

1427 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1428 25 GeometricBoundingVolume * 0 8576 25 GeometricBoundingVolume * 25 GeometricBoundingVolume * 0 0 1265 0 0 0 0 0 0 0 0 0 0

1429 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1430 0 0 0 0 0 0 0 0 0 0

1430 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1265 0 0 0 0 0 0 0 0 0 0

1431 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1432 0 0 0 0 0 0 0 0 0 0

1432 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1433 0 0 0 0 0 0 0 0 0 0

1433 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1434 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1433 0 0 0 0 0 0 0 0 0 0

1435 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 1436 0 0 0 0 0 0 0 0 0 0

1436 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 1437 0 0 0 0 0 0 0 0 0 0

1437 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 1555 1556 1557 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

1438 28 FiniteBoundingVolume const * 0 8576 28 FiniteBoundingVolume const * 28 FiniteBoundingVolume const * 0 0 1439 0 0 0 0 0 0 0 0 0 0

1439 26 FiniteBoundingVolume const 0 8832 26 FiniteBoundingVolume const 26 FiniteBoundingVolume const 0 0 1266 0 0 0 0 0 0 0 0 0 0

1440 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1441 12 LParabolaf * 0 8576 12 LParabolaf * 12 LParabolaf * 0 0 1267 0 0 0 0 0 0 0 0 0 0

1442 18 LParabolaf const * 0 8576 18 LParabolaf const * 18 LParabolaf const * 0 0 1443 0 0 0 0 0 0 0 0 0 0

1443 16 LParabolaf const 0 8832 16 LParabolaf const 16 LParabolaf const 0 0 1267 0 0 0 0 0 0 0 0 0 0

1444 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1445 0 0 0 0 0 0 0 0 0 0

1445 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

1446 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1447 0 0 0 0 0 0 0 0 0 0

1447 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

1448 12 LParabolad * 0 8576 12 LParabolad * 12 LParabolad * 0 0 1268 0 0 0 0 0 0 0 0 0 0

1449 18 LParabolad const * 0 8576 18 LParabolad const * 18 LParabolad const * 0 0 1450 0 0 0 0 0 0 0 0 0 0

1450 16 LParabolad const 0 8832 16 LParabolad const 16 LParabolad const 0 0 1268 0 0 0 0 0 0 0 0 0 0

1451 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 1452 0 0 0 0 0 0 0 0 0 0

1452 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 1453 0 0 0 0 0 0 0 0 0 0

1453 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 1558 1559 1560 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

1454 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1455 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1456 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 1454 0 0 0 0 0 0 0 0 0 0

1457 9 LPlanef * 0 8576 9 LPlanef * 9 LPlanef * 0 0 1269 0 0 0 0 0 0 0 0 0 0

1458 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1459 0 0 0 0 0 0 0 0 0 0

1459 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1270 0 0 0 0 0 0 0 0 0 0

1460 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1461 0 0 0 0 0 0 0 0 0 0

1461 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1462 0 0 0 0 0 0 0 0 0 0

1462 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1463 15 LPlanef const * 0 8576 15 LPlanef const * 15 LPlanef const * 0 0 1464 0 0 0 0 0 0 0 0 0 0

1464 13 LPlanef const 0 8832 13 LPlanef const 13 LPlanef const 0 0 1269 0 0 0 0 0 0 0 0 0 0

1465 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 1437 0 0 0 0 0 0 0 0 0 0

1466 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 1462 0 0 0 0 0 0 0 0 0 0

1467 9 LPlaned * 0 8576 9 LPlaned * 9 LPlaned * 0 0 1271 0 0 0 0 0 0 0 0 0 0

1468 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 1469 0 0 0 0 0 0 0 0 0 0

1469 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 1454 0 0 0 0 0 0 0 0 0 0

1470 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 1471 0 0 0 0 0 0 0 0 0 0

1471 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 1272 0 0 0 0 0 0 0 0 0 0

1472 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 1473 0 0 0 0 0 0 0 0 0 0

1473 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 1474 0 0 0 0 0 0 0 0 0 0

1474 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1475 15 LPlaned const * 0 8576 15 LPlaned const * 15 LPlaned const * 0 0 1476 0 0 0 0 0 0 0 0 0 0

1476 13 LPlaned const 0 8832 13 LPlaned const 13 LPlaned const 0 0 1271 0 0 0 0 0 0 0 0 0 0

1477 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 1453 0 0 0 0 0 0 0 0 0 0

1478 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 1474 0 0 0 0 0 0 0 0 0 0

1479 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1273 0 0 0 0 0 0 0 0 0 0

1480 19 BoundingBox const * 0 8576 19 BoundingBox const * 19 BoundingBox const * 0 0 1481 0 0 0 0 0 0 0 0 0 0

1481 17 BoundingBox const 0 8832 17 BoundingBox const 17 BoundingBox const 0 0 1273 0 0 0 0 0 0 0 0 0 0

1482 11 LFrustumf * 0 8576 11 LFrustumf * 11 LFrustumf * 0 0 1274 0 0 0 0 0 0 0 0 0 0

1483 11 LFrustumd * 0 8576 11 LFrustumd * 11 LFrustumd * 0 0 1275 0 0 0 0 0 0 0 0 0 0

1484 17 LFrustumf const * 0 8576 17 LFrustumf const * 17 LFrustumf const * 0 0 1485 0 0 0 0 0 0 0 0 0 0

1485 15 LFrustumf const 0 8832 15 LFrustumf const 15 LFrustumf const 0 0 1274 0 0 0 0 0 0 0 0 0 0

1486 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

1487 20 BoundingHexahedron * 0 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 1276 0 0 0 0 0 0 0 0 0 0

1488 26 BoundingHexahedron const * 0 8576 26 BoundingHexahedron const * 26 BoundingHexahedron const * 0 0 1489 0 0 0 0 0 0 0 0 0 0

1489 24 BoundingHexahedron const 0 8832 24 BoundingHexahedron const 24 BoundingHexahedron const 0 0 1276 0 0 0 0 0 0 0 0 0 0

1490 14 BoundingLine * 0 8576 14 BoundingLine * 14 BoundingLine * 0 0 1277 0 0 0 0 0 0 0 0 0 0

1491 20 BoundingLine const * 0 8576 20 BoundingLine const * 20 BoundingLine const * 0 0 1492 0 0 0 0 0 0 0 0 0 0

1492 18 BoundingLine const 0 8832 18 BoundingLine const 18 BoundingLine const 0 0 1277 0 0 0 0 0 0 0 0 0 0

1493 15 BoundingPlane * 0 8576 15 BoundingPlane * 15 BoundingPlane * 0 0 1278 0 0 0 0 0 0 0 0 0 0

1494 21 BoundingPlane const * 0 8576 21 BoundingPlane const * 21 BoundingPlane const * 0 0 1495 0 0 0 0 0 0 0 0 0 0

1495 19 BoundingPlane const 0 8832 19 BoundingPlane const 19 BoundingPlane const 0 0 1278 0 0 0 0 0 0 0 0 0 0

1496 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1279 0 0 0 0 0 0 0 0 0 0

1497 22 BoundingSphere const * 0 8576 22 BoundingSphere const * 22 BoundingSphere const * 0 0 1498 0 0 0 0 0 0 0 0 0 0

1498 20 BoundingSphere const 0 8832 20 BoundingSphere const 20 BoundingSphere const 0 0 1279 0 0 0 0 0 0 0 0 0 0

1499 28 IntersectionBoundingVolume * 0 8576 28 IntersectionBoundingVolume * 28 IntersectionBoundingVolume * 0 0 1280 0 0 0 0 0 0 0 0 0 0

1500 34 IntersectionBoundingVolume const * 0 8576 34 IntersectionBoundingVolume const * 34 IntersectionBoundingVolume const * 0 0 1501 0 0 0 0 0 0 0 0 0 0

1501 32 IntersectionBoundingVolume const 0 8832 32 IntersectionBoundingVolume const 32 IntersectionBoundingVolume const 0 0 1280 0 0 0 0 0 0 0 0 0 0

1502 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1503 10 Mersenne * 0 8576 10 Mersenne * 10 Mersenne * 0 0 1281 0 0 0 0 0 0 0 0 0 0

1504 20 OmniBoundingVolume * 0 8576 20 OmniBoundingVolume * 20 OmniBoundingVolume * 0 0 1282 0 0 0 0 0 0 0 0 0 0

1505 21 UnionBoundingVolume * 0 8576 21 UnionBoundingVolume * 21 UnionBoundingVolume * 0 0 1283 0 0 0 0 0 0 0 0 0 0

1506 27 UnionBoundingVolume const * 0 8576 27 UnionBoundingVolume const * 27 UnionBoundingVolume const * 0 0 1507 0 0 0 0 0 0 0 0 0 0

1507 25 UnionBoundingVolume const 0 8832 25 UnionBoundingVolume const 25 UnionBoundingVolume const 0 0 1283 0 0 0 0 0 0 0 0 0 0

1508 18 Randomizer const * 0 8576 18 Randomizer const * 18 Randomizer const * 0 0 1509 0 0 0 0 0 0 0 0 0 0

1509 16 Randomizer const 0 8832 16 Randomizer const 16 Randomizer const 0 0 1284 0 0 0 0 0 0 0 0 0 0

1510 12 Randomizer * 0 8576 12 Randomizer * 12 Randomizer * 0 0 1284 0 0 0 0 0 0 0 0 0 0

1511 13 PerlinNoise * 0 8576 13 PerlinNoise * 13 PerlinNoise * 0 0 1285 0 0 0 0 0 0 0 0 0 0

1512 14 PerlinNoise2 * 0 8576 14 PerlinNoise2 * 14 PerlinNoise2 * 0 0 1286 0 0 0 0 0 0 0 0 0 0

1513 20 PerlinNoise2 const * 0 8576 20 PerlinNoise2 const * 20 PerlinNoise2 const * 0 0 1514 0 0 0 0 0 0 0 0 0 0

1514 18 PerlinNoise2 const 0 8832 18 PerlinNoise2 const 18 PerlinNoise2 const 0 0 1286 0 0 0 0 0 0 0 0 0 0

1515 14 PerlinNoise3 * 0 8576 14 PerlinNoise3 * 14 PerlinNoise3 * 0 0 1287 0 0 0 0 0 0 0 0 0 0

1516 20 PerlinNoise3 const * 0 8576 20 PerlinNoise3 const * 20 PerlinNoise3 const * 0 0 1517 0 0 0 0 0 0 0 0 0 0

1517 18 PerlinNoise3 const 0 8832 18 PerlinNoise3 const 18 PerlinNoise3 const 0 0 1287 0 0 0 0 0 0 0 0 0 0

1518 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 1288 0 0 0 0 0 0 0 0 0 0

1519 27 StackedPerlinNoise2 const * 0 8576 27 StackedPerlinNoise2 const * 27 StackedPerlinNoise2 const * 0 0 1520 0 0 0 0 0 0 0 0 0 0

1520 25 StackedPerlinNoise2 const 0 8832 25 StackedPerlinNoise2 const 25 StackedPerlinNoise2 const 0 0 1288 0 0 0 0 0 0 0 0 0 0

1521 21 StackedPerlinNoise3 * 0 8576 21 StackedPerlinNoise3 * 21 StackedPerlinNoise3 * 0 0 1289 0 0 0 0 0 0 0 0 0 0

1522 27 StackedPerlinNoise3 const * 0 8576 27 StackedPerlinNoise3 const * 27 StackedPerlinNoise3 const * 0 0 1523 0 0 0 0 0 0 0 0 0 0

1523 25 StackedPerlinNoise3 const 0 8832 25 StackedPerlinNoise3 const 25 StackedPerlinNoise3 const 0 0 1289 0 0 0 0 0 0 0 0 0 0

1524 14 Triangulator * 0 8576 14 Triangulator * 14 Triangulator * 0 0 1290 0 0 0 0 0 0 0 0 0 0

1525 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 1526 0 0 0 0 0 0 0 0 0 0

1526 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 1527 0 0 0 0 0 0 0 0 0 0

1527 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

1528 20 Triangulator const * 0 8576 20 Triangulator const * 20 Triangulator const * 0 0 1529 0 0 0 0 0 0 0 0 0 0

1529 18 Triangulator const 0 8832 18 Triangulator const 18 Triangulator const 0 0 1290 0 0 0 0 0 0 0 0 0 0

1530 15 Triangulator3 * 0 8576 15 Triangulator3 * 15 Triangulator3 * 0 0 1291 0 0 0 0 0 0 0 0 0 0

1531 21 Triangulator3 const * 0 8576 21 Triangulator3 const * 21 Triangulator3 const * 0 0 1532 0 0 0 0 0 0 0 0 0 0

1532 19 Triangulator3 const 0 8832 19 Triangulator3 const 19 Triangulator3 const 0 0 1291 0 0 0 0 0 0 0 0 0 0

1533 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 1302 0 0 0 0 0 0 0 0 0 0

1534 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1320 0 0 0 0 0 0 0 0 0 0

1535 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 1536 0 0 0 0 0 0 0 0 0 0

1536 12 LQuaterniond 0 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

1537 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 1538 0 0 0 0 0 0 0 0 0 0

1538 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

0
0
22
1539 0 0 459 10 get_points 14 get_num_points 9 get_point 
1540 0 0 459 10 get_planes 14 get_num_planes 9 get_plane 
1541 0 0 488 10 get_points 14 get_num_points 9 get_point 
1542 0 0 488 10 get_planes 14 get_num_planes 9 get_plane 
1543 0 0 522 14 get_components 18 get_num_components 13 get_component 
1544 0 0 543 14 get_components 18 get_num_components 13 get_component 
1545 0 0 598 12 get_vertices 16 get_num_vertices 10 get_vertex 
1546 0 0 615 12 get_vertices 16 get_num_vertices 10 get_vertex 
1547 0 0 639 8 get_rows 4 size 7 get_row 
1548 0 0 639 8 get_cols 4 size 7 get_col 
1549 0 0 639 9 get_col2s 4 size 8 get_col2 
1550 0 0 639 9 get_row2s 4 size 8 get_row2 
1551 0 0 671 8 get_rows 4 size 7 get_row 
1552 0 0 671 8 get_cols 4 size 7 get_col 
1553 0 0 671 9 get_col2s 4 size 8 get_col2 
1554 0 0 671 9 get_row2s 4 size 8 get_row2 
1555 0 0 1137 8 get_rows 4 size 7 get_row 
1556 0 0 1137 8 get_cols 4 size 7 get_col 
1557 0 0 1137 9 get_row3s 4 size 8 get_row3 
1558 0 0 1179 8 get_rows 4 size 7 get_row 
1559 0 0 1179 8 get_cols 4 size 7 get_col 
1560 0 0 1179 9 get_row3s 4 size 8 get_row3 
