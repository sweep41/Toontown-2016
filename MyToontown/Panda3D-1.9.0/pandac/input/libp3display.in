1399436882
2 2
12 libp3display 4 62HU 4 core 
597
628 8 get_pipe 0 4 1225 24 GraphicsDevice::get_pipe 0 1 1 792
// Filename: graphicsDevice.I
// Created by:  masad (21Jul03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsDevice::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this device is
//               associated with.
////////////////////////////////////////////////////////////////////
58
inline GraphicsPipe *GraphicsDevice::get_pipe(void) const;

629 14 get_class_type 0 4 1225 30 GraphicsDevice::get_class_type 0 1 2 0
55
static TypeHandle GraphicsDevice::get_class_type(void);

630 19 ~DisplayInformation 0 4 1227 39 DisplayInformation::~DisplayInformation 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
DisplayInformation::~DisplayInformation(void);

631 18 DisplayInformation 0 4 1227 38 DisplayInformation::DisplayInformation 0 1 3 231
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
DisplayInformation::DisplayInformation(void);

632 17 get_display_state 0 4 1227 37 DisplayInformation::get_display_state 0 1 4 220
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
int DisplayInformation::get_display_state(void);

633 24 get_maximum_window_width 0 4 1227 44 DisplayInformation::get_maximum_window_width 0 1 5 244
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
int DisplayInformation::get_maximum_window_width(void);

634 25 get_maximum_window_height 0 4 1227 45 DisplayInformation::get_maximum_window_height 0 1 6 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
int DisplayInformation::get_maximum_window_height(void);

635 25 get_window_bits_per_pixel 0 4 1227 45 DisplayInformation::get_window_bits_per_pixel 0 1 7 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_window_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
int DisplayInformation::get_window_bits_per_pixel(void);

636 23 get_total_display_modes 0 4 1227 43 DisplayInformation::get_total_display_modes 0 1 8 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_total_display_modes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
int DisplayInformation::get_total_display_modes(void);

637 22 get_display_mode_width 0 4 1227 42 DisplayInformation::get_display_mode_width 0 1 9 242
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
int DisplayInformation::get_display_mode_width(int display_index);

638 23 get_display_mode_height 0 4 1227 43 DisplayInformation::get_display_mode_height 0 1 10 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
int DisplayInformation::get_display_mode_height(int display_index);

639 31 get_display_mode_bits_per_pixel 0 4 1227 51 DisplayInformation::get_display_mode_bits_per_pixel 0 1 11 251
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
int DisplayInformation::get_display_mode_bits_per_pixel(int display_index);

640 29 get_display_mode_refresh_rate 0 4 1227 49 DisplayInformation::get_display_mode_refresh_rate 0 1 12 249
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_refresh_rate
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
int DisplayInformation::get_display_mode_refresh_rate(int display_index);

641 32 get_display_mode_fullscreen_only 0 4 1227 52 DisplayInformation::get_display_mode_fullscreen_only 0 1 13 252
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_fullscreen_only
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
76
int DisplayInformation::get_display_mode_fullscreen_only(int display_index);

642 16 get_shader_model 0 4 1227 36 DisplayInformation::get_shader_model 0 1 14 236
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_shader_model
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
int DisplayInformation::get_shader_model(void);

643 16 get_video_memory 0 4 1227 36 DisplayInformation::get_video_memory 0 1 15 236
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_video_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
int DisplayInformation::get_video_memory(void);

644 18 get_texture_memory 0 4 1227 38 DisplayInformation::get_texture_memory 0 1 16 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_texture_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_texture_memory(void);

645 25 update_memory_information 0 4 1227 45 DisplayInformation::update_memory_information 0 1 17 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_memory_information
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
void DisplayInformation::update_memory_information(void);

646 19 get_physical_memory 0 4 1227 39 DisplayInformation::get_physical_memory 0 1 18 239
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_physical_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
unsigned __int64 DisplayInformation::get_physical_memory(void);

647 29 get_available_physical_memory 0 4 1227 49 DisplayInformation::get_available_physical_memory 0 1 19 249
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_physical_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
unsigned __int64 DisplayInformation::get_available_physical_memory(void);

648 18 get_page_file_size 0 4 1227 38 DisplayInformation::get_page_file_size 0 1 20 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_size
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
unsigned __int64 DisplayInformation::get_page_file_size(void);

649 28 get_available_page_file_size 0 4 1227 48 DisplayInformation::get_available_page_file_size 0 1 21 248
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_page_file_size
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
unsigned __int64 DisplayInformation::get_available_page_file_size(void);

650 26 get_process_virtual_memory 0 4 1227 46 DisplayInformation::get_process_virtual_memory 0 1 22 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::_process_virtual_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
unsigned __int64 DisplayInformation::get_process_virtual_memory(void);

651 36 get_available_process_virtual_memory 0 4 1227 56 DisplayInformation::get_available_process_virtual_memory 0 1 23 256
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_process_virtual_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
80
unsigned __int64 DisplayInformation::get_available_process_virtual_memory(void);

652 15 get_memory_load 0 4 1227 35 DisplayInformation::get_memory_load 0 1 24 235
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_memory_load
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
int DisplayInformation::get_memory_load(void);

653 20 get_page_fault_count 0 4 1227 40 DisplayInformation::get_page_fault_count 0 1 25 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_fault_count
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
unsigned __int64 DisplayInformation::get_page_fault_count(void);

654 18 get_process_memory 0 4 1227 38 DisplayInformation::get_process_memory 0 1 26 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_process_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
unsigned __int64 DisplayInformation::get_process_memory(void);

655 23 get_peak_process_memory 0 4 1227 43 DisplayInformation::get_peak_process_memory 0 1 27 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_process_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
unsigned __int64 DisplayInformation::get_peak_process_memory(void);

656 19 get_page_file_usage 0 4 1227 39 DisplayInformation::get_page_file_usage 0 1 28 239
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_usage
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
unsigned __int64 DisplayInformation::get_page_file_usage(void);

657 24 get_peak_page_file_usage 0 4 1227 44 DisplayInformation::get_peak_page_file_usage 0 1 29 244
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_page_file_usage
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
unsigned __int64 DisplayInformation::get_peak_page_file_usage(void);

658 13 get_vendor_id 0 4 1227 33 DisplayInformation::get_vendor_id 0 1 30 233
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_vendor_id
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
int DisplayInformation::get_vendor_id(void);

659 13 get_device_id 0 4 1227 33 DisplayInformation::get_device_id 0 1 31 233
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_device_id
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
int DisplayInformation::get_device_id(void);

660 18 get_driver_product 0 4 1227 38 DisplayInformation::get_driver_product 0 1 32 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_product
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_driver_product(void);

661 18 get_driver_version 0 4 1227 38 DisplayInformation::get_driver_version 0 1 33 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_version
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_driver_version(void);

662 22 get_driver_sub_version 0 4 1227 42 DisplayInformation::get_driver_sub_version 0 1 34 242
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_sub_version
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
int DisplayInformation::get_driver_sub_version(void);

663 16 get_driver_build 0 4 1227 36 DisplayInformation::get_driver_build 0 1 35 236
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_build
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
int DisplayInformation::get_driver_build(void);

664 21 get_driver_date_month 0 4 1227 41 DisplayInformation::get_driver_date_month 0 1 36 241
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_month
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
int DisplayInformation::get_driver_date_month(void);

665 19 get_driver_date_day 0 4 1227 39 DisplayInformation::get_driver_date_day 0 1 37 239
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_day
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
int DisplayInformation::get_driver_date_day(void);

666 20 get_driver_date_year 0 4 1227 40 DisplayInformation::get_driver_date_year 0 1 38 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_year
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_driver_date_year(void);

667 18 get_cpu_id_version 0 4 1227 38 DisplayInformation::get_cpu_id_version 0 1 39 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_version
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_cpu_id_version(void);

668 15 get_cpu_id_size 0 4 1227 35 DisplayInformation::get_cpu_id_size 0 1 40 312
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_size
//       Access: Published
//  Description: Returns the number of 32-bit values for cpu id 
//               binary data.
////////////////////////////////////////////////////////////////////
46
int DisplayInformation::get_cpu_id_size(void);

669 15 get_cpu_id_data 0 4 1227 35 DisplayInformation::get_cpu_id_data 0 1 41 309
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_data
//       Access: Published
//  Description: Returns part of cpu id binary data based on the 
//               index.  
////////////////////////////////////////////////////////////////////
60
unsigned int DisplayInformation::get_cpu_id_data(int index);

670 21 get_cpu_vendor_string 0 4 1227 41 DisplayInformation::get_cpu_vendor_string 0 1 42 242
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_vendor_string
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
60
char const *DisplayInformation::get_cpu_vendor_string(void);

671 20 get_cpu_brand_string 0 4 1227 40 DisplayInformation::get_cpu_brand_string 0 1 43 241
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_string
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
59
char const *DisplayInformation::get_cpu_brand_string(void);

672 27 get_cpu_version_information 0 4 1227 47 DisplayInformation::get_cpu_version_information 0 1 44 248
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_version_information
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
67
unsigned int DisplayInformation::get_cpu_version_information(void);

673 19 get_cpu_brand_index 0 4 1227 39 DisplayInformation::get_cpu_brand_index 0 1 45 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_index
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
59
unsigned int DisplayInformation::get_cpu_brand_index(void);

674 17 get_cpu_frequency 0 4 1227 37 DisplayInformation::get_cpu_frequency 0 1 46 237
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
unsigned __int64 DisplayInformation::get_cpu_frequency(void);

675 12 get_cpu_time 0 4 1227 32 DisplayInformation::get_cpu_time 0 1 47 232
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_time
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
unsigned __int64 DisplayInformation::get_cpu_time(void);

676 25 get_maximum_cpu_frequency 0 4 1227 45 DisplayInformation::get_maximum_cpu_frequency 0 1 48 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
unsigned __int64 DisplayInformation::get_maximum_cpu_frequency(void);

677 25 get_current_cpu_frequency 0 4 1227 45 DisplayInformation::get_current_cpu_frequency 0 1 49 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_current_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
unsigned __int64 DisplayInformation::get_current_cpu_frequency(void);

678 20 update_cpu_frequency 0 4 1227 40 DisplayInformation::update_cpu_frequency 0 1 50 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
void DisplayInformation::update_cpu_frequency(int processor_number);

679 17 get_num_cpu_cores 0 4 1227 37 DisplayInformation::get_num_cpu_cores 0 1 51 405
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_cpu_cores
//       Access: Published
//  Description: Returns the number of individual CPU cores in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts once here.
////////////////////////////////////////////////////////////////////
48
int DisplayInformation::get_num_cpu_cores(void);

680 20 get_num_logical_cpus 0 4 1227 40 DisplayInformation::get_num_logical_cpus 0 1 52 411
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_logical_cpus
//       Access: Published
//  Description: Returns the number of logical CPU's in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts as two or more here.
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_num_logical_cpus(void);

681 20 get_os_version_major 0 4 1227 40 DisplayInformation::get_os_version_major 0 1 53 263
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_major
//       Access: Published
//  Description: Returns -1 if not set. 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_os_version_major(void);

682 20 get_os_version_minor 0 4 1227 40 DisplayInformation::get_os_version_minor 0 1 54 263
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_minor
//       Access: Published
//  Description: Returns -1 if not set. 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_os_version_minor(void);

683 20 get_os_version_build 0 4 1227 40 DisplayInformation::get_os_version_build 0 1 55 263
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_build
//       Access: Published
//  Description: Returns -1 if not set. 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_os_version_build(void);

684 18 get_os_platform_id 0 4 1227 38 DisplayInformation::get_os_platform_id 0 1 56 260
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_platform_id
//       Access: Published
//  Description: Returns -1 if not set.
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_os_platform_id(void);

685 8 is_valid 0 4 1229 22 GraphicsPipe::is_valid 0 1 57 1182
// Filename: graphicsPipe.I
// Created by:  frang (07Mar99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::is_valid
//       Access: Published
//  Description: Returns false if this pipe is known to be invalid,
//               meaning that an attempt to create a GraphicsWindow
//               with the pipe will certainly fail.  Returns true if
//               the pipe is probably valid (is this case, an attempt
//               to create a GraphicsWindow should succeed, but might
//               still fail).
//
//               Use the GraphicsEngine class to create a
//               GraphicsWindow on a particular pipe.
////////////////////////////////////////////////////////////////////
47
inline bool GraphicsPipe::is_valid(void) const;

686 19 get_supported_types 0 4 1229 33 GraphicsPipe::get_supported_types 0 1 58 682
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_supported_types
//       Access: Published
//  Description: Returns the mask of bits that represents the kinds of
//               GraphicsOutput objects this pipe might be able to
//               successfully create.  The return value is the union
//               of bits in GraphicsPipe::OutputTypes that represents
//               the set of GraphicsOutput types.
//
//               A 1 bit in a particular position is not a guarantee
//               of success, but a 0 bit is a guarantee of failure.
////////////////////////////////////////////////////////////////////
57
inline int GraphicsPipe::get_supported_types(void) const;

687 13 supports_type 0 4 1229 27 GraphicsPipe::supports_type 0 1 59 766
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::supports_type
//       Access: Published
//  Description: A convenience function to ask if a particular type or
//               types of GraphicsObjects are supported.  The
//               parameter is a union of one or more bits defined in
//               GrpahicsPipe::OutputTypes.
//
//               Returns true if all of the requested types are listed
//               in the supported_types mask, false if any one of them
//               is not.  This is not a guarantee that the indicated
//               output type will successfully be created when it is
//               attempted.
////////////////////////////////////////////////////////////////////
57
inline bool GraphicsPipe::supports_type(int flags) const;

688 17 get_display_width 0 4 1229 31 GraphicsPipe::get_display_width 0 1 60 547
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_width
//       Access: Published
//  Description: Returns the width of the entire display, if it is
//               known.  This may return 0.  This is not a guarantee
//               that windows (particularly fullscreen windows) may
//               not be created larger than this width, but it is
//               intended to provide a hint to the application.
////////////////////////////////////////////////////////////////////
55
inline int GraphicsPipe::get_display_width(void) const;

689 18 get_display_height 0 4 1229 32 GraphicsPipe::get_display_height 0 1 61 385
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_height
//       Access: Published
//  Description: Returns the height of the entire display, if it is
//               known.  This may return 0.  See the caveats for
//               get_display_width().
////////////////////////////////////////////////////////////////////
56
inline int GraphicsPipe::get_display_height(void) const;

690 23 get_display_information 0 4 1229 37 GraphicsPipe::get_display_information 0 1 62 272
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_information
//       Access: Published
//  Description: Gets the pipe's DisplayInformation.
////////////////////////////////////////////////////////////////////
64
DisplayInformation *GraphicsPipe::get_display_information(void);

691 15 lookup_cpu_data 0 6 1229 29 GraphicsPipe::lookup_cpu_data 0 1 63 400
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::lookup_cpu_data
//       Access: Public, Virtual
//  Description: Looks up the detailed CPU information and stores it
//               in _display_information, if supported by the OS.
//               This may take a second or two.
////////////////////////////////////////////////////////////////////
49
virtual void GraphicsPipe::lookup_cpu_data(void);

692 18 get_interface_name 0 6 1229 32 GraphicsPipe::get_interface_name 0 1 64 0
78
virtual basic_string< char > GraphicsPipe::get_interface_name(void) const = 0;

693 14 get_class_type 0 4 1229 28 GraphicsPipe::get_class_type 0 1 65 0
53
static TypeHandle GraphicsPipe::get_class_type(void);

694 15 ~DrawableRegion 0 6 1232 31 DrawableRegion::~DrawableRegion 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual DrawableRegion::~DrawableRegion(void);

695 22 set_clear_color_active 0 4 1232 38 DrawableRegion::set_clear_color_active 0 1 66 523
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the color
//               buffer should be cleared every frame.  If this is
//               true, the color buffer will be cleared to the color
//               indicated by set_clear_color(); otherwise, it will be
//               left alone.
////////////////////////////////////////////////////////////////////
76
inline void DrawableRegion::set_clear_color_active(bool clear_color_active);

696 22 get_clear_color_active 0 4 1232 38 DrawableRegion::get_clear_color_active 0 1 67 413
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_color_active().
////////////////////////////////////////////////////////////////////
63
inline bool DrawableRegion::get_clear_color_active(void) const;

697 22 set_clear_depth_active 0 4 1232 38 DrawableRegion::set_clear_depth_active 0 1 68 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the depth
//               buffer should be cleared every frame.  If this is
//               true, the depth buffer will be cleared to the depth
//               value indicated by set_clear_depth(); otherwise, it
//               will be left alone.
////////////////////////////////////////////////////////////////////
76
inline void DrawableRegion::set_clear_depth_active(bool clear_depth_active);

698 22 get_clear_depth_active 0 4 1232 38 DrawableRegion::get_clear_depth_active 0 1 69 413
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the depth buffer should be cleared
//               every frame.  See set_clear_depth_active().
////////////////////////////////////////////////////////////////////
63
inline bool DrawableRegion::get_clear_depth_active(void) const;

699 24 set_clear_stencil_active 0 4 1232 40 DrawableRegion::set_clear_stencil_active 0 1 70 531
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_stencil_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the stencil
//               buffer should be cleared every frame.  If this is
//               true, the stencil buffer will be cleared to the value
//               indicated by set_clear_stencil(); otherwise, it will be
//               left alone.
////////////////////////////////////////////////////////////////////
80
inline void DrawableRegion::set_clear_stencil_active(bool clear_stencil_active);

700 24 get_clear_stencil_active 0 4 1232 40 DrawableRegion::get_clear_stencil_active 0 1 71 417
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_stencil_active().
////////////////////////////////////////////////////////////////////
65
inline bool DrawableRegion::get_clear_stencil_active(void) const;

701 15 set_clear_color 0 4 1232 31 DrawableRegion::set_clear_color 0 1 72 535
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color
//       Access: Published
//  Description: Sets the clear color to the indicated value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
69
inline void DrawableRegion::set_clear_color(LVecBase4f const &color);

702 15 get_clear_color 0 4 1232 31 DrawableRegion::get_clear_color 0 1 73 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color
//       Access: Published
//  Description: Returns the current clear color value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
69
inline LVecBase4f const &DrawableRegion::get_clear_color(void) const;

703 15 set_clear_depth 0 4 1232 31 DrawableRegion::set_clear_depth 0 1 74 535
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth
//       Access: Published
//  Description: Sets the clear depth to the indicated value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
57
inline void DrawableRegion::set_clear_depth(float depth);

704 15 get_clear_depth 0 4 1232 31 DrawableRegion::get_clear_depth 0 1 75 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth
//       Access: Published
//  Description: Returns the current clear depth value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
57
inline float DrawableRegion::get_clear_depth(void) const;

705 17 set_clear_stencil 0 4 1232 33 DrawableRegion::set_clear_stencil 0 1 76 543
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_stencil
//       Access: Published
//  Description: Sets the clear stencil to the indicated value.  This is
//               the value that will be used to clear the stencil buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_stencil_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
68
inline void DrawableRegion::set_clear_stencil(unsigned int stencil);

706 17 get_clear_stencil 0 4 1232 33 DrawableRegion::get_clear_stencil 0 1 77 539
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil
//       Access: Published
//  Description: Returns the current clear stencil value.  This is
//               the value that will be used to clear the stencil buffer
//               every frame, but only if get_clear_stencil_active()
//               returns true.  If get_clear_stencil_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
66
inline unsigned int DrawableRegion::get_clear_stencil(void) const;

707 16 set_clear_active 0 6 1232 32 DrawableRegion::set_clear_active 0 1 78 285
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_active
//       Access: Published, Virtual
//  Description: Sets the clear-active flag for any bitplane.
////////////////////////////////////////////////////////////////////
76
virtual void DrawableRegion::set_clear_active(int n, bool clear_aux_active);

708 16 get_clear_active 0 6 1232 32 DrawableRegion::get_clear_active 0 1 79 285
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_active
//       Access: Published, Virtual
//  Description: Gets the clear-active flag for any bitplane.
////////////////////////////////////////////////////////////////////
59
virtual bool DrawableRegion::get_clear_active(int n) const;

709 15 set_clear_value 0 6 1232 31 DrawableRegion::set_clear_value 0 1 80 278
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_value
//       Access: Published, Virtual
//  Description: Sets the clear value for any bitplane.
////////////////////////////////////////////////////////////////////
83
virtual void DrawableRegion::set_clear_value(int n, LVecBase4f const &clear_value);

710 15 get_clear_value 0 6 1232 31 DrawableRegion::get_clear_value 0 1 81 281
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_value
//       Access: Published, Virtual
//  Description: Returns the clear value for any bitplane.
////////////////////////////////////////////////////////////////////
71
virtual LVecBase4f const &DrawableRegion::get_clear_value(int n) const;

711 14 disable_clears 0 6 1232 30 DrawableRegion::disable_clears 0 1 82 352
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::disable_clears
//       Access: Published, Virtual
//  Description: Disables both the color and depth clear.  See
//               set_clear_color_active and set_clear_depth_active.
////////////////////////////////////////////////////////////////////
50
virtual void DrawableRegion::disable_clears(void);

712 19 is_any_clear_active 0 6 1232 35 DrawableRegion::is_any_clear_active 0 1 83 461
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::is_any_clear_active
//       Access: Published, Virtual
//  Description: Returns true if any of the clear types (so far there
//               are just color or depth) have been set active, or
//               false if none of them are active and there is no need
//               to clear.
////////////////////////////////////////////////////////////////////
61
virtual bool DrawableRegion::is_any_clear_active(void) const;

713 14 set_pixel_zoom 0 6 1232 30 DrawableRegion::set_pixel_zoom 0 1 84 1485
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_pixel_zoom
//       Access: Published, Virtual
//  Description: Sets the amount by which the pixels of the region are
//               scaled internally when filling the image interally.
//               Setting this number larger makes the pixels blockier,
//               but may make the rendering faster, particularly for
//               software renderers.  Setting this number to 2.0
//               reduces the number of pixels that have to be filled
//               by the renderer by a factor of 2.0.  It doesn't make
//               sense to set this lower than 1.0.
//
//               It is possible to set this on either individual
//               DisplayRegions or on overall GraphicsWindows, but you
//               will get better performance for setting it on the
//               window rather than its individual DisplayRegions.
//               Also, you may not set it on a DisplayRegion that
//               doesn't have both clear_color() and clear_depth()
//               enabled.
//
//               This property is only supported on renderers for
//               which it is particularly useful--currently, this is
//               the tinydisplay software renderer.  Other kinds of
//               renderers allow you to set this property, but ignore
//               it.
////////////////////////////////////////////////////////////////////
62
virtual void DrawableRegion::set_pixel_zoom(float pixel_zoom);

714 14 get_pixel_zoom 0 4 1232 30 DrawableRegion::get_pixel_zoom 0 1 85 388
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_zoom
//       Access: Published
//  Description: Returns the value set by set_pixel_zoom(), regardless
//               of whether it is being respected or not.  Also see
//               get_pixel_factor().
////////////////////////////////////////////////////////////////////
56
inline float DrawableRegion::get_pixel_zoom(void) const;

715 16 get_pixel_factor 0 4 1232 32 DrawableRegion::get_pixel_factor 0 1 86 650
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_factor
//       Access: Published
//  Description: Returns the amount by which the height and width of
//               the region will be scaled internally, based on the
//               zoom factor set by set_pixel_zoom().  This will
//               return 1.0 if the pixel_zoom was not set or if it is
//               not being respected (for instance, because the
//               underlying renderer doesn't support it--see
//               supports_pixel_zoom).
////////////////////////////////////////////////////////////////////
58
inline float DrawableRegion::get_pixel_factor(void) const;

716 19 supports_pixel_zoom 0 6 1232 35 DrawableRegion::supports_pixel_zoom 0 1 87 802
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::supports_pixel_zoom
//       Access: Published, Virtual
//  Description: Returns true if a call to set_pixel_zoom() will be
//               respected, false if it will be ignored.  If this
//               returns false, then get_pixel_factor() will always
//               return 1.0, regardless of what value you specify for
//               set_pixel_zoom().
//
//               This may return false if the underlying renderer
//               doesn't support pixel zooming, or if you have called
//               this on a DisplayRegion that doesn't have both
//               set_clear_color() and set_clear_depth() enabled.
////////////////////////////////////////////////////////////////////
61
virtual bool DrawableRegion::supports_pixel_zoom(void) const;

717 21 get_renderbuffer_type 0 4 1232 37 DrawableRegion::get_renderbuffer_type 0 1 88 334
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_renderbuffer_type
//       Access: Static, Published
//  Description: Returns the RenderBuffer::Type that corresponds
//               to a RenderTexturePlane.
////////////////////////////////////////////////////////////////////
60
static int DrawableRegion::get_renderbuffer_type(int plane);

718 12 WindowHandle 0 4 1234 26 WindowHandle::WindowHandle 0 2 89 90 943
// Filename: windowHandle.I
// Created by:  drose (30Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
130
inline WindowHandle::WindowHandle(WindowHandle::OSHandle *os_handle);
inline WindowHandle::WindowHandle(WindowHandle const &copy);

719 13 get_os_handle 0 4 1234 27 WindowHandle::get_os_handle 0 1 91 321
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_os_handle
//       Access: Published
//  Description: Returns the OS-specific handle stored internally to
//               the WindowHandle wrapper.
////////////////////////////////////////////////////////////////////
71
inline WindowHandle::OSHandle *WindowHandle::get_os_handle(void) const;

720 13 set_os_handle 0 4 1234 27 WindowHandle::set_os_handle 0 1 92 321
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::set_os_handle
//       Access: Published
//  Description: Changes the OS-specific handle stored internally to
//               the WindowHandle wrapper.
////////////////////////////////////////////////////////////////////
75
inline void WindowHandle::set_os_handle(WindowHandle::OSHandle *os_handle);

721 20 send_windows_message 0 4 1234 34 WindowHandle::send_windows_message 0 1 93 566
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::send_windows_message
//       Access: Published
//  Description: Call this method on a parent WindowHandle to deliver
//               a Windows message to the current child window, if any.
//               This is used in the web plugin system to deliver
//               button events detected directly by the browser system
//               into Panda, which is particularly necessary on Vista.
////////////////////////////////////////////////////////////////////
82
void WindowHandle::send_windows_message(unsigned int msg, int wparam, int lparam);

722 14 get_int_handle 0 4 1234 28 WindowHandle::get_int_handle 0 1 94 397
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_int_handle
//       Access: Published
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
////////////////////////////////////////////////////////////////////
54
unsigned int WindowHandle::get_int_handle(void) const;

723 6 output 0 4 1234 20 WindowHandle::output 0 1 95 220
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
void WindowHandle::output(ostream &out) const;

724 14 get_int_handle 0 6 1235 38 WindowHandle::OSHandle::get_int_handle 0 1 97 416
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::get_int_handle
//       Access: Published, Virtual
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
////////////////////////////////////////////////////////////////////
72
virtual unsigned int WindowHandle::OSHandle::get_int_handle(void) const;

725 6 output 0 6 1235 30 WindowHandle::OSHandle::output 0 1 98 239
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
64
virtual void WindowHandle::OSHandle::output(ostream &out) const;

726 14 get_class_type 0 4 1235 38 WindowHandle::OSHandle::get_class_type 0 1 99 0
63
static TypeHandle WindowHandle::OSHandle::get_class_type(void);

727 14 get_class_type 0 4 1234 28 WindowHandle::get_class_type 0 1 96 0
53
static TypeHandle WindowHandle::get_class_type(void);

728 16 WindowProperties 0 4 1236 34 WindowProperties::WindowProperties 0 2 100 101 955
// Filename: windowProperties.I
// Created by:  drose (13Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
114
WindowProperties::WindowProperties(void);
inline WindowProperties::WindowProperties(WindowProperties const &copy);

729 10 operator = 0 4 1236 28 WindowProperties::operator = 0 1 102 241
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
void WindowProperties::operator =(WindowProperties const &copy);

730 17 ~WindowProperties 0 4 1236 35 WindowProperties::~WindowProperties 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline WindowProperties::~WindowProperties(void);

731 21 get_config_properties 0 4 1236 39 WindowProperties::get_config_properties 0 1 103 395
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_config_properties
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with all of the
//               default values filled in according to the user's
//               config file.
////////////////////////////////////////////////////////////////////
70
static WindowProperties WindowProperties::get_config_properties(void);

732 11 get_default 0 4 1236 29 WindowProperties::get_default 0 1 104 457
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties.  If
//               set_default() has been called, this returns that
//               WindowProperties structure; otherwise, this returns
//               get_config_properties().
////////////////////////////////////////////////////////////////////
60
static WindowProperties WindowProperties::get_default(void);

733 11 set_default 0 4 1236 29 WindowProperties::set_default 0 1 105 589
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_default
//       Access: Published, Static
//  Description: Replaces the "default" WindowProperties with the
//               specified structure.  The specified WindowProperties
//               will be returned by future calls to get_default(),
//               until clear_default() is called.
//
//               Note that this completely replaces the default
//               properties; it is not additive.
////////////////////////////////////////////////////////////////////
86
static void WindowProperties::set_default(WindowProperties const &default_properties);

734 13 clear_default 0 4 1236 31 WindowProperties::clear_default 0 1 106 346
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties to whatever
//               is specified in the user's config file.
////////////////////////////////////////////////////////////////////
50
static void WindowProperties::clear_default(void);

735 4 size 0 4 1236 22 WindowProperties::size 0 1 107 386
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::size
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with only the
//               size specified.  The size is the only property that
//               matters to buffers.
////////////////////////////////////////////////////////////////////
71
static WindowProperties WindowProperties::size(int x_size, int y_size);

736 11 operator == 0 4 1236 29 WindowProperties::operator == 0 1 108 229
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::operator == 
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
bool WindowProperties::operator ==(WindowProperties const &other) const;

737 11 operator != 0 4 1236 29 WindowProperties::operator != 0 1 109 228
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline bool WindowProperties::operator !=(WindowProperties const &other) const;

738 5 clear 0 4 1236 23 WindowProperties::clear 0 1 110 381
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the WindowProperties structure to its
//               initial empty state.
////////////////////////////////////////////////////////////////////
35
void WindowProperties::clear(void);

739 16 is_any_specified 0 4 1236 34 WindowProperties::is_any_specified 0 1 111 319
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool WindowProperties::is_any_specified(void) const;

740 10 set_origin 0 4 1236 28 WindowProperties::set_origin 0 1 112 514
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_origin
//       Access: Published
//  Description: Specifies the origin on the screen (in pixels,
//               relative to the top-left corner) at which the window
//               should appear.  This is the origin of the top-left
//               corner of the useful part of the window, not
//               including decorations.
////////////////////////////////////////////////////////////////////
69
inline void WindowProperties::set_origin(int x_origin, int y_origin);

741 12 get_x_origin 0 4 1236 30 WindowProperties::get_x_origin 0 1 113 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_origin
//       Access: Published
//  Description: Returns the x coordinate of the window's top-left
//               corner, not including decorations.
////////////////////////////////////////////////////////////////////
54
inline int WindowProperties::get_x_origin(void) const;

742 12 get_y_origin 0 4 1236 30 WindowProperties::get_y_origin 0 1 114 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_origin
//       Access: Published
//  Description: Returns the y coordinate of the window's top-left
//               corner, not including decorations.
////////////////////////////////////////////////////////////////////
54
inline int WindowProperties::get_y_origin(void) const;

743 10 has_origin 0 4 1236 28 WindowProperties::has_origin 0 1 115 315
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_origin
//       Access: Published
//  Description: Returns true if the window origin has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
53
inline bool WindowProperties::has_origin(void) const;

744 12 clear_origin 0 4 1236 30 WindowProperties::clear_origin 0 1 116 283
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_origin
//       Access: Published
//  Description: Removes the origin specification from the properties.
////////////////////////////////////////////////////////////////////
49
inline void WindowProperties::clear_origin(void);

745 8 set_size 0 4 1236 26 WindowProperties::set_size 0 1 117 393
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_size
//       Access: Published
//  Description: Specifies the requested size of the window, in
//               pixels.  This is the size of the useful part of the
//               window, not including decorations.
////////////////////////////////////////////////////////////////////
63
inline void WindowProperties::set_size(int x_size, int y_size);

746 10 get_x_size 0 4 1236 28 WindowProperties::get_x_size 0 1 118 401
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_size
//       Access: Published
//  Description: Returns size in pixels in the x dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's width.
////////////////////////////////////////////////////////////////////
52
inline int WindowProperties::get_x_size(void) const;

747 10 get_y_size 0 4 1236 28 WindowProperties::get_y_size 0 1 119 402
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_size
//       Access: Published
//  Description: Returns size in pixels in the y dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's height.
////////////////////////////////////////////////////////////////////
52
inline int WindowProperties::get_y_size(void) const;

748 8 has_size 0 4 1236 26 WindowProperties::has_size 0 1 120 311
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_size
//       Access: Published
//  Description: Returns true if the window size has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::has_size(void) const;

749 10 clear_size 0 4 1236 28 WindowProperties::clear_size 0 1 121 279
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_size
//       Access: Published
//  Description: Removes the size specification from the properties.
////////////////////////////////////////////////////////////////////
47
inline void WindowProperties::clear_size(void);

750 14 has_mouse_mode 0 4 1236 32 WindowProperties::has_mouse_mode 0 1 122 232
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_mouse_mode
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_mouse_mode(void) const;

751 14 set_mouse_mode 0 4 1236 32 WindowProperties::set_mouse_mode 0 1 123 1074
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_mouse_mode
//       Access: Published
//  Description: Specifies the mode in which the window is to operate
//               its mouse pointer.  The default is M_absolute, which
//               is the normal mode in which a mouse pointer operates;
//               but you can also set M_relative, which is
//               particularly useful for FPS-style mouse movements
//               where you have hidden the mouse pointer and are are
//               more interested in how fast the mouse is moving,
//               rather than precisely where the pointer is hovering.
//
//               This has no effect on Windows, which does not
//               have this concept; but is important to do on OSX
//               and Unix/X11 to properly enable a smooth FPS-style
//               mouselook mode.  On Unix/X11, this requires the
//               Xxf86dga extension to be available.
////////////////////////////////////////////////////////////////////
79
inline void WindowProperties::set_mouse_mode(WindowProperties::MouseMode mode);

752 14 get_mouse_mode 0 4 1236 32 WindowProperties::get_mouse_mode 0 1 124 253
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_mouse_mode
//       Access: Published
//  Description: See set_mouse_mode().
////////////////////////////////////////////////////////////////////
80
inline WindowProperties::MouseMode WindowProperties::get_mouse_mode(void) const;

753 16 clear_mouse_mode 0 4 1236 34 WindowProperties::clear_mouse_mode 0 1 125 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_mouse_mode
//       Access: Published
//  Description: Removes the mouse_mode specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_mouse_mode(void);

754 9 set_title 0 4 1236 27 WindowProperties::set_title 0 1 126 302
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_title
//       Access: Published
//  Description: Specifies the title that should be assigned to the
//               window.
////////////////////////////////////////////////////////////////////
75
inline void WindowProperties::set_title(basic_string< char > const &title);

755 9 get_title 0 4 1236 27 WindowProperties::get_title 0 1 127 254
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_title
//       Access: Published
//  Description: Returns the window's title.
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > const &WindowProperties::get_title(void) const;

756 9 has_title 0 4 1236 27 WindowProperties::has_title 0 1 128 313
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_title
//       Access: Published
//  Description: Returns true if the window title has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool WindowProperties::has_title(void) const;

757 11 clear_title 0 4 1236 29 WindowProperties::clear_title 0 1 129 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_title
//       Access: Published
//  Description: Removes the title specification from the properties.
////////////////////////////////////////////////////////////////////
48
inline void WindowProperties::clear_title(void);

758 15 set_undecorated 0 4 1236 33 WindowProperties::set_undecorated 0 1 130 381
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_undecorated
//       Access: Published
//  Description: Specifies whether the window should be created with a
//               visible title and border (false, the default) or not
//               (true).
////////////////////////////////////////////////////////////////////
64
inline void WindowProperties::set_undecorated(bool undecorated);

759 15 get_undecorated 0 4 1236 33 WindowProperties::get_undecorated 0 1 131 274
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_undecorated
//       Access: Published
//  Description: Returns true if the window has no border.
////////////////////////////////////////////////////////////////////
58
inline bool WindowProperties::get_undecorated(void) const;

760 15 has_undecorated 0 4 1236 33 WindowProperties::has_undecorated 0 1 132 286
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_undecorated
//       Access: Published
//  Description: Returns true if set_undecorated() has been specified.
////////////////////////////////////////////////////////////////////
58
inline bool WindowProperties::has_undecorated(void) const;

761 17 clear_undecorated 0 4 1236 35 WindowProperties::clear_undecorated 0 1 133 293
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_undecorated
//       Access: Published
//  Description: Removes the undecorated specification from the properties.
////////////////////////////////////////////////////////////////////
54
inline void WindowProperties::clear_undecorated(void);

762 14 set_fixed_size 0 4 1236 32 WindowProperties::set_fixed_size 0 1 134 310
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fixed_size
//       Access: Published
//  Description: Specifies whether the window should be resizable by
//               the user.
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_fixed_size(bool fixed_size);

763 14 get_fixed_size 0 4 1236 32 WindowProperties::get_fixed_size 0 1 135 323
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fixed_size
//       Access: Published
//  Description: Returns true if the window cannot be resized by the
//               user, false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_fixed_size(void) const;

764 14 has_fixed_size 0 4 1236 32 WindowProperties::has_fixed_size 0 1 136 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fixed_size
//       Access: Published
//  Description: Returns true if set_fixed_size() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_fixed_size(void) const;

765 16 clear_fixed_size 0 4 1236 34 WindowProperties::clear_fixed_size 0 1 137 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fixed_size
//       Access: Published
//  Description: Removes the fixed_size specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_fixed_size(void);

766 14 set_fullscreen 0 4 1236 32 WindowProperties::set_fullscreen 0 1 138 383
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fullscreen
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               fullscreen mode (true) or normal windowed mode
//               (false, the default).
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_fullscreen(bool fullscreen);

767 14 get_fullscreen 0 4 1236 32 WindowProperties::get_fullscreen 0 1 139 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fullscreen
//       Access: Published
//  Description: Returns true if the window is in fullscreen mode.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_fullscreen(void) const;

768 14 has_fullscreen 0 4 1236 32 WindowProperties::has_fullscreen 0 1 140 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fullscreen
//       Access: Published
//  Description: Returns true if set_fullscreen() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_fullscreen(void) const;

769 16 clear_fullscreen 0 4 1236 34 WindowProperties::clear_fullscreen 0 1 141 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fullscreen
//       Access: Published
//  Description: Removes the fullscreen specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_fullscreen(void);

770 14 set_foreground 0 4 1236 32 WindowProperties::set_foreground 0 1 142 372
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_foreground
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               the foreground (true), or left in the background
//               (false).
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_foreground(bool foreground);

771 14 get_foreground 0 4 1236 32 WindowProperties::get_foreground 0 1 143 280
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_foreground
//       Access: Published
//  Description: Returns true if the window is in the foreground.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_foreground(void) const;

772 14 has_foreground 0 4 1236 32 WindowProperties::has_foreground 0 1 144 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_foreground
//       Access: Published
//  Description: Returns true if set_foreground() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_foreground(void) const;

773 16 clear_foreground 0 4 1236 34 WindowProperties::clear_foreground 0 1 145 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_foreground
//       Access: Published
//  Description: Removes the foreground specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_foreground(void);

774 13 set_minimized 0 4 1236 31 WindowProperties::set_minimized 0 1 146 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_minimized
//       Access: Published
//  Description: Specifies whether the window should be created
//               minimized (true), or normal (false).
////////////////////////////////////////////////////////////////////
60
inline void WindowProperties::set_minimized(bool minimized);

775 13 get_minimized 0 4 1236 31 WindowProperties::get_minimized 0 1 147 271
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_minimized
//       Access: Published
//  Description: Returns true if the window is minimized.
////////////////////////////////////////////////////////////////////
56
inline bool WindowProperties::get_minimized(void) const;

776 13 has_minimized 0 4 1236 31 WindowProperties::has_minimized 0 1 148 282
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_minimized
//       Access: Published
//  Description: Returns true if set_minimized() has been specified.
////////////////////////////////////////////////////////////////////
56
inline bool WindowProperties::has_minimized(void) const;

777 15 clear_minimized 0 4 1236 33 WindowProperties::clear_minimized 0 1 149 289
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_minimized
//       Access: Published
//  Description: Removes the minimized specification from the properties.
////////////////////////////////////////////////////////////////////
52
inline void WindowProperties::clear_minimized(void);

778 12 set_raw_mice 0 4 1236 30 WindowProperties::set_raw_mice 0 1 150 310
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_raw_mice
//       Access: Published
//  Description: Specifies whether the window should read the raw
//               mouse devices.
////////////////////////////////////////////////////////////////////
58
inline void WindowProperties::set_raw_mice(bool raw_mice);

779 12 get_raw_mice 0 4 1236 30 WindowProperties::get_raw_mice 0 1 151 276
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_raw_mice
//       Access: Published
//  Description: Returns true if the window reads the raw mice.
////////////////////////////////////////////////////////////////////
55
inline bool WindowProperties::get_raw_mice(void) const;

780 12 has_raw_mice 0 4 1236 30 WindowProperties::has_raw_mice 0 1 152 280
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_raw_mice
//       Access: Published
//  Description: Returns true if set_raw_mice() has been specified.
////////////////////////////////////////////////////////////////////
55
inline bool WindowProperties::has_raw_mice(void) const;

781 14 clear_raw_mice 0 4 1236 32 WindowProperties::clear_raw_mice 0 1 153 287
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_raw_mice
//       Access: Published
//  Description: Removes the raw_mice specification from the properties.
////////////////////////////////////////////////////////////////////
51
inline void WindowProperties::clear_raw_mice(void);

782 8 set_open 0 4 1236 26 WindowProperties::set_open 0 1 154 417
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_open
//       Access: Published
//  Description: Specifies whether the window should be open.  It is
//               legal to create a GraphicsWindow in the closed state,
//               and later request it to open by changing this flag.
////////////////////////////////////////////////////////////////////
50
inline void WindowProperties::set_open(bool open);

783 8 get_open 0 4 1236 26 WindowProperties::get_open 0 1 155 261
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_open
//       Access: Published
//  Description: Returns true if the window is open.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::get_open(void) const;

784 8 has_open 0 4 1236 26 WindowProperties::has_open 0 1 156 272
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_open
//       Access: Published
//  Description: Returns true if set_open() has been specified.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::has_open(void) const;

785 10 clear_open 0 4 1236 28 WindowProperties::clear_open 0 1 157 279
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_open
//       Access: Published
//  Description: Removes the open specification from the properties.
////////////////////////////////////////////////////////////////////
47
inline void WindowProperties::clear_open(void);

786 17 set_cursor_hidden 0 4 1236 35 WindowProperties::set_cursor_hidden 0 1 158 288
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_hidden
//       Access: Published
//  Description: Specifies whether the mouse cursor should be visible.
////////////////////////////////////////////////////////////////////
68
inline void WindowProperties::set_cursor_hidden(bool cursor_hidden);

787 17 get_cursor_hidden 0 4 1236 35 WindowProperties::get_cursor_hidden 0 1 159 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_hidden
//       Access: Published
//  Description: Returns true if the mouse cursor is invisible.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::get_cursor_hidden(void) const;

788 17 has_cursor_hidden 0 4 1236 35 WindowProperties::has_cursor_hidden 0 1 160 290
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_hidden
//       Access: Published
//  Description: Returns true if set_cursor_hidden() has been specified.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_cursor_hidden(void) const;

789 19 clear_cursor_hidden 0 4 1236 37 WindowProperties::clear_cursor_hidden 0 1 161 297
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_hidden
//       Access: Published
//  Description: Removes the cursor_hidden specification from the properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_cursor_hidden(void);

790 17 set_icon_filename 0 4 1236 35 WindowProperties::set_icon_filename 0 1 162 344
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_icon_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the window when it is minimized.
////////////////////////////////////////////////////////////////////
79
inline void WindowProperties::set_icon_filename(Filename const &icon_filename);

791 17 get_icon_filename 0 4 1236 35 WindowProperties::get_icon_filename 0 1 163 288
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_icon_filename
//       Access: Published
//  Description: Returns the icon filename associated with the window.
////////////////////////////////////////////////////////////////////
71
inline Filename const &WindowProperties::get_icon_filename(void) const;

792 17 has_icon_filename 0 4 1236 35 WindowProperties::has_icon_filename 0 1 164 307
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_icon_filename
//       Access: Published
//  Description: Returns true if set_icon_filename() has been
//               specified.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_icon_filename(void) const;

793 19 clear_icon_filename 0 4 1236 37 WindowProperties::clear_icon_filename 0 1 165 314
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_icon_filename
//       Access: Published
//  Description: Removes the icon_filename specification from the
//               properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_icon_filename(void);

794 19 set_cursor_filename 0 4 1236 37 WindowProperties::set_cursor_filename 0 1 166 391
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the mouse cursor when it is within the
//               window (and visible).
////////////////////////////////////////////////////////////////////
83
inline void WindowProperties::set_cursor_filename(Filename const &cursor_filename);

795 19 get_cursor_filename 0 4 1236 37 WindowProperties::get_cursor_filename 0 1 167 313
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_filename
//       Access: Published
//  Description: Returns the icon filename associated with the mouse
//               cursor.
////////////////////////////////////////////////////////////////////
73
inline Filename const &WindowProperties::get_cursor_filename(void) const;

796 19 has_cursor_filename 0 4 1236 37 WindowProperties::has_cursor_filename 0 1 168 311
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_filename
//       Access: Published
//  Description: Returns true if set_cursor_filename() has been
//               specified.
////////////////////////////////////////////////////////////////////
62
inline bool WindowProperties::has_cursor_filename(void) const;

797 21 clear_cursor_filename 0 4 1236 39 WindowProperties::clear_cursor_filename 0 1 169 318
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_filename
//       Access: Published
//  Description: Removes the cursor_filename specification from the
//               properties.
////////////////////////////////////////////////////////////////////
58
inline void WindowProperties::clear_cursor_filename(void);

798 11 set_z_order 0 4 1236 29 WindowProperties::set_z_order 0 1 170 609
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_z_order
//       Access: Published
//  Description: Specifies the relative ordering of the window with
//               respect to other windows.  If the z_order is Z_top,
//               the window will always be on top of other windows; if
//               it is Z_bottom, it will always be below other
//               windows.  Most windows will want to be Z_normal,
//               which allows the user to control the order.
////////////////////////////////////////////////////////////////////
76
inline void WindowProperties::set_z_order(WindowProperties::ZOrder z_order);

799 11 get_z_order 0 4 1236 29 WindowProperties::get_z_order 0 1 171 258
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_z_order
//       Access: Published
//  Description: Returns the window's z_order.
////////////////////////////////////////////////////////////////////
74
inline WindowProperties::ZOrder WindowProperties::get_z_order(void) const;

800 11 has_z_order 0 4 1236 29 WindowProperties::has_z_order 0 1 172 317
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_z_order
//       Access: Published
//  Description: Returns true if the window z_order has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
inline bool WindowProperties::has_z_order(void) const;

801 13 clear_z_order 0 4 1236 31 WindowProperties::clear_z_order 0 1 173 285
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_z_order
//       Access: Published
//  Description: Removes the z_order specification from the properties.
////////////////////////////////////////////////////////////////////
50
inline void WindowProperties::clear_z_order(void);

802 17 set_parent_window 0 4 1236 35 WindowProperties::set_parent_window 0 3 174 175 176 2086
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.  If this is NULL or unspecified, the
//               window will be created as a toplevel window on the
//               desktop; if this is non-NULL, the window will be
//               bound as a child window to the indicated parent
//               window.
//
//               You should use GraphicsPipe::make_window_handle() to
//               create an instance of a WindowHandle object given an
//               appropriate OS-specific window handle representation.
//               Each OS-specific GraphicsPipe class defines a
//               make_window_handle() method that returns an
//               appropriate WindowHandle object to wrap the
//               particular OS-specific representation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.
//
//               This is a deprecated variant on this method, and
//               exists only for backward compatibility.  Future code
//               should use the version of set_parent_window() below
//               that receives a WindowHandle object; that interface
//               is much more robust.
//
//               In this deprecated variant, the actual value for
//               "parent" is platform-specific.  On Windows, it is the
//               HWND of the parent window, cast to an unsigned
//               integer.  On X11, it is the Window pointer of the
//               parent window, similarly cast.  On OSX, this is the
//               NSWindow pointer, which doesn't appear to work at
//               all.
////////////////////////////////////////////////////////////////////
156
void WindowProperties::set_parent_window(unsigned int parent);
inline void WindowProperties::set_parent_window(WindowHandle *parent_window = ((void *)(0)));

803 17 get_parent_window 0 4 1236 35 WindowProperties::get_parent_window 0 1 177 340
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_parent_window
//       Access: Published
//  Description: Returns the parent window specification, or NULL if
//               there is no parent window specified.
////////////////////////////////////////////////////////////////////
69
inline WindowHandle *WindowProperties::get_parent_window(void) const;

804 17 has_parent_window 0 4 1236 35 WindowProperties::has_parent_window 0 1 178 296
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_parent_window
//       Access: Published
//  Description: Checks the S_parent_window specification from the properties.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_parent_window(void) const;

805 19 clear_parent_window 0 4 1236 37 WindowProperties::clear_parent_window 0 1 179 299
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_parent_window
//       Access: Published
//  Description: Removes the S_parent_window specification from the properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_parent_window(void);

806 14 add_properties 0 4 1236 32 WindowProperties::add_properties 0 1 180 376
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
69
void WindowProperties::add_properties(WindowProperties const &other);

807 6 output 0 4 1236 24 WindowProperties::output 0 1 181 368
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
50
void WindowProperties::output(ostream &out) const;

808 27 upcast_to_DisplayRegionBase 0 12 1239 42 DisplayRegion::upcast_to_DisplayRegionBase 0 1 233 46
upcast from DisplayRegion to DisplayRegionBase
68
DisplayRegionBase *DisplayRegion::upcast_to_DisplayRegionBase(void);

809 25 downcast_to_DisplayRegion 0 12 1240 44 DisplayRegionBase::downcast_to_DisplayRegion 0 1 234 48
downcast from DisplayRegionBase to DisplayRegion
66
DisplayRegion *DisplayRegionBase::downcast_to_DisplayRegion(void);

810 24 upcast_to_DrawableRegion 0 12 1239 39 DisplayRegion::upcast_to_DrawableRegion 0 1 235 43
upcast from DisplayRegion to DrawableRegion
62
DrawableRegion *DisplayRegion::upcast_to_DrawableRegion(void);

811 25 downcast_to_DisplayRegion 0 12 1232 41 DrawableRegion::downcast_to_DisplayRegion 0 1 236 45
downcast from DrawableRegion to DisplayRegion
63
DisplayRegion *DrawableRegion::downcast_to_DisplayRegion(void);

812 14 ~DisplayRegion 0 6 1239 29 DisplayRegion::~DisplayRegion 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual DisplayRegion::~DisplayRegion(void);

813 14 get_dimensions 0 4 1239 29 DisplayRegion::get_dimensions 0 1 182 784
///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
149
inline void DisplayRegion::get_dimensions(float &l, float &r, float &b, float &t) const;
inline LVecBase4f DisplayRegion::get_dimensions(void) const;

814 8 get_left 0 4 1239 23 DisplayRegion::get_left 0 1 183 386
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
49
inline float DisplayRegion::get_left(void) const;

815 9 get_right 0 4 1239 24 DisplayRegion::get_right 0 1 184 388
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
50
inline float DisplayRegion::get_right(void) const;

816 10 get_bottom 0 4 1239 25 DisplayRegion::get_bottom 0 1 185 392
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within its GraphicsOutput.  This 
//               number will be in the range [0..1].
////////////////////////////////////////////////////////////////////
51
inline float DisplayRegion::get_bottom(void) const;

817 7 get_top 0 4 1239 22 DisplayRegion::get_top 0 1 186 384
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
48
inline float DisplayRegion::get_top(void) const;

818 14 set_dimensions 0 4 1239 29 DisplayRegion::set_dimensions 0 2 187 188 1040
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
////////////////////////////////////////////////////////////////////
152
inline void DisplayRegion::set_dimensions(float l, float r, float b, float t);
virtual void DisplayRegion::set_dimensions(LVecBase4f const &dimensions);

819 10 get_window 0 4 1239 25 DisplayRegion::get_window 0 1 189 376
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_window
//       Access: Published
//  Description: Returns the GraphicsOutput that this DisplayRegion is
//               ultimately associated with, or NULL if no window is
//               associated.
////////////////////////////////////////////////////////////////////
61
inline GraphicsOutput *DisplayRegion::get_window(void) const;

820 8 get_pipe 0 4 1239 23 DisplayRegion::get_pipe 0 1 190 370
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this DisplayRegion is
//               ultimately associated with, or NULL if no pipe is
//               associated.
////////////////////////////////////////////////////////////////////
50
GraphicsPipe *DisplayRegion::get_pipe(void) const;

821 9 is_stereo 0 6 1239 24 DisplayRegion::is_stereo 0 1 191 313
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_stereo
//       Access: Published, Virtual
//  Description: Returns true if this is a StereoDisplayRegion, false
//               otherwise.
////////////////////////////////////////////////////////////////////
50
virtual bool DisplayRegion::is_stereo(void) const;

822 10 set_camera 0 6 1239 25 DisplayRegion::set_camera 0 1 192 669
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_camera
//       Access: Published, Virtual
//  Description: Sets the camera that is associated with this
//               DisplayRegion.  There is a one-to-many association
//               between cameras and DisplayRegions; one camera may be
//               shared by multiple DisplayRegions.
//
//               The camera is actually set via a NodePath, which
//               clarifies which instance of the camera (if there
//               happen to be multiple instances) we should use.
////////////////////////////////////////////////////////////////////
63
virtual void DisplayRegion::set_camera(NodePath const &camera);

823 10 get_camera 0 4 1239 25 DisplayRegion::get_camera 0 2 193 194 362
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_camera
//       Access: Published
//  Description: Returns the camera associated with this
//               DisplayRegion, or an empty NodePath if no camera is
//               associated.
////////////////////////////////////////////////////////////////////
99
inline NodePath DisplayRegion::get_camera(Thread *current_thread = ((get_current_thread()))) const;

824 10 set_active 0 6 1239 25 DisplayRegion::set_active 0 1 195 386
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_active
//       Access: Published, Virtual
//  Description: Sets the active flag associated with the
//               DisplayRegion.  If the DisplayRegion is marked
//               inactive, nothing is rendered.
////////////////////////////////////////////////////////////////////
52
virtual void DisplayRegion::set_active(bool active);

825 9 is_active 0 4 1239 24 DisplayRegion::is_active 0 1 196 299
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
49
inline bool DisplayRegion::is_active(void) const;

826 8 set_sort 0 6 1239 23 DisplayRegion::set_sort 0 1 197 439
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_sort
//       Access: Published, Virtual
//  Description: Sets the sort value associated with the
//               DisplayRegion.  Within a window, DisplayRegions will
//               be rendered in order from the lowest sort value to
//               the highest.
////////////////////////////////////////////////////////////////////
47
virtual void DisplayRegion::set_sort(int sort);

827 8 get_sort 0 4 1239 23 DisplayRegion::get_sort 0 1 198 297
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_sort
//       Access: Published
//  Description: Returns the sort value associated with the
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
47
inline int DisplayRegion::get_sort(void) const;

828 18 set_stereo_channel 0 6 1239 33 DisplayRegion::set_stereo_channel 0 1 199 1825
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_stereo_channel
//       Access: Published, Virtual
//  Description: Specifies whether the DisplayRegion represents the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  This automatically
//               adjusts the lens that is used to render to this
//               DisplayRegion to its left or right eye, according to
//               the lens's stereo properties.
//
//               When the DisplayRegion is attached to a stereo window
//               (one for which is_stereo() returns true), this also
//               specifies which physical channel the DisplayRegion
//               renders to.
//
//               Normally you would create at least two DisplayRegions
//               for a stereo window, one for each of the left and
//               right channels.  The two DisplayRegions may share the
//               same camera (and thus the same lens); this parameter
//               is used to control the exact properties of the lens
//               when it is used to render into this DisplayRegion.
//
//               Also see the StereoDisplayRegion, which automates
//               managing a pair of left/right DisplayRegions.
//
//               An ordinary DisplayRegion may be set to SC_mono,
//               SC_left, or SC_right.  You may set SC_stereo only on
//               a StereoDisplayRegion.
//
//               This call also resets tex_view_offset to its default
//               value, which is 0 for the left eye or 1 for the right
//               eye of a stereo display region, or 0 for a mono
//               display region.
////////////////////////////////////////////////////////////////////
83
virtual void DisplayRegion::set_stereo_channel(Lens::StereoChannel stereo_channel);

829 18 get_stereo_channel 0 4 1239 33 DisplayRegion::get_stereo_channel 0 1 200 448
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_stereo_channel
//       Access: Published
//  Description: Returns whether the DisplayRegion is specified as the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  See
//               set_stereo_channel().
////////////////////////////////////////////////////////////////////
73
inline Lens::StereoChannel DisplayRegion::get_stereo_channel(void) const;

830 19 set_tex_view_offset 0 6 1239 34 DisplayRegion::set_tex_view_offset 0 1 201 776
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_tex_view_offset
//       Access: Published, Virtual
//  Description: Sets the current texture view offset for this
//               DisplayRegion.  This is normally set to zero.  If
//               nonzero, it is used to select a particular view of
//               any multiview textures that are rendered within this
//               DisplayRegion.
//
//               For a StereoDisplayRegion, this is normally 0 for the
//               left eye, and 1 for the right eye, to support stereo
//               textures.  This is set automatically when you call
//               set_stereo_channel().
////////////////////////////////////////////////////////////////////
69
virtual void DisplayRegion::set_tex_view_offset(int tex_view_offset);

831 19 get_tex_view_offset 0 4 1239 34 DisplayRegion::get_tex_view_offset 0 1 202 687
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_tex_view_offset
//       Access: Public
//  Description: Returns the current texture view offset for this
//               DisplayRegion.  This is normally set to zero.  If
//               nonzero, it is used to select a particular view of
//               any multiview textures that are rendered within this
//               DisplayRegion.
//
//               For a StereoDisplayRegion, this is normally 0 for the
//               left eye, and 1 for the right eye, to support stereo
//               textures.
////////////////////////////////////////////////////////////////////
58
inline int DisplayRegion::get_tex_view_offset(void) const;

832 21 set_incomplete_render 0 6 1239 36 DisplayRegion::set_incomplete_render 0 1 203 949
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_incomplete_render
//       Access: Published, Virtual
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               This flag may also be set on the
//               GraphicsStateGuardian.  It will be considered true
//               for a given DisplayRegion only if it is true on both
//               the GSG and on the DisplayRegion.
//
//               See GraphicsStateGuardian::set_incomplete_render()
//               for more detail.
////////////////////////////////////////////////////////////////////
74
virtual void DisplayRegion::set_incomplete_render(bool incomplete_render);

833 21 get_incomplete_render 0 4 1239 36 DisplayRegion::get_incomplete_render 0 1 204 318
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_incomplete_render
//       Access: Published
//  Description: Returns the incomplete_render flag.  See
//               set_incomplete_render().
////////////////////////////////////////////////////////////////////
61
inline bool DisplayRegion::get_incomplete_render(void) const;

834 27 set_texture_reload_priority 0 6 1239 42 DisplayRegion::set_texture_reload_priority 0 1 205 988
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_texture_reload_priority
//       Access: Published, Virtual
//  Description: Specifies an integer priority which is assigned to
//               any asynchronous texture reload requests spawned
//               while processing this DisplayRegion.  This controls
//               which textures are loaded first when multiple
//               textures need to be reloaded at once; it also
//               controls the relative priority between asynchronous
//               texture loads and asynchronous model or animation
//               loads.
//
//               Specifying a larger number here makes the textures
//               rendered by this DisplayRegion load up first.  This
//               may be particularly useful to do, for instance, for
//               the DisplayRegion that renders the gui.
////////////////////////////////////////////////////////////////////
85
virtual void DisplayRegion::set_texture_reload_priority(int texture_reload_priority);

835 27 get_texture_reload_priority 0 4 1239 42 DisplayRegion::get_texture_reload_priority 0 1 206 391
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_texture_reload_priority
//       Access: Published
//  Description: Returns the priority which is assigned to
//               asynchronous texture reload requests.  See
//               set_texture_reload_priority().
////////////////////////////////////////////////////////////////////
66
inline int DisplayRegion::get_texture_reload_priority(void) const;

836 14 set_lens_index 0 4 1239 29 DisplayRegion::set_lens_index 0 1 207 443
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_lens_index
//       Access: Published
//  Description: Sets the lens index, allows for multiple lenses to
//               be attached to a camera.  This is useful for a 
//               variety of setups, such as fish eye rendering.
//               The default is 0.
////////////////////////////////////////////////////////////////////
46
void DisplayRegion::set_lens_index(int index);

837 14 get_lens_index 0 4 1239 29 DisplayRegion::get_lens_index 0 1 208 479
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_lens_index
//       Access: Public
//  Description: Returns the specific lens of the associated Camera
//               that will be used for rendering this scene.  Most
//               Cameras hold only one lens, but for multiple lenses
//               this method may be used to selected between them.
////////////////////////////////////////////////////////////////////
53
inline int DisplayRegion::get_lens_index(void) const;

838 18 set_cull_traverser 0 6 1239 33 DisplayRegion::set_cull_traverser 0 1 209 494
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_traverser
//       Access: Published, Virtual
//  Description: Specifies the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.  Normally the
//               default CullTraverser is sufficient, but this may be
//               changed to change the default cull behavior.
////////////////////////////////////////////////////////////////////
68
virtual void DisplayRegion::set_cull_traverser(CullTraverser *trav);

839 18 get_cull_traverser 0 4 1239 33 DisplayRegion::get_cull_traverser 0 1 210 337
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_traverser
//       Access: Published
//  Description: Returns the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.
////////////////////////////////////////////////////////////////////
55
CullTraverser *DisplayRegion::get_cull_traverser(void);

840 18 set_cube_map_index 0 4 1239 33 DisplayRegion::set_cube_map_index 0 1 211 279
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cube_map_index
//       Access: Published
//  Description: Deprecated; replaced by set_target_tex_page().
////////////////////////////////////////////////////////////////////
66
inline void DisplayRegion::set_cube_map_index(int cube_map_index);

841 19 set_target_tex_page 0 6 1239 34 DisplayRegion::set_target_tex_page 0 1 212 909
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_target_tex_page
//       Access: Published, Virtual
//  Description: This is a special parameter that is only used when
//               rendering the faces of a cube map or multipage and/or
//               multiview texture.  
//
//               This sets up the DisplayRegion to render to the ith
//               page and jth view of its associated texture(s); the
//               value must be consistent with the range of values
//               availble to the texture.  A normal DisplayRegion that
//               is not associated with any particular page should be
//               set to page -1 and view 0.
//
//               This is particularly useful when rendering cube maps
//               and/or stereo textures.
////////////////////////////////////////////////////////////////////
58
virtual void DisplayRegion::set_target_tex_page(int page);

842 19 get_target_tex_page 0 4 1239 34 DisplayRegion::get_target_tex_page 0 1 213 433
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_target_tex_page
//       Access: Published
//  Description: Returns the target page number associated with this
//               particular DisplayRegion, or -1 if it is not
//               associated with a page.  See
//               set_target_tex_page().
////////////////////////////////////////////////////////////////////
58
inline int DisplayRegion::get_target_tex_page(void) const;

843 17 set_cull_callback 0 4 1239 32 DisplayRegion::set_cull_callback 0 1 214 1597
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the DisplayRegion is visited during the cull
//               traversal.  This callback will be made during the
//               cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               traversal for this DisplayRegion has not yet started.
//
//               The callback is passed an instance of a
//               DisplayRegionCullCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal cull behavior, so if your
//               callback does nothing, the scene graph will not be
//               traversed and therefore nothing will be drawn.  If
//               you wish the normal cull traversal to be performed
//               for this DisplayRegion, you must call
//               cbdata->upcall() from your callback.
////////////////////////////////////////////////////////////////////
69
inline void DisplayRegion::set_cull_callback(CallbackObject *object);

844 19 clear_cull_callback 0 4 1239 34 DisplayRegion::clear_cull_callback 0 1 215 318
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
////////////////////////////////////////////////////////////////////
53
inline void DisplayRegion::clear_cull_callback(void);

845 17 get_cull_callback 0 4 1239 32 DisplayRegion::get_cull_callback 0 1 216 286
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
////////////////////////////////////////////////////////////////////
68
inline CallbackObject *DisplayRegion::get_cull_callback(void) const;

846 17 set_draw_callback 0 4 1239 32 DisplayRegion::set_draw_callback 0 1 217 1951
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the contents of DisplayRegion is drawn during the
//               draw traversal.  This callback will be made during
//               the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state is in the initial state, and no
//               projection matrix or modelview matrix is in effect.
//               begin_scene() has not yet been called, and no objects
//               have yet been drawn.  However, the viewport has
//               already been set to the appropriate part of the
//               window, and the clear commands for this DisplayRegion
//               (if any) have been issued.
//
//               The callback is passed an instance of a
//               DisplayRegionDrawCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal draw behavior, so if your
//               callback does nothing, nothing in the DisplayRegion
//               will be drawn.  If you wish the draw traversal to
//               continue to draw the contents of this DisplayRegion,
//               you must call cbdata->upcall() from your callback.
////////////////////////////////////////////////////////////////////
69
inline void DisplayRegion::set_draw_callback(CallbackObject *object);

847 19 clear_draw_callback 0 4 1239 34 DisplayRegion::clear_draw_callback 0 1 218 318
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
////////////////////////////////////////////////////////////////////
53
inline void DisplayRegion::clear_draw_callback(void);

848 17 get_draw_callback 0 4 1239 32 DisplayRegion::get_draw_callback 0 1 219 286
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
////////////////////////////////////////////////////////////////////
68
inline CallbackObject *DisplayRegion::get_draw_callback(void) const;

849 15 get_pixel_width 0 4 1239 30 DisplayRegion::get_pixel_width 0 1 220 279
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_width
//       Access: Published
//  Description: Returns the width of the DisplayRegion in pixels.
////////////////////////////////////////////////////////////////////
54
inline int DisplayRegion::get_pixel_width(void) const;

850 16 get_pixel_height 0 4 1239 31 DisplayRegion::get_pixel_height 0 1 221 281
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_height
//       Access: Published
//  Description: Returns the height of the DisplayRegion in pixels.
////////////////////////////////////////////////////////////////////
55
inline int DisplayRegion::get_pixel_height(void) const;

851 6 output 0 6 1239 21 DisplayRegion::output 0 1 222 229
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
55
virtual void DisplayRegion::output(ostream &out) const;

852 24 make_screenshot_filename 0 4 1239 39 DisplayRegion::make_screenshot_filename 0 2 223 224 757
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_screenshot_filename
//       Access: Published, Static
//  Description: Synthesizes a suitable default filename for passing
//               to save_screenshot().
//
//               The default filename is generated from the supplied
//               prefix and from the Config variable
//               screenshot-filename, which contains the following
//               strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
////////////////////////////////////////////////////////////////////
109
static Filename DisplayRegion::make_screenshot_filename(basic_string< char > const &prefix = ("screenshot"));

853 23 save_screenshot_default 0 4 1239 38 DisplayRegion::save_screenshot_default 0 2 225 226 470
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
////////////////////////////////////////////////////////////////////
101
Filename DisplayRegion::save_screenshot_default(basic_string< char > const &prefix = ("screenshot"));

854 15 save_screenshot 0 4 1239 30 DisplayRegion::save_screenshot 0 2 227 228 350
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
112
bool DisplayRegion::save_screenshot(Filename const &filename, basic_string< char > const &image_comment = (""));

855 14 get_screenshot 0 4 1239 29 DisplayRegion::get_screenshot 0 2 229 230 774
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer and returns it as a Texture, or NULL
//               on failure.
////////////////////////////////////////////////////////////////////
110
bool DisplayRegion::get_screenshot(PNMImage &image);
PointerTo< Texture > DisplayRegion::get_screenshot(void);

856 22 make_cull_result_graph 0 6 1239 37 DisplayRegion::make_cull_result_graph 0 1 231 1131
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_cull_result_graph
//       Access: Published
//  Description: Returns a special scene graph constructed to
//               represent the results of the last frame's cull
//               operation.
//
//               This will be a hierarchy of nodes, one node for each
//               bin, each of which will in term be a parent of a
//               number of GeomNodes, representing the geometry drawn
//               in each bin.
//
//               This is useful mainly for high-level debugging and
//               abstraction tools; it should not be mistaken for the
//               low-level cull result itself, which is constructed
//               and maintained internally.  No such scene graph is
//               normally constructed during the rendering of a frame;
//               this is an artificial construct created for the
//               purpose of making it easy to analyze the results of
//               the cull operation.
////////////////////////////////////////////////////////////////////
75
virtual PointerTo< PandaNode > DisplayRegion::make_cull_result_graph(void);

857 14 get_class_type 0 4 1239 29 DisplayRegion::get_class_type 0 1 232 0
54
static TypeHandle DisplayRegion::get_class_type(void);

858 12 get_left_eye 0 4 1241 33 StereoDisplayRegion::get_left_eye 0 1 237 819
// Filename: stereoDisplayRegion.I
// Created by:  drose (19Feb09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_left_eye
//       Access: Published
//  Description: Returns a pointer to the left DisplayRegion managed
//               by this stereo object.
////////////////////////////////////////////////////////////////////
62
inline DisplayRegion *StereoDisplayRegion::get_left_eye(void);

859 13 get_right_eye 0 4 1241 34 StereoDisplayRegion::get_right_eye 0 1 238 326
////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_right_eye
//       Access: Published
//  Description: Returns a pointer to the right DisplayRegion managed
//               by this stereo object.
////////////////////////////////////////////////////////////////////
63
inline DisplayRegion *StereoDisplayRegion::get_right_eye(void);

860 14 get_class_type 0 4 1241 35 StereoDisplayRegion::get_class_type 0 1 239 0
60
static TypeHandle StereoDisplayRegion::get_class_type(void);

861 14 get_depth_bits 0 4 1242 37 FrameBufferProperties::get_depth_bits 0 1 242 261
// Individual queries.

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_depth_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_depth_bits(void) const;

862 14 get_color_bits 0 4 1242 37 FrameBufferProperties::get_color_bits 0 1 243 261
// Individual queries.

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_color_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_color_bits(void) const;

863 14 get_alpha_bits 0 4 1242 37 FrameBufferProperties::get_alpha_bits 0 1 244 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_alpha_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_alpha_bits(void) const;

864 16 get_stencil_bits 0 4 1242 39 FrameBufferProperties::get_stencil_bits 0 1 245 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stencil_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_stencil_bits(void) const;

865 14 get_accum_bits 0 4 1242 37 FrameBufferProperties::get_accum_bits 0 1 246 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_accum_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_accum_bits(void) const;

866 12 get_aux_rgba 0 4 1242 35 FrameBufferProperties::get_aux_rgba 0 1 247 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_rgba
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline int FrameBufferProperties::get_aux_rgba(void) const;

867 13 get_aux_hrgba 0 4 1242 36 FrameBufferProperties::get_aux_hrgba 0 1 248 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_hrgba
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_aux_hrgba(void) const;

868 13 get_aux_float 0 4 1242 36 FrameBufferProperties::get_aux_float 0 1 249 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_float
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_aux_float(void) const;

869 16 get_multisamples 0 4 1242 39 FrameBufferProperties::get_multisamples 0 1 250 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_multisamples
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_multisamples(void) const;

870 20 get_coverage_samples 0 4 1242 43 FrameBufferProperties::get_coverage_samples 0 1 251 356
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling.
////////////////////////////////////////////////////////////////////
67
inline int FrameBufferProperties::get_coverage_samples(void) const;

871 16 get_back_buffers 0 4 1242 39 FrameBufferProperties::get_back_buffers 0 1 252 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_back_buffers
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_back_buffers(void) const;

872 17 get_indexed_color 0 4 1242 40 FrameBufferProperties::get_indexed_color 0 1 253 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_indexed_color
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
inline int FrameBufferProperties::get_indexed_color(void) const;

873 13 get_rgb_color 0 4 1242 36 FrameBufferProperties::get_rgb_color 0 1 254 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_rgb_color
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_rgb_color(void) const;

874 10 get_stereo 0 4 1242 33 FrameBufferProperties::get_stereo 0 1 255 233
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stereo
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline int FrameBufferProperties::get_stereo(void) const;

875 18 get_force_hardware 0 4 1242 41 FrameBufferProperties::get_force_hardware 0 1 256 241
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_hardware
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline int FrameBufferProperties::get_force_hardware(void) const;

876 18 get_force_software 0 4 1242 41 FrameBufferProperties::get_force_software 0 1 257 241
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_software
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline int FrameBufferProperties::get_force_software(void) const;

877 14 set_depth_bits 0 4 1242 37 FrameBufferProperties::set_depth_bits 0 1 258 263
// Individual assigners.

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_depth_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_depth_bits(int n);

878 14 set_color_bits 0 4 1242 37 FrameBufferProperties::set_color_bits 0 1 259 263
// Individual assigners.

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_color_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_color_bits(int n);

879 14 set_alpha_bits 0 4 1242 37 FrameBufferProperties::set_alpha_bits 0 1 260 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_alpha_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_alpha_bits(int n);

880 16 set_stencil_bits 0 4 1242 39 FrameBufferProperties::set_stencil_bits 0 1 261 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stencil_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_stencil_bits(int n);

881 14 set_accum_bits 0 4 1242 37 FrameBufferProperties::set_accum_bits 0 1 262 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_accum_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_accum_bits(int n);

882 12 set_aux_rgba 0 4 1242 35 FrameBufferProperties::set_aux_rgba 0 1 263 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_rgba
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline void FrameBufferProperties::set_aux_rgba(int n);

883 13 set_aux_hrgba 0 4 1242 36 FrameBufferProperties::set_aux_hrgba 0 1 264 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_hrgba
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline void FrameBufferProperties::set_aux_hrgba(int n);

884 13 set_aux_float 0 4 1242 36 FrameBufferProperties::set_aux_float 0 1 265 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_float
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline void FrameBufferProperties::set_aux_float(int n);

885 16 set_multisamples 0 4 1242 39 FrameBufferProperties::set_multisamples 0 1 266 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_multisamples
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_multisamples(int n);

886 20 set_coverage_samples 0 4 1242 43 FrameBufferProperties::set_coverage_samples 0 1 267 355
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling
////////////////////////////////////////////////////////////////////
63
inline void FrameBufferProperties::set_coverage_samples(int n);

887 16 set_back_buffers 0 4 1242 39 FrameBufferProperties::set_back_buffers 0 1 268 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_back_buffers
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_back_buffers(int n);

888 17 set_indexed_color 0 4 1242 40 FrameBufferProperties::set_indexed_color 0 1 269 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_indexed_color
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
inline void FrameBufferProperties::set_indexed_color(int n);

889 13 set_rgb_color 0 4 1242 36 FrameBufferProperties::set_rgb_color 0 1 270 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_rgb_color
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline void FrameBufferProperties::set_rgb_color(int n);

890 10 set_stereo 0 4 1242 33 FrameBufferProperties::set_stereo 0 1 271 233
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stereo
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline void FrameBufferProperties::set_stereo(int n);

891 18 set_force_hardware 0 4 1242 41 FrameBufferProperties::set_force_hardware 0 1 272 241
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_hardware
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline void FrameBufferProperties::set_force_hardware(int n);

892 18 set_force_software 0 4 1242 41 FrameBufferProperties::set_force_software 0 1 273 241
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_software
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline void FrameBufferProperties::set_force_software(int n);

893 21 FrameBufferProperties 0 4 1242 44 FrameBufferProperties::FrameBufferProperties 0 2 240 241 981
// Other.

// Filename: frameBufferProperties.I
// Created by:  drose (27Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
139
FrameBufferProperties::FrameBufferProperties(void);
inline FrameBufferProperties::FrameBufferProperties(FrameBufferProperties const &copy);

894 22 ~FrameBufferProperties 0 4 1242 45 FrameBufferProperties::~FrameBufferProperties 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline FrameBufferProperties::~FrameBufferProperties(void);

895 10 operator = 0 4 1242 33 FrameBufferProperties::operator = 0 1 274 246
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
void FrameBufferProperties::operator =(FrameBufferProperties const &copy);

896 11 get_default 0 4 1242 34 FrameBufferProperties::get_default 0 1 275 395
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_default
//       Access: Published, Static
//  Description: Returns a FrameBufferProperties structure with all of
//               the default values filled in according to the user's
//               config file.
////////////////////////////////////////////////////////////////////
77
static FrameBufferProperties const &FrameBufferProperties::get_default(void);

897 11 operator == 0 4 1242 34 FrameBufferProperties::operator == 0 1 276 234
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::operator == 
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
bool FrameBufferProperties::operator ==(FrameBufferProperties const &other) const;

898 11 operator != 0 4 1242 34 FrameBufferProperties::operator != 0 1 277 233
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
89
inline bool FrameBufferProperties::operator !=(FrameBufferProperties const &other) const;

899 5 clear 0 4 1242 28 FrameBufferProperties::clear 0 1 278 391
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the FrameBufferProperties structure to its
//               initial empty state.
////////////////////////////////////////////////////////////////////
40
void FrameBufferProperties::clear(void);

900 17 set_all_specified 0 4 1242 40 FrameBufferProperties::set_all_specified 0 1 279 268
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_all_specified
//       Access: Published
//  Description: sets all the specified bits.
////////////////////////////////////////////////////////////////////
52
void FrameBufferProperties::set_all_specified(void);

901 8 subsumes 0 4 1242 31 FrameBufferProperties::subsumes 0 1 280 405
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::subsumes
//       Access: Public
//  Description: Returns true if this set of properties makes
//               strictly greater or equal demands of the framebuffer
//               than the other set of framebuffer properties.
////////////////////////////////////////////////////////////////////
79
bool FrameBufferProperties::subsumes(FrameBufferProperties const &other) const;

902 14 add_properties 0 4 1242 37 FrameBufferProperties::add_properties 0 1 281 381
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
79
void FrameBufferProperties::add_properties(FrameBufferProperties const &other);

903 6 output 0 4 1242 29 FrameBufferProperties::output 0 1 282 373
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
55
void FrameBufferProperties::output(ostream &out) const;

904 23 set_one_bit_per_channel 0 4 1242 46 FrameBufferProperties::set_one_bit_per_channel 0 1 283 398
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_one_bit_per_channel
//       Access: Published
//  Description: If any of the depth, color, alpha, accum, or
//               stencil properties is set to more than one,
//               then they are reduced to one.
////////////////////////////////////////////////////////////////////
58
void FrameBufferProperties::set_one_bit_per_channel(void);

905 9 is_stereo 0 4 1242 32 FrameBufferProperties::is_stereo 0 1 284 231
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_stereo
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
bool FrameBufferProperties::is_stereo(void) const;

906 18 is_single_buffered 0 4 1242 41 FrameBufferProperties::is_single_buffered 0 1 285 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_single_buffered
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
bool FrameBufferProperties::is_single_buffered(void) const;

907 11 get_quality 0 4 1242 34 FrameBufferProperties::get_quality 0 1 286 1390
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_quality
//       Access: Published
//  Description: Assumes that these properties are a description of
//               a window.
//
//               Measures how well this window satisfies a specified
//               set of requirements.  A higher quality number means
//               that more requirements were satisfied.  A quality of
//               zero means that the window is unsuitable.
//
//               The routine deducts a lot if the window fails to
//               provide a requested feature.  It deducts less
//               if the window provides a feature, but at a degraded
//               level of functionality (ie, the user asks for rgba8,
//               color, but the window only provides rgba4).  The
//               routine also deducts a small amount for unnecessary
//               features.  For example, if the window has an
//               accumulation buffer when one is not requested will
//               reduce quality slightly.  Maximum quality is obtained
//               when the window exactly matches the request.
//
//               If you want to know whether the window satisfies
//               all of the requirements, use the "subsumes" function.
////////////////////////////////////////////////////////////////////
80
int FrameBufferProperties::get_quality(FrameBufferProperties const &reqs) const;

908 16 is_any_specified 0 4 1242 39 FrameBufferProperties::is_any_specified 0 1 287 324
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
57
bool FrameBufferProperties::is_any_specified(void) const;

909 8 is_basic 0 4 1242 31 FrameBufferProperties::is_basic 0 1 288 444
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_basic
//       Access: Published
//  Description: Returns true if the properties are extremely basic.
//               The following count as basic: rgb or rgba, depth.
//               If anything else is specified, the properties are
//               non-basic.
////////////////////////////////////////////////////////////////////
49
bool FrameBufferProperties::is_basic(void) const;

910 12 get_aux_mask 0 4 1242 35 FrameBufferProperties::get_aux_mask 0 1 289 324
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_mask
//       Access: Published
//  Description: Converts the aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
////////////////////////////////////////////////////////////////////
52
int FrameBufferProperties::get_aux_mask(void) const;

911 15 get_buffer_mask 0 4 1242 38 FrameBufferProperties::get_buffer_mask 0 1 290 329
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_buffer_mask
//       Access: Private
//  Description: Converts the non-aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
////////////////////////////////////////////////////////////////////
55
int FrameBufferProperties::get_buffer_mask(void) const;

912 24 verify_hardware_software 0 4 1242 47 FrameBufferProperties::verify_hardware_software 0 1 291 426
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::verify_hardware_software
//       Access: Public
//  Description: Validates that the properties represent the desired
//               kind of renderer (hardware or software).  If not,
//               prints out an error message and returns false.
////////////////////////////////////////////////////////////////////
133
bool FrameBufferProperties::verify_hardware_software(FrameBufferProperties const &props, basic_string< char > const &renderer) const;

913 22 GraphicsThreadingModel 0 4 1243 46 GraphicsThreadingModel::GraphicsThreadingModel 0 3 292 293 294 2540
// Filename: graphicsThreadingModel.I
// Created by:  drose (27Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Constructor
//       Access: Published
//  Description: The threading model accepts a string representing the
//               names of the two threads that will process cull and
//               draw for the given window, separated by a slash.  The
//               names are completely arbitrary and are used only to
//               differentiate threads.  The two names may be the
//               same, meaning the same thread, or each may be the
//               empty string, which represents the previous thread.
//
//               Thus, for example, "cull/draw" indicates that the
//               window will be culled in a thread called "cull", and
//               drawn in a separate thread called "draw".
//               "draw/draw" or simply "draw" indicates the window
//               will be culled and drawn in the same thread, "draw".
//               On the other hand, "/draw" indicates the thread will
//               be culled in the main, or app thread, and drawn in a
//               separate thread named "draw".  The empty string, ""
//               or "/", indicates the thread will be culled and drawn
//               in the main thread; that is to say, a single-process
//               model.
//
//               Finally, if the threading model begins with a "-"
//               character, then cull and draw are run simultaneously,
//               in the same thread, with no binning or state sorting.
//               It simplifies the cull process but it forces the
//               scene to render in scene graph order; state sorting
//               and alpha sorting is lost.
////////////////////////////////////////////////////////////////////
188
GraphicsThreadingModel::GraphicsThreadingModel(basic_string< char > const &model = ((string())));
inline GraphicsThreadingModel::GraphicsThreadingModel(GraphicsThreadingModel const &copy);

914 10 operator = 0 4 1243 34 GraphicsThreadingModel::operator = 0 1 295 248
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
83
inline void GraphicsThreadingModel::operator =(GraphicsThreadingModel const &copy);

915 9 get_model 0 4 1243 33 GraphicsThreadingModel::get_model 0 1 296 326
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_model
//       Access: Published
//  Description: Returns the string that describes the threading
//               model.  See the constructor.
////////////////////////////////////////////////////////////////////
67
basic_string< char > GraphicsThreadingModel::get_model(void) const;

916 13 get_cull_name 0 4 1243 37 GraphicsThreadingModel::get_cull_name 0 1 297 324
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               culling in this model.
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > const &GraphicsThreadingModel::get_cull_name(void) const;

917 13 set_cull_name 0 4 1243 37 GraphicsThreadingModel::set_cull_name 0 1 298 481
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               culling in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
////////////////////////////////////////////////////////////////////
89
inline void GraphicsThreadingModel::set_cull_name(basic_string< char > const &cull_name);

918 14 get_cull_stage 0 4 1243 38 GraphicsThreadingModel::get_cull_stage 0 1 299 454
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the cull thread
//               should access data.  This will be 0 if the cull is
//               run in the same thread as app, or 1 if it is its own
//               thread.
////////////////////////////////////////////////////////////////////
62
inline int GraphicsThreadingModel::get_cull_stage(void) const;

919 13 get_draw_name 0 4 1243 37 GraphicsThreadingModel::get_draw_name 0 1 300 392
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               sending the actual graphics primitives to the
//               graphics API in this model.
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > const &GraphicsThreadingModel::get_draw_name(void) const;

920 13 set_draw_name 0 4 1243 37 GraphicsThreadingModel::set_draw_name 0 1 301 481
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_draw_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               drawing in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
////////////////////////////////////////////////////////////////////
89
inline void GraphicsThreadingModel::set_draw_name(basic_string< char > const &cull_name);

921 14 get_draw_stage 0 4 1243 38 GraphicsThreadingModel::get_draw_stage 0 1 302 538
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the draw thread
//               should access data.  This will be the same value as
//               get_cull_stage() if cull and draw are run in the same
//               thread, or one more than that value if draw should be
//               in its own thread.
////////////////////////////////////////////////////////////////////
62
inline int GraphicsThreadingModel::get_draw_stage(void) const;

922 16 get_cull_sorting 0 4 1243 40 GraphicsThreadingModel::get_cull_sorting 0 1 303 396
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_sorting
//       Access: Published
//  Description: Returns true if the model involves a separate cull
//               pass, or false if culling happens implicitly, at the
//               same time as draw.
////////////////////////////////////////////////////////////////////
65
inline bool GraphicsThreadingModel::get_cull_sorting(void) const;

923 16 set_cull_sorting 0 4 1243 40 GraphicsThreadingModel::set_cull_sorting 0 1 304 521
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_sorting
//       Access: Published
//  Description: Changes the flag that indicates whether the threading
//               model involves a separate cull pass.  This won't
//               change any windows that were already created with
//               this model; this only has an effect on newly-opened
//               windows.
////////////////////////////////////////////////////////////////////
72
inline void GraphicsThreadingModel::set_cull_sorting(bool cull_sorting);

924 18 is_single_threaded 0 4 1243 42 GraphicsThreadingModel::is_single_threaded 0 1 305 372
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_single_threaded
//       Access: Published
//  Description: Returns true if the threading model is a
//               single-threaded model, or false if it involves
//               threads.
////////////////////////////////////////////////////////////////////
67
inline bool GraphicsThreadingModel::is_single_threaded(void) const;

925 10 is_default 0 4 1243 34 GraphicsThreadingModel::is_default 0 1 306 377
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_default
//       Access: Published
//  Description: Returns true if the threading model is the default,
//               cull-then-draw single-threaded model, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsThreadingModel::is_default(void) const;

926 6 output 0 4 1243 30 GraphicsThreadingModel::output 0 1 307 230
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline void GraphicsThreadingModel::output(ostream &out) const;

927 23 ~GraphicsThreadingModel 0 4 1243 47 GraphicsThreadingModel::~GraphicsThreadingModel 0 0 0
54
GraphicsThreadingModel::~GraphicsThreadingModel(void);

928 20 ~StencilRenderStates 0 4 1244 41 StencilRenderStates::~StencilRenderStates 0 0 203
////////////////////////////////////////////////////////////////////
//     Function: StencilRenderStates::Destructor
//  Description:
////////////////////////////////////////////////////////////////////
48
StencilRenderStates::~StencilRenderStates(void);

929 11 release_all 0 4 1248 34 GraphicsStateGuardian::release_all 0 1 308 857
// Filename: graphicsStateGuardian.I
// Created by:  drose (24Sep99)
// Updated by: fperazzi, PandaSE (29Apr10) (added 
// get_max_2d_texture_array_layers and related)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all
//       Access: Public
//  Description: Releases all prepared objects.
////////////////////////////////////////////////////////////////////
53
inline void GraphicsStateGuardian::release_all(void);

930 20 release_all_textures 0 4 1248 43 GraphicsStateGuardian::release_all_textures 0 1 309 319
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_textures
//       Access: Public
//  Description: Frees the resources for all textures associated with
//               this GSG.
////////////////////////////////////////////////////////////////////
61
inline int GraphicsStateGuardian::release_all_textures(void);

931 17 release_all_geoms 0 4 1248 40 GraphicsStateGuardian::release_all_geoms 0 1 310 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_geoms
//       Access: Public
//  Description: Frees the resources for all geoms associated with
//               this GSG.
////////////////////////////////////////////////////////////////////
58
inline int GraphicsStateGuardian::release_all_geoms(void);

932 26 release_all_vertex_buffers 0 4 1248 49 GraphicsStateGuardian::release_all_vertex_buffers 0 1 311 331
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_vertex_buffers
//       Access: Public
//  Description: Frees the resources for all vertex buffers associated
//               with this GSG.
////////////////////////////////////////////////////////////////////
67
inline int GraphicsStateGuardian::release_all_vertex_buffers(void);

933 25 release_all_index_buffers 0 4 1248 48 GraphicsStateGuardian::release_all_index_buffers 0 1 312 329
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_index_buffers
//       Access: Public
//  Description: Frees the resources for all index buffers associated
//               with this GSG.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsStateGuardian::release_all_index_buffers(void);

934 10 set_active 0 4 1248 33 GraphicsStateGuardian::set_active 0 1 313 538
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsStateGuardian.  If the GraphicsStateGuardian
//               is marked inactive, nothing is rendered.  This is not
//               normally turned off unless there is a problem with
//               the rendering detected at a low level.
////////////////////////////////////////////////////////////////////
59
inline void GraphicsStateGuardian::set_active(bool active);

935 9 is_active 0 4 1248 32 GraphicsStateGuardian::is_active 0 1 314 315
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               GraphicsStateGuardian.
////////////////////////////////////////////////////////////////////
57
inline bool GraphicsStateGuardian::is_active(void) const;

936 8 is_valid 0 4 1248 31 GraphicsStateGuardian::is_valid 0 1 315 435
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_valid
//       Access: Published
//  Description: Returns true if the GSG has been correctly
//               initialized within a graphics context, false if there
//               has been some problem or it hasn't been initialized
//               yet.
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsStateGuardian::is_valid(void) const;

937 11 needs_reset 0 4 1248 34 GraphicsStateGuardian::needs_reset 0 1 316 301
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::needs_reset
//       Access: Public
//  Description: Returns true if the gsg is marked as needing a
//               reset.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsStateGuardian::needs_reset(void) const;

938 21 set_incomplete_render 0 4 1248 44 GraphicsStateGuardian::set_incomplete_render 0 1 317 1472
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_incomplete_render
//       Access: Public
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               Setting this true allows for a smoother frame rate,
//               but occasionally parts of the frame will be invisible
//               or missing (they will generally come in within a
//               second or two).  Setting this false guarantees that
//               every frame will be complete, but may cause more
//               chugs as things are loaded up at runtime.
//
//               You may want to set this false during loading
//               screens, to guarantee that all of your assets are
//               available by the time you take the loading screen
//               down.
//
//               This flag may also be set individually on each
//               DisplayRegion.  It will be considered true for a
//               given DisplayRegion only if it is true on both the
//               GSG and on the DisplayRegion.
////////////////////////////////////////////////////////////////////
81
inline void GraphicsStateGuardian::set_incomplete_render(bool incomplete_render);

939 10 set_loader 0 4 1248 33 GraphicsStateGuardian::set_loader 0 1 318 385
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_loader
//       Access: Public
//  Description: Sets the Loader object that will be used by this GSG
//               to load textures when necessary, if
//               get_incomplete_render() is true.
////////////////////////////////////////////////////////////////////
62
inline void GraphicsStateGuardian::set_loader(Loader *loader);

940 10 get_loader 0 4 1248 33 GraphicsStateGuardian::get_loader 0 1 319 397
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be used by this
//               GSG to load textures when necessary, if
//               get_incomplete_render() is true.
////////////////////////////////////////////////////////////////////
61
inline Loader *GraphicsStateGuardian::get_loader(void) const;

941 8 get_pipe 0 4 1248 31 GraphicsStateGuardian::get_pipe 0 1 320 304
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_pipe
//       Access: Published
//  Description: Returns the graphics pipe on which this GSG was
//               created.
////////////////////////////////////////////////////////////////////
65
inline GraphicsPipe *GraphicsStateGuardian::get_pipe(void) const;

942 10 get_engine 0 4 1248 33 GraphicsStateGuardian::get_engine 0 1 321 463
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this GSG.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
////////////////////////////////////////////////////////////////////
62
GraphicsEngine *GraphicsStateGuardian::get_engine(void) const;

943 19 get_threading_model 0 4 1248 42 GraphicsStateGuardian::get_threading_model 0 1 322 320
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_threading_model
//       Access: Published
//  Description: Returns the threading model that was used to create
//               this GSG.
////////////////////////////////////////////////////////////////////
92
inline GraphicsThreadingModel const &GraphicsStateGuardian::get_threading_model(void) const;

944 11 is_hardware 0 4 1248 34 GraphicsStateGuardian::is_hardware 0 1 323 373
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_hardware
//       Access: Published
//  Description: Returns true if this GSG appears to be
//               hardware-accelerated, or false if it is known to be
//               software only.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsStateGuardian::is_hardware(void) const;

945 22 get_max_texture_stages 0 4 1248 45 GraphicsStateGuardian::get_max_texture_stages 0 1 324 859
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_texture_stages
//       Access: Published
//  Description: Returns the maximum number of simultaneous textures
//               that may be applied to geometry with multitexturing,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority texture stages will
//               not be applied.  Use TextureStage::set_priority() to
//               adjust the relative importance of the different
//               texture stages.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
69
inline int GraphicsStateGuardian::get_max_texture_stages(void) const;

946 28 get_max_3d_texture_dimension 0 4 1248 51 GraphicsStateGuardian::get_max_3d_texture_dimension 0 1 325 654
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_3d_texture_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a 3-d texture, or -1 if there is no
//               particular limit.  Returns 0 if 3-d textures are not
//               supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
75
inline int GraphicsStateGuardian::get_max_3d_texture_dimension(void) const;

947 31 get_max_2d_texture_array_layers 0 4 1248 54 GraphicsStateGuardian::get_max_2d_texture_array_layers 0 1 326 621
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_2d_texture_array_layers
//       Access: Published
//  Description: Returns the largest possible number of pages, or -1 
//               if there is no particular limit. Returns 0 if 2-d
//               texture arrays not supported.
//               
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
78
inline int GraphicsStateGuardian::get_max_2d_texture_array_layers(void) const;

948 26 get_max_cube_map_dimension 0 4 1248 49 GraphicsStateGuardian::get_max_cube_map_dimension 0 1 327 672
//z axis

////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_cube_map_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a cube map texture, or -1 if there is
//               no particular limit.  Returns 0 if cube map textures
//               are not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
73
inline int GraphicsStateGuardian::get_max_cube_map_dimension(void) const;

949 28 get_supports_texture_combine 0 4 1248 51 GraphicsStateGuardian::get_supports_texture_combine 0 1 328 595
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_combine
//       Access: Published
//  Description: Returns true if this particular GSG can use the
//               TextureStage::M_combine mode, which includes all of
//               the texture blend modes specified by
//               set_combine_rgb() and/or set_combine_alpha().  If
//               this is false, you must limit yourself to using the
//               simpler blend modes.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_texture_combine(void) const;

950 33 get_supports_texture_saved_result 0 4 1248 56 GraphicsStateGuardian::get_supports_texture_saved_result 0 1 329 475
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_saved_result
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CS_last_saved_result source, which
//               allows you to save the result of a TextureStage and
//               re-use it for multiple inputs.
////////////////////////////////////////////////////////////////////
81
inline bool GraphicsStateGuardian::get_supports_texture_saved_result(void) const;

951 25 get_supports_texture_dot3 0 4 1248 48 GraphicsStateGuardian::get_supports_texture_dot3 0 1 330 375
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_dot3
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CM_dot3_rgb or CM_dot3_rgba combine
//               modes.
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_supports_texture_dot3(void) const;

952 23 get_supports_3d_texture 0 4 1248 46 GraphicsStateGuardian::get_supports_3d_texture 0 1 331 325
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_3d_texture
//       Access: Published
//  Description: Returns true if this GSG can render 3-d (volumetric)
//               textures.
////////////////////////////////////////////////////////////////////
71
inline bool GraphicsStateGuardian::get_supports_3d_texture(void) const;

953 29 get_supports_2d_texture_array 0 4 1248 52 GraphicsStateGuardian::get_supports_2d_texture_array 0 1 332 324
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_2d_texture_array
//       Access: Published
//  Description: Returns true if this GSG can render 2-d textures
//               array.
////////////////////////////////////////////////////////////////////
77
inline bool GraphicsStateGuardian::get_supports_2d_texture_array(void) const;

954 21 get_supports_cube_map 0 4 1248 44 GraphicsStateGuardian::get_supports_cube_map 0 1 333 298
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cube_map
//       Access: Published
//  Description: Returns true if this GSG can render cube map textures.
////////////////////////////////////////////////////////////////////
69
inline bool GraphicsStateGuardian::get_supports_cube_map(void) const;

955 25 get_supports_tex_non_pow2 0 4 1248 48 GraphicsStateGuardian::get_supports_tex_non_pow2 0 1 334 333
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tex_non_pow2
//       Access: Published
//  Description: Returns true if this GSG can handle non power of two
//               sized textures.
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_supports_tex_non_pow2(void) const;

956 31 get_supports_compressed_texture 0 4 1248 54 GraphicsStateGuardian::get_supports_compressed_texture 0 1 335 423
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compressed_texture
//       Access: Published
//  Description: Returns true if this GSG can compress textures as it
//               loads them into texture memory, and/or accept
//               pre-compressed textures for storing.
////////////////////////////////////////////////////////////////////
79
inline bool GraphicsStateGuardian::get_supports_compressed_texture(void) const;

957 14 get_max_lights 0 4 1248 37 GraphicsStateGuardian::get_max_lights 0 1 336 579
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_lights
//       Access: Published
//  Description: Returns the maximum number of simultaneous lights
//               that may be rendered on geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
61
inline int GraphicsStateGuardian::get_max_lights(void) const;

958 19 get_max_clip_planes 0 4 1248 42 GraphicsStateGuardian::get_max_clip_planes 0 1 337 588
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_clip_planes
//       Access: Published
//  Description: Returns the maximum number of simultaneous clip planes
//               that may be applied to geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
66
inline int GraphicsStateGuardian::get_max_clip_planes(void) const;

959 25 get_max_vertex_transforms 0 4 1248 48 GraphicsStateGuardian::get_max_vertex_transforms 0 1 338 818
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transforms
//       Access: Published
//  Description: Returns the maximum number of transform matrices that
//               may be simultaneously used to transform any one
//               vertex by the graphics hardware.  If this number is
//               0, then the hardware (or the graphics backend)
//               doesn't support soft-skinned vertices (in which case
//               Panda will animate the vertices in software).
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
72
inline int GraphicsStateGuardian::get_max_vertex_transforms(void) const;

960 32 get_max_vertex_transform_indices 0 4 1248 55 GraphicsStateGuardian::get_max_vertex_transform_indices 0 1 339 811
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transform_indices
//       Access: Published
//  Description: Returns the maximum number of transforms there may be
//               in a single TransformTable for this graphics
//               hardware.  If this number is 0 (but
//               get_max_transforms() is nonzero), then the graphics
//               hardware (or API) doesn't support indexed transforms,
//               but can support direct transform references.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
79
inline int GraphicsStateGuardian::get_max_vertex_transform_indices(void) const;

961 25 get_copy_texture_inverted 0 4 1248 48 GraphicsStateGuardian::get_copy_texture_inverted 0 1 340 976
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_copy_texture_inverted
//       Access: Published
//  Description: Returns true if this particular GSG has the property
//               that any framebuffer-to-texture copy results in a
//               texture that is upside-down and backwards from
//               Panda's usual convention; that is, it copies into a
//               texture from the bottom up instead of from the top
//               down.
//
//               If this is true, then on offscreen GraphicsBuffer
//               created for the purposes of rendering into a texture
//               should be created with the invert flag set true, to
//               compensate.  Panda will do this automatically if you
//               create an offscreen buffer using
//               GraphicsOutput::make_texture_buffer().
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_copy_texture_inverted(void) const;

962 28 get_supports_generate_mipmap 0 4 1248 51 GraphicsStateGuardian::get_supports_generate_mipmap 0 1 341 555
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_generate_mipmap
//       Access: Published
//  Description: Returns true if this particular GSG can generate
//               mipmaps for a texture automatically, or if they must
//               be generated in software.  If this is true, then
//               mipmaps can safely be enabled for rendered textures
//               (e.g. using the MultitexReducer).
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_generate_mipmap(void) const;

963 26 get_supports_depth_texture 0 4 1248 49 GraphicsStateGuardian::get_supports_depth_texture 0 1 342 543
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_texture
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               returns true if the GSG supports GL_DEPTH_COMPONENT
//               textures, which are considered a limited but still
//               valid case of F_depth_stencil.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_depth_texture(void) const;

964 26 get_supports_depth_stencil 0 4 1248 49 GraphicsStateGuardian::get_supports_depth_stencil 0 1 343 475
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               only returns true if the GSG supports the full
//               packed depth-stencil functionality.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_depth_stencil(void) const;

965 26 get_supports_basic_shaders 0 4 1248 49 GraphicsStateGuardian::get_supports_basic_shaders 0 1 344 334
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_basic_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               arbfp1+arbvp1 or above.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_basic_shaders(void) const;

966 29 get_supports_geometry_shaders 0 4 1248 52 GraphicsStateGuardian::get_supports_geometry_shaders 0 1 345 331
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               geometry shaders.
////////////////////////////////////////////////////////////////////
77
inline bool GraphicsStateGuardian::get_supports_geometry_shaders(void) const;

967 33 get_supports_tessellation_shaders 0 4 1248 56 GraphicsStateGuardian::get_supports_tessellation_shaders 0 1 346 338
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tessellation_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               tesselation shaders.
////////////////////////////////////////////////////////////////////
81
inline bool GraphicsStateGuardian::get_supports_tessellation_shaders(void) const;

968 17 get_supports_glsl 0 4 1248 40 GraphicsStateGuardian::get_supports_glsl 0 1 347 315
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_glsl
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               GLSL shaders.
////////////////////////////////////////////////////////////////////
65
inline bool GraphicsStateGuardian::get_supports_glsl(void) const;

969 20 get_supports_stencil 0 4 1248 43 GraphicsStateGuardian::get_supports_stencil 0 1 348 328
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               stencil buffers at all.
////////////////////////////////////////////////////////////////////
68
inline bool GraphicsStateGuardian::get_supports_stencil(void) const;

970 30 get_supports_two_sided_stencil 0 4 1248 53 GraphicsStateGuardian::get_supports_two_sided_stencil 0 1 349 426
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_two_sided_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               two sided stencil: different stencil settings for the
//               front and back side of the same polygon.
////////////////////////////////////////////////////////////////////
78
inline bool GraphicsStateGuardian::get_supports_two_sided_stencil(void) const;

971 32 get_supports_geometry_instancing 0 4 1248 55 GraphicsStateGuardian::get_supports_geometry_instancing 0 1 350 494
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_instancing
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               hardware geometry instancing: the ability to render
//               multiple copies of a model. In OpenGL, this is
//               done using the EXT_draw_instanced extension.
////////////////////////////////////////////////////////////////////
80
inline bool GraphicsStateGuardian::get_supports_geometry_instancing(void) const;

972 21 get_max_color_targets 0 4 1248 44 GraphicsStateGuardian::get_max_color_targets 0 1 351 855
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_color_targets
//       Access: Published
//  Description: Returns the maximum number of simultaneous color
//               textures that may be attached for render-to-texture,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority render targets will
//               not be applied.  Use RenderTarget::set_priority() to
//               adjust the relative importance of the different
//               render targets.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
68
inline int GraphicsStateGuardian::get_max_color_targets(void) const;

973 39 get_maximum_simultaneous_render_targets 0 4 1248 62 GraphicsStateGuardian::get_maximum_simultaneous_render_targets 0 1 352 364
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_maximum_simultaneous_render_targets
//       Access: Published
//  Description: Deprecated.  Use get_max_color_targets() instead,
//               which returns the exact same value.
////////////////////////////////////////////////////////////////////
86
inline int GraphicsStateGuardian::get_maximum_simultaneous_render_targets(void) const;

974 16 get_shader_model 0 4 1248 39 GraphicsStateGuardian::get_shader_model 0 1 353 262
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_shader_model
//       Access: Published
//  Description: Returns the ShaderModel
////////////////////////////////////////////////////////////////////
63
inline int GraphicsStateGuardian::get_shader_model(void) const;

975 16 set_shader_model 0 4 1248 39 GraphicsStateGuardian::set_shader_model 0 1 354 403
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_shader_model
//       Access: Published
//  Description: Sets the ShaderModel.  This will override the auto-
//               detected shader model during GSG reset.  Useful for
//               testing lower-end shaders.
////////////////////////////////////////////////////////////////////
70
inline void GraphicsStateGuardian::set_shader_model(int shader_model);

976 23 get_supports_cg_profile 0 6 1248 46 GraphicsStateGuardian::get_supports_cg_profile 0 1 355 350
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cg_profile
//       Access: Published, Virtual
//  Description: Returns true if this particular GSG supports the 
//               specified Cg Shader Profile.
////////////////////////////////////////////////////////////////////
100
virtual bool GraphicsStateGuardian::get_supports_cg_profile(basic_string< char > const &name) const;

977 28 get_color_scale_via_lighting 0 4 1248 51 GraphicsStateGuardian::get_color_scale_via_lighting 0 1 356 499
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_color_scale_via_lighting
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale using materials and/or ambient lights, or
//               false if we need to actually munge the color.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_color_scale_via_lighting(void) const;

978 27 get_alpha_scale_via_texture 0 4 1248 50 GraphicsStateGuardian::get_alpha_scale_via_texture 0 2 357 358 1116
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) an alpha scale via an
//               additional Texture layer, or false if we need to
//               actually munge the alpha.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: This variant of get_alpha_scale_via_texture() answers
//               the question of whether the GSG can implement an
//               alpha scale via an additional Texture layer,
//               considering the current TextureAttrib that will be in
//               effect.  This considers whether there is at least one
//               additional texture slot available on the GSG.
////////////////////////////////////////////////////////////////////
178
inline bool GraphicsStateGuardian::get_alpha_scale_via_texture(void) const;
inline bool GraphicsStateGuardian::get_alpha_scale_via_texture(TextureAttrib const *tex_attrib) const;

979 23 get_runtime_color_scale 0 4 1248 46 GraphicsStateGuardian::get_runtime_color_scale 0 1 359 483
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_runtime_color_scale
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale directly, without requiring any munging of
//               vertices or tricks with lighting.
////////////////////////////////////////////////////////////////////
71
inline bool GraphicsStateGuardian::get_runtime_color_scale(void) const;

980 29 get_alpha_scale_texture_stage 0 4 1248 52 GraphicsStateGuardian::get_alpha_scale_texture_stage 0 1 360 408
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_texture_stage
//       Access: Published, Static
//  Description: Returns the TextureStage that will be used to apply
//               an alpha scale, if get_alpha_scale_via_texture()
//               returns true.
////////////////////////////////////////////////////////////////////
87
static inline TextureStage *GraphicsStateGuardian::get_alpha_scale_texture_stage(void);

981 21 set_coordinate_system 0 4 1248 44 GraphicsStateGuardian::set_coordinate_system 0 1 361 771
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_coordinate_system
//       Access: Published
//  Description: Changes the coordinate system in effect on this
//               particular gsg.  This is also called the "external"
//               coordinate system, since it is the coordinate system
//               used by the scene graph, external to to GSG.
//
//               Normally, this will be the default coordinate system,
//               but it might be set differently at runtime.  It will
//               automatically be copied from the current lens's
//               coordinate system as each DisplayRegion is rendered.
////////////////////////////////////////////////////////////////////
71
void GraphicsStateGuardian::set_coordinate_system(CoordinateSystem cs);

982 21 get_coordinate_system 0 4 1248 44 GraphicsStateGuardian::get_coordinate_system 0 1 362 457
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system in effect on this
//               particular gsg.  Normally, this will be the default
//               coordinate system, but it might be set differently at
//               runtime.
////////////////////////////////////////////////////////////////////
81
inline CoordinateSystem GraphicsStateGuardian::get_coordinate_system(void) const;

983 30 get_internal_coordinate_system 0 6 1248 53 GraphicsStateGuardian::get_internal_coordinate_system 0 1 363 756
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_internal_coordinate_system
//       Access: Published, Virtual
//  Description: Returns the coordinate system used internally by the
//               GSG.  This may be the same as the external coordinate
//               system reported by get_coordinate_system(), or it may
//               be something different.
//
//               In any case, vertices that have been transformed
//               before being handed to the GSG (that is, vertices
//               with a contents value of C_clip_point) will be
//               expected to be in this coordinate system.
////////////////////////////////////////////////////////////////////
91
virtual CoordinateSystem GraphicsStateGuardian::get_internal_coordinate_system(void) const;

984 20 get_prepared_objects 0 6 1248 43 GraphicsStateGuardian::get_prepared_objects 0 1 364 411
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_prepared_objects
//       Access: Public, Virtual
//  Description: Returns the set of texture and geom objects that have
//               been prepared with this GSG (and possibly other GSG's
//               that share objects).
////////////////////////////////////////////////////////////////////
83
virtual PreparedGraphicsObjects *GraphicsStateGuardian::get_prepared_objects(void);

985 9 set_gamma 0 6 1248 32 GraphicsStateGuardian::set_gamma 0 1 365 277
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_gamma
//       Access: Published, Virtual
//  Description: Set gamma.  Returns true on success.
////////////////////////////////////////////////////////////////////
59
virtual bool GraphicsStateGuardian::set_gamma(float gamma);

986 9 get_gamma 0 4 1248 32 GraphicsStateGuardian::get_gamma 0 1 366 262
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_gamma
//       Access: Published
//  Description: Get the current gamma setting.
////////////////////////////////////////////////////////////////////
52
float GraphicsStateGuardian::get_gamma(float gamma);

987 13 restore_gamma 0 6 1248 36 GraphicsStateGuardian::restore_gamma 0 1 367 276
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::restore_gamma
//       Access: Published, Virtual
//  Description: Restore original gamma setting.
////////////////////////////////////////////////////////////////////
56
virtual void GraphicsStateGuardian::restore_gamma(void);

988 28 set_texture_quality_override 0 4 1248 51 GraphicsStateGuardian::set_texture_quality_override 0 1 368 749
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_texture_quality_override
//       Access: Published
//  Description: Specifies the global quality_level to be imposed for
//               all Textures rendered by this GSG.  This overrides
//               the value set on individual textures via
//               Texture::set_quality_level().  Set this to
//               Texture::QL_default in order to allow the individual
//               texture quality levels to be respected.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
////////////////////////////////////////////////////////////////////
101
inline void GraphicsStateGuardian::set_texture_quality_override(Texture::QualityLevel quality_level);

989 28 get_texture_quality_override 0 4 1248 51 GraphicsStateGuardian::get_texture_quality_override 0 1 369 485
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_texture_quality_override
//       Access: Published
//  Description: Returns the global quality_level override specified
//               by set_texture_quality_override.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
////////////////////////////////////////////////////////////////////
93
inline Texture::QualityLevel GraphicsStateGuardian::get_texture_quality_override(void) const;

990 21 get_prepared_textures 0 4 1248 44 GraphicsStateGuardian::get_prepared_textures 0 1 370 0
67
PyObject *GraphicsStateGuardian::get_prepared_textures(void) const;

991 26 traverse_prepared_textures 0 4 1248 49 GraphicsStateGuardian::traverse_prepared_textures 0 0 390
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::traverse_prepared_textures
//       Access: Public
//  Description: Calls the indicated function on all
//               currently-prepared textures, or until the callback
//               function returns false.
////////////////////////////////////////////////////////////////////
129
void GraphicsStateGuardian::traverse_prepared_textures(bool (*func)(TextureContext *tc, void *callback_arg), void *callback_arg);

992 17 set_flash_texture 0 4 1248 40 GraphicsStateGuardian::set_flash_texture 0 1 371 1337
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_flash_texture
//       Access: Published
//  Description: Sets the "flash texture".  This is a debug feature;
//               when enabled, the specified texture will begin
//               flashing in the scene, helping you to find it
//               visually.
//
//               The texture also flashes with a color code: blue for
//               mipmap level 0, yellow for mipmap level 1, and red
//               for mipmap level 2 or higher (even for textures that
//               don't have mipmaps).  This gives you an idea of the
//               choice of the texture size.  If it is blue, the
//               texture is being drawn the proper size or magnified;
//               if it is yellow, it is being minified a little bit;
//               and if it red, it is being minified considerably.  If
//               you see a red texture when you are right in front of
//               it, you should consider reducing the size of the
//               texture to avoid wasting texture memory.
//
//               Not all rendering backends support the flash_texture
//               feature.  Presently, it is only supported by OpenGL.
////////////////////////////////////////////////////////////////////
60
void GraphicsStateGuardian::set_flash_texture(Texture *tex);

993 19 clear_flash_texture 0 4 1248 42 GraphicsStateGuardian::clear_flash_texture 0 1 372 344
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::clear_flash_texture
//       Access: Published
//  Description: Resets the "flash texture", so that no textures will
//               flash.  See set_flash_texture().
////////////////////////////////////////////////////////////////////
54
void GraphicsStateGuardian::clear_flash_texture(void);

994 17 get_flash_texture 0 4 1248 40 GraphicsStateGuardian::get_flash_texture 0 1 373 344
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_flash_texture
//       Access: Published
//  Description: Returns the current "flash texture", if any, or NULL
//               if none.  See set_flash_texture().
////////////////////////////////////////////////////////////////////
62
Texture *GraphicsStateGuardian::get_flash_texture(void) const;

995 17 get_driver_vendor 0 6 1248 40 GraphicsStateGuardian::get_driver_vendor 0 1 374 290
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_vendor
//       Access: Public, Virtual
//  Description: Returns the vendor of the video card driver 
////////////////////////////////////////////////////////////////////
76
virtual basic_string< char > GraphicsStateGuardian::get_driver_vendor(void);

996 19 get_driver_renderer 0 6 1248 42 GraphicsStateGuardian::get_driver_renderer 0 1 375 265
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_vendor
//       Access: Public, Virtual
//  Description: Returns GL_Renderer
////////////////////////////////////////////////////////////////////
78
virtual basic_string< char > GraphicsStateGuardian::get_driver_renderer(void);

997 18 get_driver_version 0 6 1248 41 GraphicsStateGuardian::get_driver_version 0 1 376 471
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version
//       Access: Public, Virtual
//  Description: Returns driver version
//               This has an implementation-defined meaning, and may
//               be "0" if the particular graphics implementation
//               does not provide a way to query this information.
////////////////////////////////////////////////////////////////////
77
virtual basic_string< char > GraphicsStateGuardian::get_driver_version(void);

998 24 get_driver_version_major 0 6 1248 47 GraphicsStateGuardian::get_driver_version_major 0 1 377 496
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version_major
//       Access: Public, Virtual
//  Description: Returns major version of the video driver.
//               This has an implementation-defined meaning, and may
//               be -1 if the particular graphics implementation
//               does not provide a way to query this information.
////////////////////////////////////////////////////////////////////
66
virtual int GraphicsStateGuardian::get_driver_version_major(void);

999 24 get_driver_version_minor 0 6 1248 47 GraphicsStateGuardian::get_driver_version_minor 0 1 378 500
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version_minor
//       Access: Public, Virtual
//  Description: Returns the minor version of the video driver.
//               This has an implementation-defined meaning, and may
//               be -1 if the particular graphics implementation
//               does not provide a way to query this information.
////////////////////////////////////////////////////////////////////
66
virtual int GraphicsStateGuardian::get_driver_version_minor(void);

1000 31 get_driver_shader_version_major 0 6 1248 54 GraphicsStateGuardian::get_driver_shader_version_major 0 1 379 306
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_shader_version_major
//       Access: Public, Virtual
//  Description: Returns the major version of the shader model.
////////////////////////////////////////////////////////////////////
73
virtual int GraphicsStateGuardian::get_driver_shader_version_major(void);

1001 31 get_driver_shader_version_minor 0 6 1248 54 GraphicsStateGuardian::get_driver_shader_version_minor 0 1 380 306
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_shader_version_minor
//       Access: Public, Virtual
//  Description: Returns the minor version of the shader model.
////////////////////////////////////////////////////////////////////
73
virtual int GraphicsStateGuardian::get_driver_shader_version_minor(void);

1002 9 set_scene 0 4 1248 32 GraphicsStateGuardian::set_scene 0 1 381 549
// NDEBUG
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_scene
//       Access: Published
//  Description: Sets the SceneSetup object that indicates the initial
//               camera position, etc.  This must be called before
//               traversal begins.  Returns true if the scene is
//               acceptable, false if something's wrong.  This should
//               be called in the draw thread only.
////////////////////////////////////////////////////////////////////
63
bool GraphicsStateGuardian::set_scene(SceneSetup *scene_setup);

1003 9 get_scene 0 6 1248 32 GraphicsStateGuardian::get_scene 0 1 382 279
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_scene
//       Access: Published, Virtual
//  Description: Returns the current SceneSetup object.
////////////////////////////////////////////////////////////////////
65
virtual SceneSetup *GraphicsStateGuardian::get_scene(void) const;

1004 11 begin_scene 0 6 1248 34 GraphicsStateGuardian::begin_scene 0 1 383 933
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::begin_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the beginning of drawing commands for a "scene"
//               (usually a particular DisplayRegion) within a frame.
//               All 3-D drawing commands, except the clear operation,
//               must be enclosed within begin_scene() .. end_scene().
//               This must be called in the draw thread.
//
//               The return value is true if successful (in which case
//               the scene will be drawn and end_scene() will be
//               called later), or false if unsuccessful (in which
//               case nothing will be drawn and end_scene() will not
//               be called).
////////////////////////////////////////////////////////////////////
54
virtual bool GraphicsStateGuardian::begin_scene(void);

1005 9 end_scene 0 6 1248 32 GraphicsStateGuardian::end_scene 0 1 384 565
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::end_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the end of drawing commands for a "scene" (usually a
//               particular DisplayRegion) within a frame.  All 3-D
//               drawing commands, except the clear operation, must be
//               enclosed within begin_scene() .. end_scene().
////////////////////////////////////////////////////////////////////
52
virtual void GraphicsStateGuardian::end_scene(void);

1006 14 get_class_type 0 4 1248 37 GraphicsStateGuardian::get_class_type 0 1 385 0
62
static TypeHandle GraphicsStateGuardian::get_class_type(void);

1007 28 upcast_to_GraphicsOutputBase 0 12 1251 44 GraphicsOutput::upcast_to_GraphicsOutputBase 0 1 480 48
upcast from GraphicsOutput to GraphicsOutputBase
71
GraphicsOutputBase *GraphicsOutput::upcast_to_GraphicsOutputBase(void);

1008 26 downcast_to_GraphicsOutput 0 12 1252 46 GraphicsOutputBase::downcast_to_GraphicsOutput 0 1 481 50
downcast from GraphicsOutputBase to GraphicsOutput
69
GraphicsOutput *GraphicsOutputBase::downcast_to_GraphicsOutput(void);

1009 24 upcast_to_DrawableRegion 0 12 1251 40 GraphicsOutput::upcast_to_DrawableRegion 0 1 482 44
upcast from GraphicsOutput to DrawableRegion
63
DrawableRegion *GraphicsOutput::upcast_to_DrawableRegion(void);

1010 26 downcast_to_GraphicsOutput 0 12 1232 42 DrawableRegion::downcast_to_GraphicsOutput 0 1 483 46
downcast from DrawableRegion to GraphicsOutput
65
GraphicsOutput *DrawableRegion::downcast_to_GraphicsOutput(void);

1011 15 ~GraphicsOutput 0 6 1251 31 GraphicsOutput::~GraphicsOutput 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
46
virtual GraphicsOutput::~GraphicsOutput(void);

1012 7 get_gsg 0 4 1251 23 GraphicsOutput::get_gsg 0 1 386 1096
// Filename: graphicsOutput.I
// Created by:  drose (06Feb04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_gsg
//       Access: Published
//  Description: Returns the GSG that is associated with this window.
//               There is a one-to-one association between windows and
//               GSG's.
//
//               This may return NULL if the graphics context has not
//               yet been created for the window, e.g. before the
//               first frame has rendered; or after the window has
//               been closed.
////////////////////////////////////////////////////////////////////
66
inline GraphicsStateGuardian *GraphicsOutput::get_gsg(void) const;

1013 8 get_pipe 0 4 1251 24 GraphicsOutput::get_pipe 0 1 387 586
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this window is
//               associated with.  It is possible that the
//               GraphicsPipe might have been deleted while an
//               outstanding PT(GraphicsOutput) prevented all of its
//               children windows from also being deleted; in this
//               unlikely case, get_pipe() may return NULL.
////////////////////////////////////////////////////////////////////
58
inline GraphicsPipe *GraphicsOutput::get_pipe(void) const;

1014 10 get_engine 0 4 1251 26 GraphicsOutput::get_engine 0 1 388 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this output.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
////////////////////////////////////////////////////////////////////
62
inline GraphicsEngine *GraphicsOutput::get_engine(void) const;

1015 8 get_name 0 4 1251 24 GraphicsOutput::get_name 0 1 389 308
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_name
//       Access: Published
//  Description: Returns the name that was passed to the
//               GraphicsOutput constructor.
////////////////////////////////////////////////////////////////////
72
inline basic_string< char > const &GraphicsOutput::get_name(void) const;

1016 14 count_textures 0 4 1251 30 GraphicsOutput::count_textures 0 1 390 539
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::count_textures
//       Access: Published
//  Description: If the GraphicsOutput is set to render into a
//               texture, returns the number of textures that are
//               being rendered into.  Normally, the textures would
//               be associated with different buffers - a color
//               texture, a depth texture, and a stencil texture.
////////////////////////////////////////////////////////////////////
54
inline int GraphicsOutput::count_textures(void) const;

1017 11 has_texture 0 4 1251 27 GraphicsOutput::has_texture 0 1 391 318
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_texture
//       Access: Published
//  Description: Returns true if the GraphicsOutput is rendering 
//               into any textures at all.
////////////////////////////////////////////////////////////////////
52
inline bool GraphicsOutput::has_texture(void) const;

1018 11 get_texture 0 6 1251 27 GraphicsOutput::get_texture 0 2 392 393 725
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture
//       Access: Published
//  Description: Returns the nth texture into which the GraphicsOutput
//               renders.  Returns NULL if there is no such texture.
//
//               If the texture is non-NULL, it may be applied to
//               geometry to be rendered for any other windows or
//               outputs that share the same GSG as this
//               GraphicsOutput.  The effect is undefined for windows
//               that share a different GSG; usually in these cases
//               the texture will be invalid.
////////////////////////////////////////////////////////////////////
71
virtual inline Texture *GraphicsOutput::get_texture(int i = (0)) const;

1019 17 get_texture_plane 0 4 1251 33 GraphicsOutput::get_texture_plane 0 2 394 395 377
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_plane
//       Access: Published
//  Description: Returns the RenderTexturePlane associated with the
//               nth render-texture.  Returns 0 if there is no such
//               texture.
////////////////////////////////////////////////////////////////////
95
inline DrawableRegion::RenderTexturePlane GraphicsOutput::get_texture_plane(int i = (0)) const;

1020 12 get_rtm_mode 0 4 1251 28 GraphicsOutput::get_rtm_mode 0 2 396 397 378
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_rtm_mode
//       Access: Published
//  Description: Returns the RenderTextureMode associated with the
//               nth render-texture.  Returns RTM_none if there is
//               no such texture.
////////////////////////////////////////////////////////////////////
89
inline GraphicsOutput::RenderTextureMode GraphicsOutput::get_rtm_mode(int i = (0)) const;

1021 21 clear_render_textures 0 4 1251 37 GraphicsOutput::clear_render_textures 0 1 398 387
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_render_textures
//       Access: Published
//  Description: If the GraphicsOutput is currently rendering to
//               a texture, then all textures are dissociated from
//               the GraphicsOuput.
////////////////////////////////////////////////////////////////////
49
void GraphicsOutput::clear_render_textures(void);

1022 18 add_render_texture 0 4 1251 34 GraphicsOutput::add_render_texture 0 2 399 400 1875
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::add_render_texture
//       Access: Published
//  Description: Creates a new Texture object, suitable for rendering
//               the contents of this buffer into, and appends it to
//               the list of render textures.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created, in which case you may call
//               get_texture() to retrieve the new texture pointer.
//
//               You can specify a bitplane to attach the texture to.
//               the legal choices are:
//
//               * RTP_depth
//               * RTP_depth_stencil
//               * RTP_color
//               * RTP_aux_rgba_0
//               * RTP_aux_rgba_1
//               * RTP_aux_rgba_2
//               * RTP_aux_rgba_3
//
//               If you do not specify a bitplane to attach the
//               texture to, this routine will use a default based
//               on the texture's format:
//
//               * F_depth_component attaches to RTP_depth
//               * F_depth_stencil attaches to RTP_depth_stencil
//               * all other formats attach to RTP_color.
//
//               The texture's format will be changed to match
//               the format of the bitplane to which it is attached.
//               For example, if you pass in an F_rgba texture and
//               order that it be attached to RTP_depth_stencil, it will turn
//               into an F_depth_stencil texture.
//
//               Also see make_texture_buffer(), which is a
//               higher-level interface for preparing
//               render-to-a-texture mode.
////////////////////////////////////////////////////////////////////
153
void GraphicsOutput::add_render_texture(Texture *tex, GraphicsOutput::RenderTextureMode mode, DrawableRegion::RenderTexturePlane bitplane = (RTP_COUNT));

1023 20 setup_render_texture 0 4 1251 36 GraphicsOutput::setup_render_texture 0 1 401 494
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::setup_render_texture
//       Access: Published
//  Description: This is a deprecated interface that made sense back
//               when GraphicsOutputs could only render into one
//               texture at a time.  From now on, use
//               clear_render_textures and add_render_texture
//               instead.
////////////////////////////////////////////////////////////////////
86
void GraphicsOutput::setup_render_texture(Texture *tex, bool allow_bind, bool to_ram);

1024 10 get_x_size 0 4 1251 26 GraphicsOutput::get_x_size 0 1 402 746
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_x_size
//       Access: Published
//  Description: Returns the visible width of the window or buffer, if
//               it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
////////////////////////////////////////////////////////////////////
50
inline int GraphicsOutput::get_x_size(void) const;

1025 10 get_y_size 0 4 1251 26 GraphicsOutput::get_y_size 0 1 403 747
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_y_size
//       Access: Published
//  Description: Returns the visible height of the window or buffer,
//               if it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
////////////////////////////////////////////////////////////////////
50
inline int GraphicsOutput::get_y_size(void) const;

1026 13 get_fb_x_size 0 4 1251 29 GraphicsOutput::get_fb_x_size 0 1 404 440
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_x_size
//       Access: Published
//  Description: Returns the internal width of the window or buffer.
//               This is almost always the same as get_x_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
////////////////////////////////////////////////////////////////////
53
inline int GraphicsOutput::get_fb_x_size(void) const;

1027 13 get_fb_y_size 0 4 1251 29 GraphicsOutput::get_fb_y_size 0 1 405 441
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_y_size
//       Access: Published
//  Description: Returns the internal height of the window or buffer.
//               This is almost always the same as get_y_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
////////////////////////////////////////////////////////////////////
53
inline int GraphicsOutput::get_fb_y_size(void) const;

1028 19 get_sbs_left_x_size 0 4 1251 35 GraphicsOutput::get_sbs_left_x_size 0 1 406 522
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_x_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel width of the left eye, based on scaling
//               get_x_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_x_size().
////////////////////////////////////////////////////////////////////
59
inline int GraphicsOutput::get_sbs_left_x_size(void) const;

1029 19 get_sbs_left_y_size 0 4 1251 35 GraphicsOutput::get_sbs_left_y_size 0 1 407 523
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_y_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel height of the left eye, based on scaling
//               get_y_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_y_size().
////////////////////////////////////////////////////////////////////
59
inline int GraphicsOutput::get_sbs_left_y_size(void) const;

1030 20 get_sbs_right_x_size 0 4 1251 36 GraphicsOutput::get_sbs_right_x_size 0 1 408 525
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_x_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel width of the right eye, based on scaling
//               get_x_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_x_size().
////////////////////////////////////////////////////////////////////
60
inline int GraphicsOutput::get_sbs_right_x_size(void) const;

1031 20 get_sbs_right_y_size 0 4 1251 36 GraphicsOutput::get_sbs_right_y_size 0 1 409 526
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_y_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel height of the right eye, based on scaling
//               get_y_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_y_size().
////////////////////////////////////////////////////////////////////
60
inline int GraphicsOutput::get_sbs_right_y_size(void) const;

1032 8 has_size 0 4 1251 24 GraphicsOutput::has_size 0 1 410 530
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_size
//       Access: Published
//  Description: Returns true if the size of the window/frame buffer
//               is known, false otherwise.  In certain cases the size
//               may not be known until after the object has been
//               fully created.  Also, certain objects (like windows)
//               may change size spontaneously.
////////////////////////////////////////////////////////////////////
49
inline bool GraphicsOutput::has_size(void) const;

1033 8 is_valid 0 4 1251 24 GraphicsOutput::is_valid 0 1 411 326
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_valid
//       Access: Published
//  Description: Returns true if the output is fully created and ready
//               for rendering, false otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool GraphicsOutput::is_valid(void) const;

1034 15 is_nonzero_size 0 4 1251 31 GraphicsOutput::is_nonzero_size 0 1 412 375
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_nonzero_size
//       Access: Published
//  Description: Returns true if the output has a nonzero size in both
//               X and Y, or false if it is zero (and therefore
//               invalid).
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsOutput::is_nonzero_size(void) const;

1035 10 set_active 0 4 1251 26 GraphicsOutput::set_active 0 1 413 380
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsOutput.  If the GraphicsOutput is marked
//               inactive, nothing is rendered.
////////////////////////////////////////////////////////////////////
45
void GraphicsOutput::set_active(bool active);

1036 9 is_active 0 6 1251 25 GraphicsOutput::is_active 0 1 414 324
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_active
//       Access: Published, Virtual
//  Description: Returns true if the window is ready to be rendered
//               into, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool GraphicsOutput::is_active(void) const;

1037 12 set_one_shot 0 4 1251 28 GraphicsOutput::set_one_shot 0 1 415 1275
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_one_shot
//       Access: Published
//  Description: Changes the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will render the
//               current frame and then automatically set itself
//               inactive.  This is particularly useful for buffers
//               that are created for the purposes of
//               render-to-texture, for static textures that don't
//               need to be continually re-rendered once they have
//               been rendered the first time.
//
//               Setting the buffer inactive is not the same thing as
//               destroying it.  You are still responsible for passing
//               this buffer to GraphicsEngine::remove_window() when
//               you no longer need the texture, in order to clean up
//               fully.  (However, you should not call remove_window()
//               on this buffer while the texture is still needed,
//               because depending on the render-to-texture mechanism
//               in use, this may invalidate the texture contents.)
////////////////////////////////////////////////////////////////////
49
void GraphicsOutput::set_one_shot(bool one_shot);

1038 12 get_one_shot 0 4 1251 28 GraphicsOutput::get_one_shot 0 1 416 427
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_one_shot
//       Access: Published
//  Description: Returns the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will
//               automatically set itself inactive after the next
//               frame.
////////////////////////////////////////////////////////////////////
46
bool GraphicsOutput::get_one_shot(void) const;

1039 12 set_inverted 0 4 1251 28 GraphicsOutput::set_inverted 0 1 417 947
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_inverted
//       Access: Published
//  Description: Changes the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down and backwards, that is, inverted
//               as if viewed through a mirror placed on the floor.
//
//               This is primarily intended to support DirectX (and a
//               few buggy OpenGL graphics drivers) that perform a
//               framebuffer-to-texture copy upside-down from the
//               usual OpenGL (and Panda) convention.  Panda will
//               automatically set this flag for offscreen buffers on
//               hardware that is known to do this, to compensate when
//               rendering offscreen into a texture.
////////////////////////////////////////////////////////////////////
49
void GraphicsOutput::set_inverted(bool inverted);

1040 12 get_inverted 0 4 1251 28 GraphicsOutput::get_inverted 0 1 418 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_inverted
//       Access: Published
//  Description: Returns the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down, flipped like a mirror along the X
//               axis.  See set_inverted().
////////////////////////////////////////////////////////////////////
53
inline bool GraphicsOutput::get_inverted(void) const;

1041 13 set_swap_eyes 0 4 1251 29 GraphicsOutput::set_swap_eyes 0 1 419 688
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_swap_eyes
//       Access: Public
//  Description: Changes the "swap eyes" flag.  This flag is normally
//               false.  When it is true, the left and right channels
//               of a stereo DisplayRegion are sent to the opposite
//               channels in the rendering backend.  This is meant to
//               work around hardware that inadvertently swaps the
//               output channels, or hardware for which it cannot be
//               determined which channel is which until runtime.
////////////////////////////////////////////////////////////////////
58
inline void GraphicsOutput::set_swap_eyes(bool swap_eyes);

1042 13 get_swap_eyes 0 4 1251 29 GraphicsOutput::get_swap_eyes 0 1 420 316
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_swap_eyes
//       Access: Public
//  Description: Returns the current setting of the "swap eyes" flag.
//               See set_swap_eyes().
////////////////////////////////////////////////////////////////////
54
inline bool GraphicsOutput::get_swap_eyes(void) const;

1043 19 set_red_blue_stereo 0 4 1251 35 GraphicsOutput::set_red_blue_stereo 0 1 421 959
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_red_blue_stereo
//       Access: Published
//  Description: Enables red-blue stereo mode on this particular
//               window.  When red-blue stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render in the red (or specified) channel only, while
//               DisplayRegions that have the "right" channel set will
//               render in the blue (or specified) channel only.
//
//               The remaining two parameters specify the particular
//               color channel(s) to associate with each eye.  Use the
//               bits defined in ColorWriteAttrib::Channels.
//
//               This can be used to achieve a cheesy stereo mode in
//               the absence of hardware-supported stereo.
////////////////////////////////////////////////////////////////////
139
inline void GraphicsOutput::set_red_blue_stereo(bool red_blue_stereo, unsigned int left_eye_color_mask, unsigned int right_eye_color_mask);

1044 19 get_red_blue_stereo 0 4 1251 35 GraphicsOutput::get_red_blue_stereo 0 1 422 357
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_red_blue_stereo
//       Access: Published
//  Description: Returns whether red-blue stereo mode is in effect for
//               this particular window.  See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
60
inline bool GraphicsOutput::get_red_blue_stereo(void) const;

1045 23 get_left_eye_color_mask 0 4 1251 39 GraphicsOutput::get_left_eye_color_mask 0 1 423 470
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_left_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               left-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
72
inline unsigned int GraphicsOutput::get_left_eye_color_mask(void) const;

1046 24 get_right_eye_color_mask 0 4 1251 40 GraphicsOutput::get_right_eye_color_mask 0 1 424 472
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_right_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               right-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
73
inline unsigned int GraphicsOutput::get_right_eye_color_mask(void) const;

1047 23 set_side_by_side_stereo 0 4 1251 39 GraphicsOutput::set_side_by_side_stereo 0 2 425 426 2016
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_side_by_side_stereo
//       Access: Published
//  Description: Enables side-by-side stereo mode on this particular
//               window.  When side-by-side stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render on the part of the window specified by
//               sbs_left_dimensions (typically the left half: (0,
//               0.5, 0, 1)), while DisplayRegions that have the
//               "right" channel set will render on the part of the
//               window specified by sbs_right_dimensions (typically
//               the right half: (0.5, 1, 0, 1)).
//
//               This is commonly used in a dual-monitor mode, where a
//               window is opened that spans two monitors, and each
//               monitor represents a different eye.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_side_by_side_stereo
//       Access: Published
//  Description: Enables side-by-side stereo mode on this particular
//               window.  When side-by-side stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render on the part of the window specified by
//               sbs_left_dimensions (typically the left half: (0,
//               0.5, 0, 1)), while DisplayRegions that have the
//               "right" channel set will render on the part of the
//               window specified by sbs_right_dimensions (typically
//               the right half: (0.5, 1, 0, 1)).
//
//               This is commonly used in a dual-monitor mode, where a
//               window is opened that spans two monitors, and each
//               monitor represents a different eye.
////////////////////////////////////////////////////////////////////
222
void GraphicsOutput::set_side_by_side_stereo(bool side_by_side_stereo);
void GraphicsOutput::set_side_by_side_stereo(bool side_by_side_stereo, LVecBase4f const &sbs_left_dimensions, LVecBase4f const &sbs_right_dimensions);

1048 23 get_side_by_side_stereo 0 4 1251 39 GraphicsOutput::get_side_by_side_stereo 0 1 427 369
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_side_by_side_stereo
//       Access: Published
//  Description: Returns whether side-by-side stereo mode is in effect for
//               this particular window.  See set_side_by_side_stereo().
////////////////////////////////////////////////////////////////////
64
inline bool GraphicsOutput::get_side_by_side_stereo(void) const;

1049 23 get_sbs_left_dimensions 0 4 1251 39 GraphicsOutput::get_sbs_left_dimensions 0 1 428 458
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_dimensions
//       Access: Published
//  Description: Returns the effective sub-region of the window for
//               displaying the left channel, if side-by-side stereo
//               mode is in effect for the window.  See
//               set_side_by_side_stereo().
////////////////////////////////////////////////////////////////////
77
inline LVecBase4f const &GraphicsOutput::get_sbs_left_dimensions(void) const;

1050 24 get_sbs_right_dimensions 0 4 1251 40 GraphicsOutput::get_sbs_right_dimensions 0 1 429 460
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_dimensions
//       Access: Published
//  Description: Returns the effective sub-region of the window for
//               displaying the right channel, if side-by-side stereo
//               mode is in effect for the window.  See
//               set_side_by_side_stereo().
////////////////////////////////////////////////////////////////////
78
inline LVecBase4f const &GraphicsOutput::get_sbs_right_dimensions(void) const;

1051 17 get_fb_properties 0 4 1251 33 GraphicsOutput::get_fb_properties 0 1 430 282
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_properties
//       Access: Published
//  Description: Returns the framebuffer properties of the window.
////////////////////////////////////////////////////////////////////
82
inline FrameBufferProperties const &GraphicsOutput::get_fb_properties(void) const;

1052 9 is_stereo 0 4 1251 25 GraphicsOutput::is_stereo 0 1 431 447
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_stereo
//       Access: Published
//  Description: Returns Returns true if this window can render stereo
//               DisplayRegions, either through red-blue stereo (see
//               set_red_blue_stereo()) or through true hardware
//               stereo rendering.
////////////////////////////////////////////////////////////////////
50
inline bool GraphicsOutput::is_stereo(void) const;

1053 17 clear_delete_flag 0 4 1251 33 GraphicsOutput::clear_delete_flag 0 1 432 386
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_delete_flag
//       Access: Published
//  Description: Resets the delete flag, so the GraphicsOutput will
//               not be automatically deleted before the beginning of
//               the next frame.
////////////////////////////////////////////////////////////////////
52
inline void GraphicsOutput::clear_delete_flag(void);

1054 15 get_delete_flag 0 4 1251 31 GraphicsOutput::get_delete_flag 0 1 433 460
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_delete_flag
//       Access: Published
//  Description: Returns the current setting of the delete flag.  When
//               this is true, the GraphicsOutput will automatically
//               be removed before the beginning of the next frame by
//               the GraphicsEngine.
////////////////////////////////////////////////////////////////////
49
bool GraphicsOutput::get_delete_flag(void) const;

1055 8 set_sort 0 6 1251 24 GraphicsOutput::set_sort 0 1 434 345
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_sort
//       Access: Published, Virtual
//  Description: Adjusts the sorting order of this particular
//               GraphicsOutput, relative to other GraphicsOutputs.
////////////////////////////////////////////////////////////////////
48
virtual void GraphicsOutput::set_sort(int sort);

1056 8 get_sort 0 4 1251 24 GraphicsOutput::get_sort 0 1 435 432
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sort
//       Access: Published
//  Description: Returns the sorting order of this particular
//               GraphicsOutput.  The various GraphicsOutputs within a
//               particular thread will be rendered in the indicated
//               order.
////////////////////////////////////////////////////////////////////
48
inline int GraphicsOutput::get_sort(void) const;

1057 14 set_child_sort 0 4 1251 30 GraphicsOutput::set_child_sort 0 1 436 1026
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_child_sort
//       Access: Published
//  Description: Specifies the sort value of future offscreen buffers
//               created by make_texture_sort().
//
//               The purpose of this method is to allow the user to
//               limit the sort value chosen for a buffer created via
//               make_texture_buffer().  Normally, this buffer will be
//               assigned a value of get_sort() - 1, so that it
//               will be rendered before this window is rendered; but
//               sometimes this isn't sufficiently early, especially
//               if other buffers also have a view into the same
//               scene.
//
//               If you specify a value here, then new buffers created
//               via make_texture_buffer() will be given that sort
//               value instead of get_sort() - 1.
////////////////////////////////////////////////////////////////////
59
inline void GraphicsOutput::set_child_sort(int child_sort);

1058 16 clear_child_sort 0 4 1251 32 GraphicsOutput::clear_child_sort 0 1 437 390
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_child_sort
//       Access: Published
//  Description: Resets the sort value of future offscreen buffers
//               created by make_texture_sort() to the default value.
//               See set_child_sort().
////////////////////////////////////////////////////////////////////
51
inline void GraphicsOutput::clear_child_sort(void);

1059 14 get_child_sort 0 4 1251 30 GraphicsOutput::get_child_sort 0 1 438 351
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_child_sort
//       Access: Published
//  Description: Returns the sort value of future offscreen buffers
//               created by make_texture_sort(). See set_child_sort().
////////////////////////////////////////////////////////////////////
54
inline int GraphicsOutput::get_child_sort(void) const;

1060 12 trigger_copy 0 4 1251 28 GraphicsOutput::trigger_copy 0 1 439 376
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::trigger_copy
//       Access: Published
//  Description: When the GraphicsOutput is in triggered copy mode,
//               this function triggers the copy (at the end of the
//               next frame).
////////////////////////////////////////////////////////////////////
47
inline void GraphicsOutput::trigger_copy(void);

1061 19 make_display_region 0 4 1251 35 GraphicsOutput::make_display_region 0 3 440 441 442 2126
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
////////////////////////////////////////////////////////////////////
241
inline DisplayRegion *GraphicsOutput::make_display_region(void);
inline DisplayRegion *GraphicsOutput::make_display_region(float l, float r, float b, float t);
DisplayRegion *GraphicsOutput::make_display_region(LVecBase4f const &dimensions);

1062 24 make_mono_display_region 0 4 1251 40 GraphicsOutput::make_mono_display_region 0 3 443 444 445 2283
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
////////////////////////////////////////////////////////////////////
256
inline DisplayRegion *GraphicsOutput::make_mono_display_region(void);
inline DisplayRegion *GraphicsOutput::make_mono_display_region(float l, float r, float b, float t);
DisplayRegion *GraphicsOutput::make_mono_display_region(LVecBase4f const &dimensions);

1063 26 make_stereo_display_region 0 4 1251 42 GraphicsOutput::make_stereo_display_region 0 3 446 447 448 1371
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
////////////////////////////////////////////////////////////////////
280
inline StereoDisplayRegion *GraphicsOutput::make_stereo_display_region(void);
inline StereoDisplayRegion *GraphicsOutput::make_stereo_display_region(float l, float r, float b, float t);
StereoDisplayRegion *GraphicsOutput::make_stereo_display_region(LVecBase4f const &dimensions);

1064 21 remove_display_region 0 4 1251 37 GraphicsOutput::remove_display_region 0 1 449 492
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_display_region
//       Access: Published
//  Description: Removes the indicated DisplayRegion from the window,
//               and destructs it if there are no other references.
//
//               Returns true if the DisplayRegion is found and
//               removed, false if it was not a part of the window.
////////////////////////////////////////////////////////////////////
74
bool GraphicsOutput::remove_display_region(DisplayRegion *display_region);

1065 26 remove_all_display_regions 0 4 1251 42 GraphicsOutput::remove_all_display_regions 0 1 450 359
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_all_display_regions
//       Access: Published
//  Description: Removes all display regions from the window, except
//               the default one that is created with the window.
////////////////////////////////////////////////////////////////////
54
void GraphicsOutput::remove_all_display_regions(void);

1066 26 get_overlay_display_region 0 4 1251 42 GraphicsOutput::get_overlay_display_region 0 1 451 951
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_overlay_display_region
//       Access: Published
//  Description: Returns the special "overlay" DisplayRegion that is
//               created for each window or buffer.  This
//               DisplayRegion covers the entire window, but cannot be
//               used for rendering.  It is a placeholder only, to
//               indicate the dimensions of the window, and is usually
//               used internally for purposes such as clearing the
//               window, or grabbing a screenshot of the window.
//
//               There are very few applications that require access
//               to this DisplayRegion.  Normally, you should create
//               your own DisplayRegion that covers the window, if you
//               want to render to the window.
////////////////////////////////////////////////////////////////////
77
inline DisplayRegion *GraphicsOutput::get_overlay_display_region(void) const;

1067 26 set_overlay_display_region 0 4 1251 42 GraphicsOutput::set_overlay_display_region 0 1 452 1132
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_overlay_display_region
//       Access: Published
//  Description: Replaces the special "overlay" DisplayRegion that is
//               created for each window or buffer.  See
//               get_overlay_display_region().  This must be a new
//               DisplayRegion that has already been created for this
//               window, for instance via a call to
//               make_mono_display_region().  You are responsible for
//               ensuring that the new DisplayRegion covers the entire
//               window.  The previous overlay display region is not
//               automatically removed; you must explicitly call
//               remove_display_region() on it after replacing it with
//               this method, if you wish it to be removed.
//
//               Normally, there is no reason to change the overlay
//               DisplayRegion, so this method should be used only
//               in very unusual circumstances.
////////////////////////////////////////////////////////////////////
79
void GraphicsOutput::set_overlay_display_region(DisplayRegion *display_region);

1068 23 get_num_display_regions 0 4 1251 39 GraphicsOutput::get_num_display_regions 0 1 453 355
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_display_regions
//       Access: Published
//  Description: Returns the number of DisplayRegions that have
//               been created within the window, active or otherwise.
////////////////////////////////////////////////////////////////////
56
int GraphicsOutput::get_num_display_regions(void) const;

1069 18 get_display_region 0 4 1251 34 GraphicsOutput::get_display_region 0 1 454 542
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_display_region
//       Access: Published
//  Description: Returns the nth DisplayRegion of those that have been
//               created within the window.  This may return NULL if n
//               is out of bounds; particularly likely if the number
//               of display regions has changed since the last call to
//               get_num_display_regions().
////////////////////////////////////////////////////////////////////
75
PointerTo< DisplayRegion > GraphicsOutput::get_display_region(int n) const;

1070 30 get_num_active_display_regions 0 4 1251 46 GraphicsOutput::get_num_active_display_regions 0 1 455 348
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_active_display_regions
//       Access: Published
//  Description: Returns the number of active DisplayRegions that have
//               been created within the window.
////////////////////////////////////////////////////////////////////
63
int GraphicsOutput::get_num_active_display_regions(void) const;

1071 25 get_active_display_region 0 4 1251 41 GraphicsOutput::get_active_display_region 0 1 456 563
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_active_display_region
//       Access: Published
//  Description: Returns the nth active DisplayRegion of those that
//               have been created within the window.  This may return
//               NULL if n is out of bounds; particularly likely if
//               the number of display regions has changed since the
//               last call to get_num_active_display_regions().
////////////////////////////////////////////////////////////////////
82
PointerTo< DisplayRegion > GraphicsOutput::get_active_display_region(int n) const;

1072 19 make_texture_buffer 0 4 1251 35 GraphicsOutput::make_texture_buffer 0 4 457 458 459 460 1790
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window().
////////////////////////////////////////////////////////////////////
203
GraphicsOutput *GraphicsOutput::make_texture_buffer(basic_string< char > const &name, int x_size, int y_size, Texture *tex = ((void *)(0)), bool to_ram = (0), FrameBufferProperties *fbp = ((void *)(0)));

1073 13 make_cube_map 0 4 1251 29 GraphicsOutput::make_cube_map 0 4 461 462 463 464 1206
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
////////////////////////////////////////////////////////////////////
244
GraphicsOutput *GraphicsOutput::make_cube_map(basic_string< char > const &name, int size, NodePath &camera_rig, BitMask< unsigned int, 32 > camera_mask = ((get_all_camera_mask())), bool to_ram = (0), FrameBufferProperties *fbp = ((void *)(0)));

1074 24 make_screenshot_filename 0 4 1251 40 GraphicsOutput::make_screenshot_filename 0 2 465 466 806
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_screenshot_filename
//       Access: Published, Static
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The default filename is
//               generated from the supplied prefix and from the
//               Config variable screenshot-filename, which contains
//               the following strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
////////////////////////////////////////////////////////////////////
117
static inline Filename GraphicsOutput::make_screenshot_filename(basic_string< char > const &prefix = ("screenshot"));

1075 23 save_screenshot_default 0 4 1251 39 GraphicsOutput::save_screenshot_default 0 2 467 468 471
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
////////////////////////////////////////////////////////////////////
109
inline Filename GraphicsOutput::save_screenshot_default(basic_string< char > const &prefix = ("screenshot"));

1076 15 save_screenshot 0 4 1251 31 GraphicsOutput::save_screenshot 0 2 469 470 600
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  The image comment is an optional user
//               readable string that will be saved with the header
//               of the image (if the file format supports embedded
//               data; for example jpg allows comments).  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////
120
inline bool GraphicsOutput::save_screenshot(Filename const &filename, basic_string< char > const &image_comment = (""));

1077 14 get_screenshot 0 4 1251 30 GraphicsOutput::get_screenshot 0 2 471 472 774
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer and returns it as Texture, or NULL on
//               failure.
////////////////////////////////////////////////////////////////////
126
inline bool GraphicsOutput::get_screenshot(PNMImage &image);
inline PointerTo< Texture > GraphicsOutput::get_screenshot(void);

1078 16 get_texture_card 0 4 1251 32 GraphicsOutput::get_texture_card 0 1 473 959
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_card
//       Access: Published
//  Description: Returns a PandaNode containing a square polygon.
//               The dimensions are (-1,0,-1) to (1,0,1). The texture
//               coordinates are such that the texture of this
//               GraphicsOutput is aligned properly to the polygon.
//               The GraphicsOutput promises to surgically update
//               the Geom inside the PandaNode if necessary to maintain
//               this invariant.
//
//               Each invocation of this function returns a freshly-
//               allocated PandaNode.  You can therefore safely modify
//               the RenderAttribs of the PandaNode.  The
//               PandaNode is initially textured with the texture
//               of this GraphicOutput.
////////////////////////////////////////////////////////////////////
48
NodePath GraphicsOutput::get_texture_card(void);

1079 18 share_depth_buffer 0 6 1251 34 GraphicsOutput::share_depth_buffer 0 1 474 386
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::share_depth_buffer
//       Access: Published, Virtual
//  Description: Will attempt to use the depth buffer of the input
//               graphics_output. The buffer sizes must be exactly
//               the same.
////////////////////////////////////////////////////////////////////
81
virtual bool GraphicsOutput::share_depth_buffer(GraphicsOutput *graphics_output);

1080 20 unshare_depth_buffer 0 6 1251 36 GraphicsOutput::unshare_depth_buffer 0 1 475 282
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::unshare_depth_buffer
//       Access: Published, Virtual
//  Description: Discontinue sharing the depth buffer.
////////////////////////////////////////////////////////////////////
56
virtual void GraphicsOutput::unshare_depth_buffer(void);

1081 27 get_supports_render_texture 0 6 1251 43 GraphicsOutput::get_supports_render_texture 0 1 476 477
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_supports_render_texture
//       Access: Published, Virtual
//  Description: Returns true if this particular GraphicsOutput can
//               render directly into a texture, or false if it must
//               always copy-to-texture at the end of each frame to
//               achieve this effect.
////////////////////////////////////////////////////////////////////
69
virtual bool GraphicsOutput::get_supports_render_texture(void) const;

1082 10 flip_ready 0 6 1251 26 GraphicsOutput::flip_ready 0 1 477 497
// These are not intended to be called directly by the user, but
// they're published anyway since they might occasionally be useful
// for low-level debugging.

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::flip_ready
//       Access: Published, Virtual
//  Description: Returns true if a frame has been rendered and needs
//               to be flipped, false otherwise.
////////////////////////////////////////////////////////////////////
52
virtual bool GraphicsOutput::flip_ready(void) const;

1083 8 get_host 0 6 1251 24 GraphicsOutput::get_host 0 1 478 664
// These are not intended to be called directly by the user, but
// they're published anyway since they might occasionally be useful
// for low-level debugging.

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_host
//       Access: Published, Virtual
//  Description: This is normally called only from within
//               make_texture_buffer().  When called on a
//               ParasiteBuffer, it returns the host of that buffer;
//               but when called on some other buffer, it returns the
//               buffer itself.
////////////////////////////////////////////////////////////////////
55
virtual GraphicsOutput *GraphicsOutput::get_host(void);

1084 14 get_class_type 0 4 1251 30 GraphicsOutput::get_class_type 0 1 479 0
55
static TypeHandle GraphicsOutput::get_class_type(void);

1085 26 ~GraphicsWindowInputDevice 0 4 1255 53 GraphicsWindowInputDevice::~GraphicsWindowInputDevice 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
GraphicsWindowInputDevice::~GraphicsWindowInputDevice(void);

1086 11 button_down 0 4 1255 38 GraphicsWindowInputDevice::button_down 0 2 484 485 406
// The following interface is for the various kinds of
// GraphicsWindows to record the data incoming on the device.

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_down
//       Access: Public
//  Description: Records that the indicated button has been depressed.
////////////////////////////////////////////////////////////////////
125
void GraphicsWindowInputDevice::button_down(ButtonHandle button, double time = ((((get_global_clock())->get_frame_time)())));

1087 18 button_resume_down 0 4 1255 45 GraphicsWindowInputDevice::button_resume_down 0 2 486 487 583
// The following interface is for the various kinds of
// GraphicsWindows to record the data incoming on the device.

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_resume_down
//       Access: Public
//  Description: Records that the indicated button was depressed
//               earlier, and we only just detected the event after
//               the fact.  This is mainly useful for tracking the
//               state of modifier keys.
////////////////////////////////////////////////////////////////////
132
void GraphicsWindowInputDevice::button_resume_down(ButtonHandle button, double time = ((((get_global_clock())->get_frame_time)())));

1088 9 button_up 0 4 1255 36 GraphicsWindowInputDevice::button_up 0 2 488 489 285
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_up
//       Access: Public
//  Description: Records that the indicated button has been released.
////////////////////////////////////////////////////////////////////
123
void GraphicsWindowInputDevice::button_up(ButtonHandle button, double time = ((((get_global_clock())->get_frame_time)())));

1089 9 keystroke 0 4 1255 36 GraphicsWindowInputDevice::keystroke 0 2 490 491 306
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::keystroke
//       Access: Public
//  Description: Records that the indicated keystroke has been
//               generated.
////////////////////////////////////////////////////////////////////
115
void GraphicsWindowInputDevice::keystroke(int keycode, double time = ((((get_global_clock())->get_frame_time)())));

1090 9 candidate 0 4 1255 36 GraphicsWindowInputDevice::candidate 0 1 492 463
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::candidate
//       Access: Public
//  Description: Records that the indicated candidate string has been
//               highlighted.  This is used to implement IME support
//               for typing in international languages, especially
//               Chinese/Japanese/Korean.
////////////////////////////////////////////////////////////////////
174
void GraphicsWindowInputDevice::candidate(basic_string< wchar_t > const &candidate_string, unsigned int highlight_start, unsigned int highlight_end, unsigned int cursor_pos);

1091 10 focus_lost 0 4 1255 37 GraphicsWindowInputDevice::focus_lost 0 2 493 494 668
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::focus_lost
//       Access: Public
//  Description: This should be called when the window focus is lost,
//               so that we may miss upcoming button events
//               (especially "up" events) for the next period of time.
//               It generates keyboard and mouse "up" events for those
//               buttons that we previously sent unpaired "down"
//               events, so that the Panda application will believe
//               all buttons are now released.
////////////////////////////////////////////////////////////////////
103
void GraphicsWindowInputDevice::focus_lost(double time = ((((get_global_clock())->get_frame_time)())));

1092 15 raw_button_down 0 4 1255 42 GraphicsWindowInputDevice::raw_button_down 0 2 495 496 292
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_down
//       Access: Public
//  Description: Records that the indicated button has been depressed.
////////////////////////////////////////////////////////////////////
129
void GraphicsWindowInputDevice::raw_button_down(ButtonHandle button, double time = ((((get_global_clock())->get_frame_time)())));

1093 13 raw_button_up 0 4 1255 40 GraphicsWindowInputDevice::raw_button_up 0 2 497 498 289
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_up
//       Access: Public
//  Description: Records that the indicated button has been released.
////////////////////////////////////////////////////////////////////
127
void GraphicsWindowInputDevice::raw_button_up(ButtonHandle button, double time = ((((get_global_clock())->get_frame_time)())));

1094 21 set_pointer_in_window 0 4 1255 48 GraphicsWindowInputDevice::set_pointer_in_window 0 2 499 500 413
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_in_window
//       Access: Public
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is within the window, at
//               the given pixel coordinates.
////////////////////////////////////////////////////////////////////
141
inline void GraphicsWindowInputDevice::set_pointer_in_window(double x, double y, double time = ((((get_global_clock())->get_frame_time)())));

1095 25 set_pointer_out_of_window 0 4 1255 52 GraphicsWindowInputDevice::set_pointer_out_of_window 0 2 501 502 395
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_out_of_window
//       Access: Public
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is no longer within the
//               window.
////////////////////////////////////////////////////////////////////
125
inline void GraphicsWindowInputDevice::set_pointer_out_of_window(double time = ((((get_global_clock())->get_frame_time)())));

1096 11 set_pointer 0 4 1255 38 GraphicsWindowInputDevice::set_pointer 0 1 503 281
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer
//       Access: Public
//  Description: Records that a mouse movement has taken place.
////////////////////////////////////////////////////////////////////
89
void GraphicsWindowInputDevice::set_pointer(bool inwin, double x, double y, double time);

1097 5 get_x 0 4 1256 16 TouchInfo::get_x 0 1 504 0
27
int TouchInfo::get_x(void);

1098 5 get_y 0 4 1256 16 TouchInfo::get_y 0 1 505 0
27
int TouchInfo::get_y(void);

1099 6 get_id 0 4 1256 17 TouchInfo::get_id 0 1 506 0
28
int TouchInfo::get_id(void);

1100 9 get_flags 0 4 1256 20 TouchInfo::get_flags 0 1 507 0
31
int TouchInfo::get_flags(void);

1101 10 ~TouchInfo 0 4 1256 21 TouchInfo::~TouchInfo 0 0 0
28
TouchInfo::~TouchInfo(void);

1102 8 get_hwnd 0 4 1258 40 GraphicsWindowProcCallbackData::get_hwnd 0 1 508 280
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_hwnd
//       Access: Published
//  Description: Returns the Windows proc hwnd parameter.
////////////////////////////////////////////////////////////////////
64
inline int GraphicsWindowProcCallbackData::get_hwnd(void) const;

1103 7 get_msg 0 4 1258 39 GraphicsWindowProcCallbackData::get_msg 0 1 509 278
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_msg
//       Access: Published
//  Description: Returns the Windows proc msg parameter.
////////////////////////////////////////////////////////////////////
63
inline int GraphicsWindowProcCallbackData::get_msg(void) const;

1104 10 get_wparam 0 4 1258 42 GraphicsWindowProcCallbackData::get_wparam 0 1 510 284
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_wparam
//       Access: Published
//  Description: Returns the Windows proc wparam parameter.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsWindowProcCallbackData::get_wparam(void) const;

1105 10 get_lparam 0 4 1258 42 GraphicsWindowProcCallbackData::get_lparam 0 1 511 284
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_lparam
//       Access: Published
//  Description: Returns the Windows proc lparam parameter.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsWindowProcCallbackData::get_lparam(void) const;

1106 14 is_touch_event 0 4 1258 46 GraphicsWindowProcCallbackData::is_touch_event 0 1 512 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::is_touch_event
//       Access: Public, Virtual
//  Description: Returns whether the event is a touch event.
//               
////////////////////////////////////////////////////////////////////
58
bool GraphicsWindowProcCallbackData::is_touch_event(void);

1107 15 get_num_touches 0 4 1258 47 GraphicsWindowProcCallbackData::get_num_touches 0 1 513 323
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_num_touches
//       Access: Public, Virtual
//  Description: Returns the current number of touches on the window.
//               
////////////////////////////////////////////////////////////////////
58
int GraphicsWindowProcCallbackData::get_num_touches(void);

1108 14 get_touch_info 0 4 1258 46 GraphicsWindowProcCallbackData::get_touch_info 0 1 514 330
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_touch_info
//       Access: Public, Virtual
//  Description: Returns the TouchInfo object describing the specified touch.
//               
////////////////////////////////////////////////////////////////////
68
TouchInfo GraphicsWindowProcCallbackData::get_touch_info(int index);

1109 14 get_class_type 0 4 1258 46 GraphicsWindowProcCallbackData::get_class_type 0 1 515 0
71
static TypeHandle GraphicsWindowProcCallbackData::get_class_type(void);

1110 31 ~GraphicsWindowProcCallbackData 0 4 1258 63 GraphicsWindowProcCallbackData::~GraphicsWindowProcCallbackData 0 0 0
70
GraphicsWindowProcCallbackData::~GraphicsWindowProcCallbackData(void);

1111 14 get_properties 0 4 1260 30 GraphicsWindow::get_properties 0 1 516 275
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_properties
//       Access: Published
//  Description: Returns the current properties of the window.
////////////////////////////////////////////////////////////////////
66
WindowProperties const GraphicsWindow::get_properties(void) const;

1112 24 get_requested_properties 0 4 1260 40 GraphicsWindow::get_requested_properties 0 1 517 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_requested_properties
//       Access: Published
//  Description: Returns the properties of the window that are
//               currently requested.  These properties will be
//               applied to the window (if valid) at the next
//               execution of process_events().
////////////////////////////////////////////////////////////////////
76
WindowProperties const GraphicsWindow::get_requested_properties(void) const;

1113 25 clear_rejected_properties 0 4 1260 41 GraphicsWindow::clear_rejected_properties 0 1 518 346
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::clear_rejected_properties
//       Access: Published
//  Description: Empties the set of failed properties that will be
//               returned by get_rejected_properties().
////////////////////////////////////////////////////////////////////
53
void GraphicsWindow::clear_rejected_properties(void);

1114 23 get_rejected_properties 0 4 1260 39 GraphicsWindow::get_rejected_properties 0 1 519 563
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_rejected_properties
//       Access: Published
//  Description: Returns the set of properties that have recently been
//               requested, but could not be applied to the window for
//               some reason.  This set of properties will remain
//               unchanged until they are changed by a new failed
//               request, or clear_rejected_properties() is called.
////////////////////////////////////////////////////////////////////
69
WindowProperties GraphicsWindow::get_rejected_properties(void) const;

1115 18 request_properties 0 4 1260 34 GraphicsWindow::request_properties 0 1 520 603
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::request_properties
//       Access: Published
//  Description: Requests a property change on the window.  For
//               example, use this method to request a window change
//               size or minimize or something.
//
//               The change is not made immediately; rather, the
//               request is saved and will be applied the next time
//               the window task is run (probably at the next frame).
////////////////////////////////////////////////////////////////////
86
void GraphicsWindow::request_properties(WindowProperties const &requested_properties);

1116 9 is_closed 0 4 1260 25 GraphicsWindow::is_closed 0 1 521 1121
// Filename: graphicsWindow.I
// Created by:  frang (07Mar99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_closed
//       Access: Published
//  Description: Returns true if the window has not yet been opened,
//               or has been fully closed, false if it is open.  The
//               window is not opened immediately after
//               GraphicsEngine::make_window() is called; nor is it
//               closed immediately after
//               GraphicsEngine::remove_window() is called.  Either
//               operation may take a frame or two.
////////////////////////////////////////////////////////////////////
50
inline bool GraphicsWindow::is_closed(void) const;

1117 13 is_fullscreen 0 4 1260 29 GraphicsWindow::is_fullscreen 0 1 522 329
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_fullscreen
//       Access: Published
//  Description: Returns true if the window has been opened as a
//               fullscreen window, false otherwise.
////////////////////////////////////////////////////////////////////
54
inline bool GraphicsWindow::is_fullscreen(void) const;

1118 16 set_window_event 0 4 1260 32 GraphicsWindow::set_window_event 0 1 523 630
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_window_event
//       Access: Published
//  Description: Changes the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.
//
//               By default, all windows have the same window event
//               unless they are explicitly changed.  When the event
//               is generated, it includes one parameter: the window
//               itself.
////////////////////////////////////////////////////////////////////
80
void GraphicsWindow::set_window_event(basic_string< char > const &window_event);

1119 16 get_window_event 0 4 1260 32 GraphicsWindow::get_window_event 0 1 524 421
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_event
//       Access: Published
//  Description: Returns the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.  See set_window_event().
////////////////////////////////////////////////////////////////////
66
basic_string< char > GraphicsWindow::get_window_event(void) const;

1120 23 set_close_request_event 0 4 1260 39 GraphicsWindow::set_close_request_event 0 1 525 1393
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_close_request_event
//       Access: Published
//  Description: Sets the event that is triggered when the user
//               requests to close the window, e.g. via alt-F4, or
//               clicking on the close box.
//
//               The default for each window is for this event to be
//               the empty string, which means the window-close
//               request is handled immediately by Panda (and the
//               window will be closed without the app getting a
//               chance to intervene).  If you set this to a nonempty
//               string, then the window is not closed, but instead
//               the event is thrown.  It is then up to the app to
//               respond appropriately, for instance by presenting an
//               "are you sure?" dialog box, and eventually calling
//               close_window() when the user is sure.
//
//               It is considered poor form to set this string and
//               then not handle the event.  This can frustrate the
//               user by making it difficult for him to cleanly shut
//               down the application (and may force the user to
//               hard-kill the app, or reboot the machine).
////////////////////////////////////////////////////////////////////
94
void GraphicsWindow::set_close_request_event(basic_string< char > const &close_request_event);

1121 23 get_close_request_event 0 4 1260 39 GraphicsWindow::get_close_request_event 0 1 526 515
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_close_request_event
//       Access: Published
//  Description: Returns the name of the event set via
//               set_close_request_event().  If this string is
//               nonempty, then when the user requests to close
//               window, this event will be generated instead.  See
//               set_close_request_event().
////////////////////////////////////////////////////////////////////
73
basic_string< char > GraphicsWindow::get_close_request_event(void) const;

1122 18 set_unexposed_draw 0 4 1260 34 GraphicsWindow::set_unexposed_draw 0 1 527 894
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_unexposed_draw
//       Access: Published
//  Description: If this flag is false, the window is redrawn only
//               after it has received a recent "unexpose" or "draw"
//               event from the underlying windowing systme.  If this
//               flag is true, the window is redrawn every frame
//               regardless.  Setting this false may prevent the
//               window from redrawing unnecessarily when it is
//               hidden, and may play nicer with other windows on the
//               desktop, but may adversely affect frame rate even
//               when the window is fully visible; setting it true will
//               ensure that the window contents are always current.
////////////////////////////////////////////////////////////////////
68
inline void GraphicsWindow::set_unexposed_draw(bool unexposed_draw);

1123 18 get_unexposed_draw 0 4 1260 34 GraphicsWindow::get_unexposed_draw 0 1 528 259
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_unexposed_draw
//       Access: Published
//  Description: See set_unexposed_draw().
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsWindow::get_unexposed_draw(void) const;

1124 17 get_window_handle 0 4 1260 33 GraphicsWindow::get_window_handle 0 1 529 641
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_handle
//       Access: Published
//  Description: Returns the WindowHandle corresponding to this window
//               on the desktop.  This is mainly useful for
//               communicating with external libraries.  Use
//               window_handle->get_os_handle()->get_handle(), or
//               window_handle->get_string_handle(), to get the actual
//               OS-specific window handle object, whatever type that
//               might be.
////////////////////////////////////////////////////////////////////
67
inline WindowHandle *GraphicsWindow::get_window_handle(void) const;

1125 21 get_num_input_devices 0 4 1260 37 GraphicsWindow::get_num_input_devices 0 1 530 626
// Mouse and keyboard routines

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_num_input_devices
//       Access: Published
//  Description: Returns the number of separate input devices
//               associated with the window.  Typically, a window will
//               have exactly one input device: the keyboard/mouse
//               pair.  However, some windows may have no input
//               devices, and others may add additional devices, for
//               instance for a joystick.
////////////////////////////////////////////////////////////////////
54
int GraphicsWindow::get_num_input_devices(void) const;

1126 21 get_input_device_name 0 4 1260 37 GraphicsWindow::get_input_device_name 0 1 531 310
// Mouse and keyboard routines

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_input_device_name
//       Access: Published
//  Description: Returns the name of the nth input device.
////////////////////////////////////////////////////////////////////
77
basic_string< char > GraphicsWindow::get_input_device_name(int device) const;

1127 11 has_pointer 0 4 1260 27 GraphicsWindow::has_pointer 0 1 532 366
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_pointer
//       Access: Published
//  Description: Returns true if the nth input device has a
//               screen-space pointer (for instance, a mouse), false
//               otherwise.
////////////////////////////////////////////////////////////////////
51
bool GraphicsWindow::has_pointer(int device) const;

1128 12 has_keyboard 0 4 1260 28 GraphicsWindow::has_keyboard 0 1 533 314
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_keyboard
//       Access: Published
//  Description: Returns true if the nth input device has a keyboard,
//               false otherwise.
////////////////////////////////////////////////////////////////////
52
bool GraphicsWindow::has_keyboard(int device) const;

1129 16 get_keyboard_map 0 6 1260 32 GraphicsWindow::get_keyboard_map 0 1 534 348
////////////////////////////////////////////////////////////////////
//     Function: x11GraphicsWindow::get_keyboard_map
//       Access: Published, Virtual
//  Description: Returns a ButtonMap containing the association
//               between raw buttons and virtual buttons.
////////////////////////////////////////////////////////////////////
64
virtual ButtonMap *GraphicsWindow::get_keyboard_map(void) const;

1130 21 enable_pointer_events 0 4 1260 37 GraphicsWindow::enable_pointer_events 0 1 535 278
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_events
//       Access: Published
//  Description: Turn on the generation of pointer events.
////////////////////////////////////////////////////////////////////
55
void GraphicsWindow::enable_pointer_events(int device);

1131 22 disable_pointer_events 0 4 1260 38 GraphicsWindow::disable_pointer_events 0 1 536 280
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: Turn off the generation of pointer events.
////////////////////////////////////////////////////////////////////
56
void GraphicsWindow::disable_pointer_events(int device);

1132 19 enable_pointer_mode 0 4 1260 35 GraphicsWindow::enable_pointer_mode 0 1 537 285
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_mode
//       Access: Published
//  Description: See GraphicsWindowInputDevice::enable_pointer_mode
////////////////////////////////////////////////////////////////////
67
void GraphicsWindow::enable_pointer_mode(int device, double speed);

1133 20 disable_pointer_mode 0 4 1260 36 GraphicsWindow::disable_pointer_mode 0 1 538 289
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: See GraphicsWindowInputDevice::disable_pointer_mode
////////////////////////////////////////////////////////////////////
54
void GraphicsWindow::disable_pointer_mode(int device);

1134 11 get_pointer 0 4 1260 27 GraphicsWindow::get_pointer 0 1 539 471
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_pointer
//       Access: Published
//  Description: Returns the MouseData associated with the nth
//               input device's pointer.  This is deprecated; use
//               get_pointer_device().get_pointer() instead, or for
//               raw mice, use the InputDeviceManager interface.
////////////////////////////////////////////////////////////////////
56
MouseData GraphicsWindow::get_pointer(int device) const;

1135 12 move_pointer 0 6 1260 28 GraphicsWindow::move_pointer 0 1 540 540
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::move_pointer
//       Access: Published, Virtual
//  Description: Forces the pointer to the indicated position within
//               the window, if possible.
//
//               Returns true if successful, false on failure.  This
//               may fail if the mouse is not currently within the
//               window, or if the API doesn't support this operation.
////////////////////////////////////////////////////////////////////
68
virtual bool GraphicsWindow::move_pointer(int device, int x, int y);

1136 9 close_ime 0 6 1260 25 GraphicsWindow::close_ime 0 1 541 274
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::close_ime
//       Access: Published, Virtual
//  Description: Forces the ime window to close if any
//
////////////////////////////////////////////////////////////////////
45
virtual void GraphicsWindow::close_ime(void);

1137 24 add_python_event_handler 0 4 1260 40 GraphicsWindow::add_python_event_handler 0 1 542 343
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::add_custom_event_handler
//       Access: Published
//  Description: Adds a python event handler to be called
//               when a window event occurs.
//               
////////////////////////////////////////////////////////////////////
81
void GraphicsWindow::add_python_event_handler(PyObject *handler, PyObject *name);

1138 27 remove_python_event_handler 0 4 1260 43 GraphicsWindow::remove_python_event_handler 0 1 543 304
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::remove_custom_event_handler
//       Access: Published
//  Description: Removes the specified python event handler.
//               
////////////////////////////////////////////////////////////////////
65
void GraphicsWindow::remove_python_event_handler(PyObject *name);

1139 14 get_class_type 0 4 1260 30 GraphicsWindow::get_class_type 0 1 544 0
55
static TypeHandle GraphicsWindow::get_class_type(void);

1140 10 get_window 0 4 1262 54 CallbackGraphicsWindow::WindowCallbackData::get_window 0 1 557 306
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::WindowCallbackData::get_window
//       Access: Published
//  Description: Returns the window this callback was triggered from.
////////////////////////////////////////////////////////////////////
98
inline CallbackGraphicsWindow *CallbackGraphicsWindow::WindowCallbackData::get_window(void) const;

1141 14 get_class_type 0 4 1262 58 CallbackGraphicsWindow::WindowCallbackData::get_class_type 0 1 558 0
83
static TypeHandle CallbackGraphicsWindow::WindowCallbackData::get_class_type(void);

1142 19 ~WindowCallbackData 0 4 1262 63 CallbackGraphicsWindow::WindowCallbackData::~WindowCallbackData 0 0 0
70
CallbackGraphicsWindow::WindowCallbackData::~WindowCallbackData(void);

1143 14 get_class_type 0 4 1263 58 CallbackGraphicsWindow::EventsCallbackData::get_class_type 0 1 559 0
83
static TypeHandle CallbackGraphicsWindow::EventsCallbackData::get_class_type(void);

1144 19 ~EventsCallbackData 0 4 1263 63 CallbackGraphicsWindow::EventsCallbackData::~EventsCallbackData 0 0 0
70
CallbackGraphicsWindow::EventsCallbackData::~EventsCallbackData(void);

1145 14 get_properties 0 4 1264 62 CallbackGraphicsWindow::PropertiesCallbackData::get_properties 0 1 560 504
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::PropertiesCallbackData::get_properties
//       Access: Published
//  Description: Returns the WindowProperties object that this
//               callback should process.  Any properties that are
//               handled should be removed from this object;
//               properties that are unhandled should be left alone.
////////////////////////////////////////////////////////////////////
100
inline WindowProperties &CallbackGraphicsWindow::PropertiesCallbackData::get_properties(void) const;

1146 14 get_class_type 0 4 1264 62 CallbackGraphicsWindow::PropertiesCallbackData::get_class_type 0 1 561 0
87
static TypeHandle CallbackGraphicsWindow::PropertiesCallbackData::get_class_type(void);

1147 23 ~PropertiesCallbackData 0 4 1264 71 CallbackGraphicsWindow::PropertiesCallbackData::~PropertiesCallbackData 0 0 0
78
CallbackGraphicsWindow::PropertiesCallbackData::~PropertiesCallbackData(void);

1148 17 get_callback_type 0 4 1266 61 CallbackGraphicsWindow::RenderCallbackData::get_callback_type 0 1 562 467
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_callback_type
//       Access: Published
//  Description: Since the render callback is shared for several
//               functions, this method is needed to indicate which
//               particular function is being invoked with this
//               callback.
////////////////////////////////////////////////////////////////////
124
inline CallbackGraphicsWindow::RenderCallbackType CallbackGraphicsWindow::RenderCallbackData::get_callback_type(void) const;

1149 14 get_frame_mode 0 4 1266 58 CallbackGraphicsWindow::RenderCallbackData::get_frame_mode 0 1 563 507
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_frame_mode
//       Access: Published
//  Description: If the callback type (returned by get_callback_type)
//               is RCT_begin_frame or RCT_end_frame, then this method
//               will return the particular frame mode indicating
//               what, precisely, we want to do this frame.
////////////////////////////////////////////////////////////////////
104
inline GraphicsOutput::FrameMode CallbackGraphicsWindow::RenderCallbackData::get_frame_mode(void) const;

1150 15 set_render_flag 0 4 1266 59 CallbackGraphicsWindow::RenderCallbackData::set_render_flag 0 1 564 549
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::set_render_flag
//       Access: Published
//  Description: If the callback type is RCT_begin_frame, this call is
//               available to specify the return value from the
//               begin_frame() call.  If this is true (the default),
//               the frame is rendered normally; if it is false, the
//               frame is omitted.
////////////////////////////////////////////////////////////////////
90
inline void CallbackGraphicsWindow::RenderCallbackData::set_render_flag(bool render_flag);

1151 15 get_render_flag 0 4 1266 59 CallbackGraphicsWindow::RenderCallbackData::get_render_flag 0 1 565 347
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_render_flag
//       Access: Published
//  Description: Returns the current setting of the render flag.  See
//               set_render_flag().
////////////////////////////////////////////////////////////////////
84
inline bool CallbackGraphicsWindow::RenderCallbackData::get_render_flag(void) const;

1152 14 get_class_type 0 4 1266 58 CallbackGraphicsWindow::RenderCallbackData::get_class_type 0 1 566 0
83
static TypeHandle CallbackGraphicsWindow::RenderCallbackData::get_class_type(void);

1153 19 ~RenderCallbackData 0 4 1266 63 CallbackGraphicsWindow::RenderCallbackData::~RenderCallbackData 0 0 0
70
CallbackGraphicsWindow::RenderCallbackData::~RenderCallbackData(void);

1154 19 set_events_callback 0 4 1261 43 CallbackGraphicsWindow::set_events_callback 0 1 545 1327
// Filename: callbackGraphicsWindow.I
// Created by:  drose (06Jan11)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_events_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window is polled for window events, including
//               mouse and keyboard events, as well as window resize
//               events and other system-generated events.
//
//               This callback will receive a
//               CallbackGraphicsWindow::EventsCallbackData.
//
//               This callback should process any system-generated
//               events, and call data->upcall() to process requested
//               property change requests made via
//               request_properties().
////////////////////////////////////////////////////////////////////
80
inline void CallbackGraphicsWindow::set_events_callback(CallbackObject *object);

1155 21 clear_events_callback 0 4 1261 45 CallbackGraphicsWindow::clear_events_callback 0 1 546 331
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_events_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_events_callback().
////////////////////////////////////////////////////////////////////
64
inline void CallbackGraphicsWindow::clear_events_callback(void);

1156 19 get_events_callback 0 4 1261 43 CallbackGraphicsWindow::get_events_callback 0 1 547 299
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_events_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_events_callback().
////////////////////////////////////////////////////////////////////
79
inline CallbackObject *CallbackGraphicsWindow::get_events_callback(void) const;

1157 23 set_properties_callback 0 4 1261 47 CallbackGraphicsWindow::set_properties_callback 0 1 548 1100
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_properties_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window receives a property change request from
//               user code (e.g. via request_properties).
//
//               This callback will receive a
//               CallbackGraphicsWindow::PropertiesCallbackData, which
//               provides a get_properties() method that returns a
//               modifiable reference to a WindowsProperties object.
//               This object will contain only those properties
//               requested by user code.  The callback should handle
//               any of the requests it finds, including and
//               especially set_open(), and remove them from the
//               object when it has handled them.  Any unhandled
//               properties should be left unchanged in the properties
//               object.
////////////////////////////////////////////////////////////////////
84
inline void CallbackGraphicsWindow::set_properties_callback(CallbackObject *object);

1158 25 clear_properties_callback 0 4 1261 49 CallbackGraphicsWindow::clear_properties_callback 0 1 549 339
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_properties_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_properties_callback().
////////////////////////////////////////////////////////////////////
68
inline void CallbackGraphicsWindow::clear_properties_callback(void);

1159 23 get_properties_callback 0 4 1261 47 CallbackGraphicsWindow::get_properties_callback 0 1 550 307
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_properties_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_properties_callback().
////////////////////////////////////////////////////////////////////
83
inline CallbackObject *CallbackGraphicsWindow::get_properties_callback(void) const;

1160 19 set_render_callback 0 4 1261 43 CallbackGraphicsWindow::set_render_callback 0 1 551 702
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_render_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window is invoked (in the draw thread) to render
//               its contents, and/or flip the graphics buffers.
//
//               This callback will actually serve several different
//               functions.  It receivces a RenderCallbackData, and
//               you can query data->get_callback_type() to return the
//               actual function of each particular callback.
////////////////////////////////////////////////////////////////////
80
inline void CallbackGraphicsWindow::set_render_callback(CallbackObject *object);

1161 21 clear_render_callback 0 4 1261 45 CallbackGraphicsWindow::clear_render_callback 0 1 552 331
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_render_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_render_callback().
////////////////////////////////////////////////////////////////////
64
inline void CallbackGraphicsWindow::clear_render_callback(void);

1162 19 get_render_callback 0 4 1261 43 CallbackGraphicsWindow::get_render_callback 0 1 553 299
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_render_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_render_callback().
////////////////////////////////////////////////////////////////////
79
inline CallbackObject *CallbackGraphicsWindow::get_render_callback(void) const;

1163 16 get_input_device 0 4 1261 40 CallbackGraphicsWindow::get_input_device 0 1 554 480
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_input_device
//       Access: Published
//  Description: Returns a writable reference to the nth input device
//               (mouse).  This is intended to be used for the window
//               implementation to record mouse and keyboard input
//               information for the Panda system.
////////////////////////////////////////////////////////////////////
80
GraphicsWindowInputDevice &CallbackGraphicsWindow::get_input_device(int device);

1164 19 create_input_device 0 4 1261 43 CallbackGraphicsWindow::create_input_device 0 1 555 385
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::create_input_device
//       Access: Published
//  Description: Adds a new input device (mouse) to the window with
//               the indicated name.  Returns the index of the new
//               device.
////////////////////////////////////////////////////////////////////
82
int CallbackGraphicsWindow::create_input_device(basic_string< char > const &name);

1165 14 get_class_type 0 4 1261 38 CallbackGraphicsWindow::get_class_type 0 1 556 0
63
static TypeHandle CallbackGraphicsWindow::get_class_type(void);

1166 16 get_cull_handler 0 4 1267 47 DisplayRegionCullCallbackData::get_cull_handler 0 1 567 869
// Filename: displayRegionCullCallbackData.I
// Created by:  drose (14Mar09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_cull_handler
//       Access: Published
//  Description: Returns a pointer to the CullHandler, which accepts
//               each object to be added to the list for drawing.
////////////////////////////////////////////////////////////////////
80
inline CullHandler *DisplayRegionCullCallbackData::get_cull_handler(void) const;

1167 15 get_scene_setup 0 4 1267 46 DisplayRegionCullCallbackData::get_scene_setup 0 1 568 360
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
////////////////////////////////////////////////////////////////////
78
inline SceneSetup *DisplayRegionCullCallbackData::get_scene_setup(void) const;

1168 14 get_class_type 0 4 1267 45 DisplayRegionCullCallbackData::get_class_type 0 1 569 0
70
static TypeHandle DisplayRegionCullCallbackData::get_class_type(void);

1169 30 ~DisplayRegionCullCallbackData 0 4 1267 61 DisplayRegionCullCallbackData::~DisplayRegionCullCallbackData 0 0 0
68
DisplayRegionCullCallbackData::~DisplayRegionCullCallbackData(void);

1170 15 get_cull_result 0 4 1268 46 DisplayRegionDrawCallbackData::get_cull_result 0 1 570 893
// Filename: displayRegionDrawCallbackData.I
// Created by:  drose (13Mar09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_cull_result
//       Access: Published
//  Description: Returns a pointer to the CullResult, the list of
//               CullableObjects that should be drawn in this
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
78
inline CullResult *DisplayRegionDrawCallbackData::get_cull_result(void) const;

1171 15 get_scene_setup 0 4 1268 46 DisplayRegionDrawCallbackData::get_scene_setup 0 1 571 360
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
////////////////////////////////////////////////////////////////////
78
inline SceneSetup *DisplayRegionDrawCallbackData::get_scene_setup(void) const;

1172 14 get_class_type 0 4 1268 45 DisplayRegionDrawCallbackData::get_class_type 0 1 572 0
70
static TypeHandle DisplayRegionDrawCallbackData::get_class_type(void);

1173 30 ~DisplayRegionDrawCallbackData 0 4 1268 61 DisplayRegionDrawCallbackData::~DisplayRegionDrawCallbackData 0 0 0
68
DisplayRegionDrawCallbackData::~DisplayRegionDrawCallbackData(void);

1174 23 DisplaySearchParameters 0 4 1269 48 DisplaySearchParameters::DisplaySearchParameters 0 1 573 236
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
DisplaySearchParameters::DisplaySearchParameters(void);

1175 24 ~DisplaySearchParameters 0 4 1269 49 DisplaySearchParameters::~DisplaySearchParameters 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
DisplaySearchParameters::~DisplaySearchParameters(void);

1176 17 set_minimum_width 0 4 1269 42 DisplaySearchParameters::set_minimum_width 0 1 574 242
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
void DisplaySearchParameters::set_minimum_width(int minimum_width);

1177 17 set_maximum_width 0 4 1269 42 DisplaySearchParameters::set_maximum_width 0 1 575 242
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
void DisplaySearchParameters::set_maximum_width(int maximum_width);

1178 18 set_minimum_height 0 4 1269 43 DisplaySearchParameters::set_minimum_height 0 1 576 243
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void DisplaySearchParameters::set_minimum_height(int minimum_height);

1179 18 set_maximum_height 0 4 1269 43 DisplaySearchParameters::set_maximum_height 0 1 577 243
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void DisplaySearchParameters::set_maximum_height(int maximum_height);

1180 26 set_minimum_bits_per_pixel 0 4 1269 51 DisplaySearchParameters::set_minimum_bits_per_pixel 0 1 578 251
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
85
void DisplaySearchParameters::set_minimum_bits_per_pixel(int minimum_bits_per_pixel);

1181 26 set_maximum_bits_per_pixel 0 4 1269 51 DisplaySearchParameters::set_maximum_bits_per_pixel 0 1 579 251
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
85
void DisplaySearchParameters::set_maximum_bits_per_pixel(int maximum_bits_per_pixel);

1182 8 set_size 0 4 1270 24 GraphicsBuffer::set_size 0 1 580 548
////////////////////////////////////////////////////////////////////
//     Function: GraphicsBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
////////////////////////////////////////////////////////////////////
44
void GraphicsBuffer::set_size(int x, int y);

1183 14 get_class_type 0 4 1270 30 GraphicsBuffer::get_class_type 0 1 581 0
55
static TypeHandle GraphicsBuffer::get_class_type(void);

1184 14 GraphicsEngine 0 4 1271 30 GraphicsEngine::GraphicsEngine 0 2 582 583 448
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::Constructor
//       Access: Published
//  Description: Creates a new GraphicsEngine object.  The Pipeline is
//               normally left to default to NULL, which indicates the
//               global render pipeline, but it may be any Pipeline
//               you choose.
////////////////////////////////////////////////////////////////////
67
GraphicsEngine::GraphicsEngine(Pipeline *pipeline = ((void *)(0)));

1185 19 set_threading_model 0 4 1271 35 GraphicsEngine::set_threading_model 0 1 584 422
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_threading_model
//       Access: Published
//  Description: Specifies how future objects created via make_gsg(),
//               make_buffer(), and make_window() will be threaded.
//               This does not affect any already-created objects.
////////////////////////////////////////////////////////////////////
88
void GraphicsEngine::set_threading_model(GraphicsThreadingModel const &threading_model);

1186 19 get_threading_model 0 4 1271 35 GraphicsEngine::get_threading_model 0 1 585 347
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_threading_model
//       Access: Published
//  Description: Returns the threading model that will be applied to
//               future objects.  See set_threading_model().
////////////////////////////////////////////////////////////////////
71
GraphicsThreadingModel GraphicsEngine::get_threading_model(void) const;

1187 15 get_render_lock 0 4 1271 31 GraphicsEngine::get_render_lock 0 1 586 1010
// Filename: graphicsEngine.I
// Created by:  drose (24Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_render_lock
//       Access: Published
//  Description: Returns a ReMutex object that is held by the
//               GraphicsEngine during the entire call to
//               render_frame().  While you hold this lock you can be
//               confident that no part of the frame will be rendered
//               (at least by the app thread).
////////////////////////////////////////////////////////////////////
66
inline ReMutex const &GraphicsEngine::get_render_lock(void) const;

1188 13 set_auto_flip 0 4 1271 29 GraphicsEngine::set_auto_flip 0 1 587 925
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_auto_flip
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should automatically cause windows to sync and flip
//               as soon as they have finished drawing, rather than
//               waiting for all of the windows to finish drawing
//               first so they can flip together.
//
//               This only affects the timing of when the flip occurs.
//               If this is true (the default), the flip occurs before
//               render_frame() returns.  If this is false, the flip
//               occurs whenever flip_frame() is called, or at the
//               beginning of the next call to render_frame(), if
//               flip_frame() is never called.
////////////////////////////////////////////////////////////////////
58
inline void GraphicsEngine::set_auto_flip(bool auto_flip);

1189 13 get_auto_flip 0 4 1271 29 GraphicsEngine::get_auto_flip 0 1 588 316
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_auto_flip
//       Access: Published
//  Description: Returns the current setting for the auto-flip flag.
//               See set_auto_flip.
////////////////////////////////////////////////////////////////////
54
inline bool GraphicsEngine::get_auto_flip(void) const;

1190 15 set_portal_cull 0 4 1271 31 GraphicsEngine::set_portal_cull 0 1 589 325
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_portal_cull
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should start portal culling
////////////////////////////////////////////////////////////////////
56
inline void GraphicsEngine::set_portal_cull(bool value);

1191 15 get_portal_cull 0 4 1271 31 GraphicsEngine::get_portal_cull 0 1 590 287
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_portal_cull
//       Access: Published
//  Description: Returns the current setting for the portal culling flag.
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsEngine::get_portal_cull(void) const;

1192 18 set_default_loader 0 4 1271 34 GraphicsEngine::set_default_loader 0 1 591 398
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_default_loader
//       Access: Public
//  Description: Sets the Loader object that will be assigned to every
//               GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
////////////////////////////////////////////////////////////////////
63
inline void GraphicsEngine::set_default_loader(Loader *loader);

1193 18 get_default_loader 0 4 1271 34 GraphicsEngine::get_default_loader 0 1 592 410
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_default_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be assigned to
//               every GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
////////////////////////////////////////////////////////////////////
62
inline Loader *GraphicsEngine::get_default_loader(void) const;

1194 11 make_output 0 4 1271 27 GraphicsEngine::make_output 0 3 593 594 595 760
// THIS IS THE OLD CODE FOR make_gsg
//  PT(GraphicsStateGuardian) gsg = pipe->make_gsg(properties, share_with);
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_output
//       Access: Published
//  Description: Creates a new window (or buffer) and returns it.
//               The GraphicsEngine becomes the owner of the window,
//               it will persist at least until remove_window() is
//               called later.
//
//               If a null pointer is supplied for the gsg, then this
//               routine will create a new gsg.
//               
//               This routine is only called from the app thread.
////////////////////////////////////////////////////////////////////
273
GraphicsOutput *GraphicsEngine::make_output(GraphicsPipe *pipe, basic_string< char > const &name, int sort, FrameBufferProperties const &fb_prop, WindowProperties const &win_prop, int flags, GraphicsStateGuardian *gsg = ((void *)(0)), GraphicsOutput *host = ((void *)(0)));

1195 11 make_buffer 0 4 1271 27 GraphicsEngine::make_buffer 0 2 596 597 1950
// Syntactic shorthand versions of make_output

////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This is the
//               preferred way to create an offscreen buffer, when you
//               already have an onscreen window or another buffer to
//               start with.  For the first parameter, pass an
//               existing GraphicsOutput object, e.g. the main window;
//               this allows the buffer to adapt itself to that
//               window's framebuffer properties, and allows maximum
//               sharing of resources.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This flavor
//               accepts a GSG rather than a GraphicsOutput as the
//               first parameter, which is too limiting and disallows
//               the possibility of creating a ParasiteBuffer if the
//               user's graphics hardware prefers that.  It also
//               attempts to request specific framebuffer properties
//               and may therefore do a poorer job of sharing the GSG
//               between the old buffer and the new.
//
//               For these reasons, this variant is a poor choice
//               unless you are creating an offscreen buffer for the
//               first time, without an onscreen window already in
//               existence.  If you already have an onscreen window,
//               you should use the other flavor of make_buffer()
//               instead, which accepts a GraphicsOutput as the first
//               parameter.
////////////////////////////////////////////////////////////////////
289
inline GraphicsOutput *GraphicsEngine::make_buffer(GraphicsOutput *host, basic_string< char > const &name, int sort, int x_size, int y_size);
inline GraphicsOutput *GraphicsEngine::make_buffer(GraphicsStateGuardian *gsg, basic_string< char > const &name, int sort, int x_size, int y_size);

1196 13 make_parasite 0 4 1271 29 GraphicsEngine::make_parasite 0 1 598 265
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_parasite
//       Access: Published
//  Description: Syntactic shorthand for make_buffer.
////////////////////////////////////////////////////////////////////
143
inline GraphicsOutput *GraphicsEngine::make_parasite(GraphicsOutput *host, basic_string< char > const &name, int sort, int x_size, int y_size);

1197 13 remove_window 0 4 1271 29 GraphicsEngine::remove_window 0 1 599 1357
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_window
//       Access: Published
//  Description: Removes the indicated window or offscreen buffer from
//               the set of windows that will be processed when
//               render_frame() is called.  This also closes the
//               window if it is open, and removes the window from its
//               GraphicsPipe, allowing the window to be destructed if
//               there are no other references to it.  (However, the
//               window may not be actually closed until next frame,
//               if it is controlled by a sub-thread.)
//
//               The return value is true if the window was removed,
//               false if it was not found.
//
//               Unlike remove_all_windows(), this function does not
//               terminate any of the threads that may have been
//               started to service this window; they are left running
//               (since you might open a new window later on these
//               threads).  If your intention is to clean up before
//               shutting down, it is better to call
//               remove_all_windows() then to call remove_window() one
//               at a time.
////////////////////////////////////////////////////////////////////
59
bool GraphicsEngine::remove_window(GraphicsOutput *window);

1198 18 remove_all_windows 0 4 1271 34 GraphicsEngine::remove_all_windows 0 1 600 412
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_all_windows
//       Access: Published
//  Description: Removes and closes all windows from the engine.  This
//               also cleans up and terminates any threads that have
//               been started to service those windows.
////////////////////////////////////////////////////////////////////
46
void GraphicsEngine::remove_all_windows(void);

1199 17 reset_all_windows 0 4 1271 33 GraphicsEngine::reset_all_windows 0 1 601 466
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::reset_all_windows
//       Access: Published
//  Description: Resets the framebuffer of the current window.  This
//               is currently used by DirectX 8 only. It calls a
//               reset_window function on each active window to 
//               release/create old/new framebuffer
////////////////////////////////////////////////////////////////////
55
void GraphicsEngine::reset_all_windows(bool swapchain);

1200 8 is_empty 0 4 1271 24 GraphicsEngine::is_empty 0 1 602 360
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::is_empty
//       Access: Published
//  Description: Returns true if there are no windows or buffers
//               managed by the engine, false if there is at least
//               one.
////////////////////////////////////////////////////////////////////
42
bool GraphicsEngine::is_empty(void) const;

1201 15 get_num_windows 0 4 1271 31 GraphicsEngine::get_num_windows 0 1 603 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_num_windows
//       Access: Published
//  Description: Returns the number of windows (or buffers) managed by
//               the engine.
////////////////////////////////////////////////////////////////////
48
int GraphicsEngine::get_num_windows(void) const;

1202 10 get_window 0 4 1271 26 GraphicsEngine::get_window 0 1 604 316
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_window
//       Access: Published
//  Description: Returns the nth window or buffers managed by the
//               engine, in sorted order.
////////////////////////////////////////////////////////////////////
56
GraphicsOutput *GraphicsEngine::get_window(int n) const;

1203 12 render_frame 0 4 1271 28 GraphicsEngine::render_frame 0 1 605 334
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::render_frame
//       Access: Published
//  Description: Renders the next frame in all the registered windows,
//               and flips all of the frame buffers.
////////////////////////////////////////////////////////////////////
40
void GraphicsEngine::render_frame(void);

1204 12 open_windows 0 4 1271 28 GraphicsEngine::open_windows 0 1 606 658
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::open_windows
//       Access: Published
//  Description: Fully opens (or closes) any windows that have
//               recently been requested open or closed, without
//               rendering any frames.  It is not necessary to call
//               this explicitly, since windows will be automatically
//               opened or closed when the next frame is rendered, but
//               you may call this if you want your windows now
//               without seeing a frame go by.
////////////////////////////////////////////////////////////////////
40
void GraphicsEngine::open_windows(void);

1205 10 sync_frame 0 4 1271 26 GraphicsEngine::sync_frame 0 1 607 558
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::sync_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing.  The windows are not
//               yet flipped when this returns; see also flip_frame().
//               It is not usually necessary to call this explicitly,
//               unless you need to see the previous frame right away.
////////////////////////////////////////////////////////////////////
38
void GraphicsEngine::sync_frame(void);

1206 10 ready_flip 0 4 1271 26 GraphicsEngine::ready_flip 0 1 608 963
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::ready_flip
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing. Returns when all threads have
//               actually finished drawing, as opposed to 'sync_frame'
//               we seems to return once all draw calls have been submitted.
//               Calling 'flip_frame' after this function should immediately
//               cause a buffer flip.  This function will only work in
//               opengl right now, for all other graphics pipelines it will 
//               simply return immediately.  In opengl it's a bit of a hack:
//               it will attempt to read a single pixel from the frame buffer to
//               force the graphics card to finish drawing before it returns
////////////////////////////////////////////////////////////////////
38
void GraphicsEngine::ready_flip(void);

1207 10 flip_frame 0 4 1271 26 GraphicsEngine::flip_frame 0 1 609 516
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::flip_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing, and then flips all the
//               windows.  It is not usually necessary to call this
//               explicitly, unless you need to see the previous frame
//               right away.
////////////////////////////////////////////////////////////////////
38
void GraphicsEngine::flip_frame(void);

1208 20 extract_texture_data 0 4 1271 36 GraphicsEngine::extract_texture_data 0 1 610 1560
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::extract_texture_data
//       Access: Published
//  Description: Asks the indicated GraphicsStateGuardian to retrieve
//               the texture memory image of the indicated texture and
//               store it in the texture's ram_image field.  The image
//               can then be written to disk via Texture::write(), or
//               otherwise manipulated on the CPU.
//
//               This is useful for retrieving the contents of a
//               texture that has been somehow generated on the
//               graphics card, instead of having been loaded the
//               normal way via Texture::read() or Texture::load().
//               It is particularly useful for getting the data
//               associated with a compressed texture image.
//
//               Since this requires a round-trip to the draw thread,
//               it may require waiting for the current thread to
//               finish rendering if it is called in a multithreaded
//               environment.  However, you can call this several
//               consecutive times on different textures for little
//               additional cost.
//
//               If the texture has not yet been loaded to the GSG in
//               question, it will be loaded immediately.
//
//               The return value is true if the operation is
//               successful, false otherwise.
////////////////////////////////////////////////////////////////////
84
bool GraphicsEngine::extract_texture_data(Texture *tex, GraphicsStateGuardian *gsg);

1209 14 get_global_ptr 0 4 1271 30 GraphicsEngine::get_global_ptr 0 1 611 238
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_global_ptr
//       Access: Published, Static
//  Description: 
////////////////////////////////////////////////////////////////////
60
static GraphicsEngine *GraphicsEngine::get_global_ptr(void);

1210 18 get_num_pipe_types 0 4 1273 41 GraphicsPipeSelection::get_num_pipe_types 0 1 612 382
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_pipe_types
//       Access: Published
//  Description: Returns the number of different types of
//               GraphicsPipes that are available to create through
//               this interface.
////////////////////////////////////////////////////////////////////
58
int GraphicsPipeSelection::get_num_pipe_types(void) const;

1211 13 get_pipe_type 0 4 1273 36 GraphicsPipeSelection::get_pipe_type 0 1 613 323
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_pipe_type
//       Access: Published
//  Description: Returns the nth type of GraphicsPipe available
//               through this interface.
////////////////////////////////////////////////////////////////////
61
TypeHandle GraphicsPipeSelection::get_pipe_type(int n) const;

1212 16 print_pipe_types 0 4 1273 39 GraphicsPipeSelection::print_pipe_types 0 1 614 348
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::print_pipe_types
//       Access: Published
//  Description: Writes a list of the currently known GraphicsPipe
//               types to nout, for the user's information.
////////////////////////////////////////////////////////////////////
57
void GraphicsPipeSelection::print_pipe_types(void) const;

1213 9 make_pipe 0 4 1273 32 GraphicsPipeSelection::make_pipe 0 3 615 616 617 1109
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//
//               If the type is not already defined, this will
//               implicitly load the named module, or if module_name
//               is empty, it will call load_aux_modules().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
////////////////////////////////////////////////////////////////////
231
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_pipe(basic_string< char > const &type_name, basic_string< char > const &module_name = ((string())));
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_pipe(TypeHandle type);

1214 16 make_module_pipe 0 4 1273 39 GraphicsPipeSelection::make_module_pipe 0 1 618 430
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_module_pipe
//       Access: Published
//  Description: Returns a new GraphicsPipe of a type defined by the
//               indicated module.  Returns NULL if the module is not
//               found or does not properly recommend a GraphicsPipe.
////////////////////////////////////////////////////////////////////
107
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_module_pipe(basic_string< char > const &module_name);

1215 17 make_default_pipe 0 4 1273 40 GraphicsPipeSelection::make_default_pipe 0 1 619 426
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_default_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of some arbitrary type.
//               The user may specify a preference using the Configrc
//               file; otherwise, one will be chosen arbitrarily.
////////////////////////////////////////////////////////////////////
73
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_default_pipe(void);

1216 19 get_num_aux_modules 0 4 1273 42 GraphicsPipeSelection::get_num_aux_modules 0 1 620 969
// Filename: graphicsPipeSelection.I
// Created by:  drose (15Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_aux_modules
//       Access: Published
//  Description: Returns the number of display modules that are still
//               to be loaded.  If this is nonzero, then calling
//               load_aux_modules() will likely increase the number of
//               GraphicsPipes available.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsPipeSelection::get_num_aux_modules(void) const;

1217 16 load_aux_modules 0 4 1273 39 GraphicsPipeSelection::load_aux_modules 0 1 621 391
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::load_aux_modules
//       Access: Published
//  Description: Loads all the modules named in the aux-display
//               Configrc variable, making as many graphics pipes as
//               possible available.
////////////////////////////////////////////////////////////////////
51
void GraphicsPipeSelection::load_aux_modules(void);

1218 14 get_global_ptr 0 4 1273 37 GraphicsPipeSelection::get_global_ptr 0 1 622 327
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one global
//               GraphicsPipeSelection object.
////////////////////////////////////////////////////////////////////
81
static inline GraphicsPipeSelection *GraphicsPipeSelection::get_global_ptr(void);

1219 8 make_int 0 4 1274 28 NativeWindowHandle::make_int 0 1 623 607
////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_int
//       Access: Published, Static
//  Description: Constructs a new WindowHandle with an int value,
//               which is understood to be either an HWND or a Window,
//               cast to int.  This method exists for the convenience
//               of Python, which likes to deal with ints; C++ code
//               should use one of the more specific make_x11() or
//               make_win32() methods instead.
////////////////////////////////////////////////////////////////////
83
static PointerTo< WindowHandle > NativeWindowHandle::make_int(unsigned int window);

1220 15 make_subprocess 0 4 1274 35 NativeWindowHandle::make_subprocess 0 1 624 636
////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_subprocess
//       Access: Published, Static
//  Description: Constructs a new WindowHandle that references a
//               SubprocessWindowBuffer read in another process, with
//               the named pipe filename that it uses for
//               communication.
//
//               This is (at present, and maybe always) useful only on
//               the OS X platform, where parenting child windows is
//               particularly problematic.
////////////////////////////////////////////////////////////////////
95
static PointerTo< WindowHandle > NativeWindowHandle::make_subprocess(Filename const &filename);

1221 14 get_class_type 0 4 1274 34 NativeWindowHandle::get_class_type 0 1 625 0
59
static TypeHandle NativeWindowHandle::get_class_type(void);

1222 19 ~NativeWindowHandle 0 4 1274 39 NativeWindowHandle::~NativeWindowHandle 0 0 0
46
NativeWindowHandle::~NativeWindowHandle(void);

1223 8 set_size 0 4 1275 24 ParasiteBuffer::set_size 0 1 626 548
////////////////////////////////////////////////////////////////////
//     Function: ParasiteBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
////////////////////////////////////////////////////////////////////
44
void ParasiteBuffer::set_size(int x, int y);

1224 14 get_class_type 0 4 1275 30 ParasiteBuffer::get_class_type 0 1 627 0
55
static TypeHandle ParasiteBuffer::get_class_type(void);

627
1 14 Dtool_62HUQt0n 0 7 3 1278 0 14 Dtool_62HUQt0n 792 // Filename: graphicsDevice.I
// Created by:  masad (21Jul03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsDevice::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this device is
//               associated with.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1276  
2 14 Dtool_62HUAajD 0 7 4 1280 0 14 Dtool_62HUAajD 0 0 
3 14 Dtool_62HU57GT 0 7 8 1281 630 14 Dtool_62HU57GT 231 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
4 14 Dtool_62HUEoak 0 6 9 1282 0 14 Dtool_62HUEoak 220 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
5 14 Dtool_62HUW2OW 0 6 10 1282 0 14 Dtool_62HUW2OW 244 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
6 14 Dtool_62HUL63J 0 6 11 1282 0 14 Dtool_62HUL63J 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
7 14 Dtool_62HUJxNf 0 6 12 1282 0 14 Dtool_62HUJxNf 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_window_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
8 14 Dtool_62HUdKNm 0 6 13 1282 0 14 Dtool_62HUdKNm 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_total_display_modes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
9 14 Dtool_62HU7GBr 0 6 14 1282 0 14 Dtool_62HU7GBr 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1281  13 display_index 1 1282  
10 14 Dtool_62HUA681 0 6 15 1282 0 14 Dtool_62HUA681 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1281  13 display_index 1 1282  
11 14 Dtool_62HUqZZh 0 6 16 1282 0 14 Dtool_62HUqZZh 251 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1281  13 display_index 1 1282  
12 14 Dtool_62HUi2hP 0 6 17 1282 0 14 Dtool_62HUi2hP 249 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_refresh_rate
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1281  13 display_index 1 1282  
13 14 Dtool_62HUyGxw 0 6 18 1282 0 14 Dtool_62HUyGxw 252 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_fullscreen_only
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1281  13 display_index 1 1282  
14 14 Dtool_62HUpeJW 0 6 19 1282 0 14 Dtool_62HUpeJW 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_shader_model
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
15 14 Dtool_62HUoxc3 0 6 20 1282 0 14 Dtool_62HUoxc3 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_video_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
16 14 Dtool_62HUZQA3 0 6 21 1282 0 14 Dtool_62HUZQA3 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_texture_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
17 14 Dtool_62HUe4Gl 0 4 22 1283 0 14 Dtool_62HUe4Gl 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_memory_information
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
18 14 Dtool_62HUAqOZ 0 6 23 1284 0 14 Dtool_62HUAqOZ 239 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_physical_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
19 14 Dtool_62HUQP7r 0 6 24 1284 0 14 Dtool_62HUQP7r 249 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_physical_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
20 14 Dtool_62HUoWLi 0 6 25 1284 0 14 Dtool_62HUoWLi 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_size
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
21 14 Dtool_62HUjPqP 0 6 26 1284 0 14 Dtool_62HUjPqP 248 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_page_file_size
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
22 14 Dtool_62HUcLl_ 0 6 27 1284 0 14 Dtool_62HUcLl_ 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::_process_virtual_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
23 14 Dtool_62HUWBVB 0 6 28 1284 0 14 Dtool_62HUWBVB 256 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_process_virtual_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
24 14 Dtool_62HUnP9N 0 6 29 1282 0 14 Dtool_62HUnP9N 235 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_memory_load
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
25 14 Dtool_62HUdS18 0 6 30 1284 0 14 Dtool_62HUdS18 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_fault_count
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
26 14 Dtool_62HU0YWh 0 6 31 1284 0 14 Dtool_62HU0YWh 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_process_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
27 14 Dtool_62HUjbme 0 6 32 1284 0 14 Dtool_62HUjbme 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_process_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
28 14 Dtool_62HUMHSZ 0 6 33 1284 0 14 Dtool_62HUMHSZ 239 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_usage
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
29 14 Dtool_62HUG_eO 0 6 34 1284 0 14 Dtool_62HUG_eO 244 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_page_file_usage
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
30 14 Dtool_62HU4Hjq 0 6 35 1282 0 14 Dtool_62HU4Hjq 233 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_vendor_id
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
31 14 Dtool_62HUn_Uq 0 6 36 1282 0 14 Dtool_62HUn_Uq 233 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_device_id
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
32 14 Dtool_62HUd4qN 0 6 37 1282 0 14 Dtool_62HUd4qN 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_product
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
33 14 Dtool_62HU98ah 0 6 38 1282 0 14 Dtool_62HU98ah 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_version
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
34 14 Dtool_62HUEIx3 0 6 39 1282 0 14 Dtool_62HUEIx3 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_sub_version
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
35 14 Dtool_62HUdf2J 0 6 40 1282 0 14 Dtool_62HUdf2J 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_build
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
36 14 Dtool_62HUsddI 0 6 41 1282 0 14 Dtool_62HUsddI 241 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_month
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
37 14 Dtool_62HUNaoh 0 6 42 1282 0 14 Dtool_62HUNaoh 239 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_day
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
38 14 Dtool_62HURGMj 0 6 43 1282 0 14 Dtool_62HURGMj 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_year
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
39 14 Dtool_62HU7M2V 0 6 44 1282 0 14 Dtool_62HU7M2V 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_version
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
40 14 Dtool_62HUvm4k 0 6 45 1282 0 14 Dtool_62HUvm4k 312 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_size
//       Access: Published
//  Description: Returns the number of 32-bit values for cpu id 
//               binary data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
41 14 Dtool_62HUnIiL 0 6 46 1285 0 14 Dtool_62HUnIiL 309 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_data
//       Access: Published
//  Description: Returns part of cpu id binary data based on the 
//               index.  
//////////////////////////////////////////////////////////////////// 2 4 this 3 1281  5 index 1 1282  
42 14 Dtool_62HUBjkL 0 6 47 1286 0 14 Dtool_62HUBjkL 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_vendor_string
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
43 14 Dtool_62HUNBT4 0 6 48 1286 0 14 Dtool_62HUNBT4 241 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_string
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
44 14 Dtool_62HUfeql 0 6 49 1285 0 14 Dtool_62HUfeql 248 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_version_information
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
45 14 Dtool_62HUxetr 0 6 50 1285 0 14 Dtool_62HUxetr 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_index
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
46 14 Dtool_62HUjBN9 0 6 51 1284 0 14 Dtool_62HUjBN9 237 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
47 14 Dtool_62HUJ5pR 0 6 52 1284 0 14 Dtool_62HUJ5pR 232 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_time
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
48 14 Dtool_62HUqY3j 0 6 53 1284 0 14 Dtool_62HUqY3j 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
49 14 Dtool_62HUhC2a 0 6 54 1284 0 14 Dtool_62HUhC2a 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_current_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
50 14 Dtool_62HUxW8u 0 4 55 1283 0 14 Dtool_62HUxW8u 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1281  16 processor_number 1 1282  
51 14 Dtool_62HUmQxl 0 6 56 1282 0 14 Dtool_62HUmQxl 405 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_cpu_cores
//       Access: Published
//  Description: Returns the number of individual CPU cores in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts once here.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
52 14 Dtool_62HUqBds 0 6 57 1282 0 14 Dtool_62HUqBds 411 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_logical_cpus
//       Access: Published
//  Description: Returns the number of logical CPU's in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts as two or more here.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
53 14 Dtool_62HU77jF 0 6 58 1282 0 14 Dtool_62HU77jF 263 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_major
//       Access: Published
//  Description: Returns -1 if not set. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
54 14 Dtool_62HUd4bE 0 6 59 1282 0 14 Dtool_62HUd4bE 263 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_minor
//       Access: Published
//  Description: Returns -1 if not set. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
55 14 Dtool_62HU5OQv 0 6 60 1282 0 14 Dtool_62HU5OQv 263 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_build
//       Access: Published
//  Description: Returns -1 if not set. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
56 14 Dtool_62HUJqzm 0 6 61 1282 0 14 Dtool_62HUJqzm 260 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_platform_id
//       Access: Published
//  Description: Returns -1 if not set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1281  
57 14 Dtool_62HUnM8A 0 6 65 1289 0 14 Dtool_62HUnM8A 1182 // Filename: graphicsPipe.I
// Created by:  frang (07Mar99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::is_valid
//       Access: Published
//  Description: Returns false if this pipe is known to be invalid,
//               meaning that an attempt to create a GraphicsWindow
//               with the pipe will certainly fail.  Returns true if
//               the pipe is probably valid (is this case, an attempt
//               to create a GraphicsWindow should succeed, but might
//               still fail).
//
//               Use the GraphicsEngine class to create a
//               GraphicsWindow on a particular pipe.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1287  
58 14 Dtool_62HUpKTv 0 6 66 1282 0 14 Dtool_62HUpKTv 682 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_supported_types
//       Access: Published
//  Description: Returns the mask of bits that represents the kinds of
//               GraphicsOutput objects this pipe might be able to
//               successfully create.  The return value is the union
//               of bits in GraphicsPipe::OutputTypes that represents
//               the set of GraphicsOutput types.
//
//               A 1 bit in a particular position is not a guarantee
//               of success, but a 0 bit is a guarantee of failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1287  
59 14 Dtool_62HUcDZ_ 0 6 67 1289 0 14 Dtool_62HUcDZ_ 766 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::supports_type
//       Access: Published
//  Description: A convenience function to ask if a particular type or
//               types of GraphicsObjects are supported.  The
//               parameter is a union of one or more bits defined in
//               GrpahicsPipe::OutputTypes.
//
//               Returns true if all of the requested types are listed
//               in the supported_types mask, false if any one of them
//               is not.  This is not a guarantee that the indicated
//               output type will successfully be created when it is
//               attempted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1287  5 flags 1 1282  
60 14 Dtool_62HUYv10 0 6 68 1282 0 14 Dtool_62HUYv10 547 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_width
//       Access: Published
//  Description: Returns the width of the entire display, if it is
//               known.  This may return 0.  This is not a guarantee
//               that windows (particularly fullscreen windows) may
//               not be created larger than this width, but it is
//               intended to provide a hint to the application.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1287  
61 14 Dtool_62HUrAPC 0 6 69 1282 0 14 Dtool_62HUrAPC 385 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_height
//       Access: Published
//  Description: Returns the height of the entire display, if it is
//               known.  This may return 0.  See the caveats for
//               get_display_width().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1287  
62 14 Dtool_62HULVZO 0 6 70 1281 0 14 Dtool_62HULVZO 272 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_information
//       Access: Published
//  Description: Gets the pipe's DisplayInformation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1278  
63 14 Dtool_62HUqnn7 0 4 71 1283 0 14 Dtool_62HUqnn7 400 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::lookup_cpu_data
//       Access: Public, Virtual
//  Description: Looks up the detailed CPU information and stores it
//               in _display_information, if supported by the OS.
//               This may take a second or two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1278  
64 14 Dtool_62HUheCd 0 6 72 1286 0 14 Dtool_62HUheCd 0 1 4 this 3 1287  
65 14 Dtool_62HUkM1K 0 7 73 1280 0 14 Dtool_62HUkM1K 0 0 
66 14 Dtool_62HU5_NM 0 4 77 1283 0 14 Dtool_62HU5_NM 523 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the color
//               buffer should be cleared every frame.  If this is
//               true, the color buffer will be cleared to the color
//               indicated by set_clear_color(); otherwise, it will be
//               left alone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1290  18 clear_color_active 1 1289  
67 14 Dtool_62HUQ__5 0 6 78 1289 0 14 Dtool_62HUQ__5 413 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_color_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1291  
68 14 Dtool_62HU_x_a 0 4 79 1283 0 14 Dtool_62HU_x_a 529 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the depth
//               buffer should be cleared every frame.  If this is
//               true, the depth buffer will be cleared to the depth
//               value indicated by set_clear_depth(); otherwise, it
//               will be left alone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1290  18 clear_depth_active 1 1289  
69 14 Dtool_62HUklwI 0 6 80 1289 0 14 Dtool_62HUklwI 413 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the depth buffer should be cleared
//               every frame.  See set_clear_depth_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1291  
70 14 Dtool_62HUcsb8 0 4 81 1283 0 14 Dtool_62HUcsb8 531 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_stencil_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the stencil
//               buffer should be cleared every frame.  If this is
//               true, the stencil buffer will be cleared to the value
//               indicated by set_clear_stencil(); otherwise, it will be
//               left alone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1290  20 clear_stencil_active 1 1289  
71 14 Dtool_62HUSZOl 0 6 82 1289 0 14 Dtool_62HUSZOl 417 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_stencil_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1291  
72 14 Dtool_62HUrSVN 0 4 83 1283 0 14 Dtool_62HUrSVN 535 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color
//       Access: Published
//  Description: Sets the clear color to the indicated value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1290  5 color 1 1293  
73 14 Dtool_62HU4kxz 0 6 84 1293 0 14 Dtool_62HU4kxz 529 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color
//       Access: Published
//  Description: Returns the current clear color value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1291  
74 14 Dtool_62HUw_6X 0 4 85 1283 0 14 Dtool_62HUw_6X 535 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth
//       Access: Published
//  Description: Sets the clear depth to the indicated value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1290  5 depth 1 1296  
75 14 Dtool_62HUMYjC 0 6 86 1296 0 14 Dtool_62HUMYjC 529 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth
//       Access: Published
//  Description: Returns the current clear depth value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1291  
76 14 Dtool_62HUeW2T 0 4 87 1283 0 14 Dtool_62HUeW2T 0 2 4 this 3 1290  7 stencil 1 1285  
77 14 Dtool_62HUsiaD 0 6 88 1285 0 14 Dtool_62HUsiaD 539 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil
//       Access: Published
//  Description: Returns the current clear stencil value.  This is
//               the value that will be used to clear the stencil buffer
//               every frame, but only if get_clear_stencil_active()
//               returns true.  If get_clear_stencil_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1291  
78 14 Dtool_62HU0c6i 0 4 89 1283 0 14 Dtool_62HU0c6i 285 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_active
//       Access: Published, Virtual
//  Description: Sets the clear-active flag for any bitplane.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1290  1 n 1 1282  16 clear_aux_active 1 1289  
79 14 Dtool_62HU2Tq7 0 6 90 1289 0 14 Dtool_62HU2Tq7 285 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_active
//       Access: Published, Virtual
//  Description: Gets the clear-active flag for any bitplane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1291  1 n 1 1282  
80 14 Dtool_62HU4pqk 0 4 91 1283 0 14 Dtool_62HU4pqk 278 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_value
//       Access: Published, Virtual
//  Description: Sets the clear value for any bitplane.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1290  1 n 1 1282  11 clear_value 1 1293  
81 14 Dtool_62HUl3hY 0 6 92 1293 0 14 Dtool_62HUl3hY 281 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_value
//       Access: Published, Virtual
//  Description: Returns the clear value for any bitplane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1291  1 n 1 1282  
82 14 Dtool_62HUtFqI 0 4 93 1283 0 14 Dtool_62HUtFqI 352 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::disable_clears
//       Access: Published, Virtual
//  Description: Disables both the color and depth clear.  See
//               set_clear_color_active and set_clear_depth_active.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1290  
83 14 Dtool_62HU0Gt_ 0 6 94 1289 0 14 Dtool_62HU0Gt_ 461 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::is_any_clear_active
//       Access: Published, Virtual
//  Description: Returns true if any of the clear types (so far there
//               are just color or depth) have been set active, or
//               false if none of them are active and there is no need
//               to clear.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1291  
84 14 Dtool_62HUY3P2 0 4 95 1283 0 14 Dtool_62HUY3P2 1485 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_pixel_zoom
//       Access: Published, Virtual
//  Description: Sets the amount by which the pixels of the region are
//               scaled internally when filling the image interally.
//               Setting this number larger makes the pixels blockier,
//               but may make the rendering faster, particularly for
//               software renderers.  Setting this number to 2.0
//               reduces the number of pixels that have to be filled
//               by the renderer by a factor of 2.0.  It doesn't make
//               sense to set this lower than 1.0.
//
//               It is possible to set this on either individual
//               DisplayRegions or on overall GraphicsWindows, but you
//               will get better performance for setting it on the
//               window rather than its individual DisplayRegions.
//               Also, you may not set it on a DisplayRegion that
//               doesn't have both clear_color() and clear_depth()
//               enabled.
//
//               This property is only supported on renderers for
//               which it is particularly useful--currently, this is
//               the tinydisplay software renderer.  Other kinds of
//               renderers allow you to set this property, but ignore
//               it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1290  10 pixel_zoom 1 1296  
85 14 Dtool_62HUGK1k 0 6 96 1296 0 14 Dtool_62HUGK1k 388 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_zoom
//       Access: Published
//  Description: Returns the value set by set_pixel_zoom(), regardless
//               of whether it is being respected or not.  Also see
//               get_pixel_factor().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1291  
86 14 Dtool_62HULAtt 0 6 97 1296 0 14 Dtool_62HULAtt 650 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_factor
//       Access: Published
//  Description: Returns the amount by which the height and width of
//               the region will be scaled internally, based on the
//               zoom factor set by set_pixel_zoom().  This will
//               return 1.0 if the pixel_zoom was not set or if it is
//               not being respected (for instance, because the
//               underlying renderer doesn't support it--see
//               supports_pixel_zoom).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1291  
87 14 Dtool_62HUi4LW 0 6 98 1289 0 14 Dtool_62HUi4LW 802 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::supports_pixel_zoom
//       Access: Published, Virtual
//  Description: Returns true if a call to set_pixel_zoom() will be
//               respected, false if it will be ignored.  If this
//               returns false, then get_pixel_factor() will always
//               return 1.0, regardless of what value you specify for
//               set_pixel_zoom().
//
//               This may return false if the underlying renderer
//               doesn't support pixel zooming, or if you have called
//               this on a DisplayRegion that doesn't have both
//               set_clear_color() and set_clear_depth() enabled.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1291  
88 14 Dtool_62HUu4KC 0 6 99 1282 0 14 Dtool_62HUu4KC 334 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_renderbuffer_type
//       Access: Static, Published
//  Description: Returns the RenderBuffer::Type that corresponds
//               to a RenderTexturePlane.
//////////////////////////////////////////////////////////////////// 1 5 plane 1 1282  
89 14 Dtool_62HUlE6b 0 7 101 1299 0 14 Dtool_62HUlE6b 229 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1297  
90 14 Dtool_62HUsWhV 0 7 101 1299 0 14 Dtool_62HUsWhV 0 1 9 os_handle 1 1300  
91 14 Dtool_62HULwuM 0 7 102 1300 0 14 Dtool_62HULwuM 321 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_os_handle
//       Access: Published
//  Description: Returns the OS-specific handle stored internally to
//               the WindowHandle wrapper.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1297  
92 14 Dtool_62HUklyc 0 4 103 1283 0 14 Dtool_62HUklyc 321 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::set_os_handle
//       Access: Published
//  Description: Changes the OS-specific handle stored internally to
//               the WindowHandle wrapper.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1299  9 os_handle 1 1300  
93 14 Dtool_62HUBCmq 0 4 104 1283 0 14 Dtool_62HUBCmq 566 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::send_windows_message
//       Access: Published
//  Description: Call this method on a parent WindowHandle to deliver
//               a Windows message to the current child window, if any.
//               This is used in the web plugin system to deliver
//               button events detected directly by the browser system
//               into Panda, which is particularly necessary on Vista.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1299  3 msg 1 1285  6 wparam 1 1282  6 lparam 1 1282  
94 14 Dtool_62HUPIYS 0 6 105 1285 0 14 Dtool_62HUPIYS 397 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_int_handle
//       Access: Published
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1297  
95 14 Dtool_62HUJFbs 0 4 106 1283 0 14 Dtool_62HUJFbs 220 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1297  3 out 1 1301  
96 14 Dtool_62HU21y5 0 7 111 1280 0 14 Dtool_62HU21y5 0 0 
97 14 Dtool_62HUQNL2 0 6 108 1285 0 14 Dtool_62HUQNL2 416 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::get_int_handle
//       Access: Published, Virtual
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1303  
98 14 Dtool_62HUV3Ze 0 4 109 1283 0 14 Dtool_62HUV3Ze 239 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1303  3 out 1 1301  
99 14 Dtool_62HUh_wT 0 7 110 1280 0 14 Dtool_62HUh_wT 0 0 
100 14 Dtool_62HUGNZU 0 7 115 1305 730 14 Dtool_62HUGNZU 228 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
101 14 Dtool_62HUlceF 0 7 115 1305 730 14 Dtool_62HUlceF 725 // Filename: windowProperties.I
// Created by:  drose (13Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1306  
102 14 Dtool_62HUZC_R 0 6 116 1305 0 14 Dtool_62HUZC_R 241 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  4 copy 1 1306  
103 14 Dtool_62HUPD11 0 7 118 1305 730 14 Dtool_62HUPD11 395 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_config_properties
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with all of the
//               default values filled in according to the user's
//               config file.
//////////////////////////////////////////////////////////////////// 0 
104 14 Dtool_62HU1hD1 0 7 119 1305 730 14 Dtool_62HU1hD1 457 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties.  If
//               set_default() has been called, this returns that
//               WindowProperties structure; otherwise, this returns
//               get_config_properties().
//////////////////////////////////////////////////////////////////// 0 
105 14 Dtool_62HUNbiB 0 4 120 1283 0 14 Dtool_62HUNbiB 589 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_default
//       Access: Published, Static
//  Description: Replaces the "default" WindowProperties with the
//               specified structure.  The specified WindowProperties
//               will be returned by future calls to get_default(),
//               until clear_default() is called.
//
//               Note that this completely replaces the default
//               properties; it is not additive.
//////////////////////////////////////////////////////////////////// 1 18 default_properties 1 1306  
106 14 Dtool_62HUDZHK 0 4 121 1283 0 14 Dtool_62HUDZHK 346 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties to whatever
//               is specified in the user's config file.
//////////////////////////////////////////////////////////////////// 0 
107 14 Dtool_62HU7Qam 0 7 122 1305 730 14 Dtool_62HU7Qam 386 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::size
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with only the
//               size specified.  The size is the only property that
//               matters to buffers.
//////////////////////////////////////////////////////////////////// 2 6 x_size 1 1282  6 y_size 1 1282  
108 14 Dtool_62HUgRMD 0 6 123 1289 0 14 Dtool_62HUgRMD 229 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::operator == 
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1306  5 other 1 1306  
109 14 Dtool_62HU_Vsq 0 6 124 1289 0 14 Dtool_62HU_Vsq 228 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1306  5 other 1 1306  
110 14 Dtool_62HUIj6c 0 4 125 1283 0 14 Dtool_62HUIj6c 381 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the WindowProperties structure to its
//               initial empty state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
111 14 Dtool_62HU5Hm3 0 6 126 1289 0 14 Dtool_62HU5Hm3 319 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
112 14 Dtool_62HU_6s1 0 4 127 1283 0 14 Dtool_62HU_6s1 514 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_origin
//       Access: Published
//  Description: Specifies the origin on the screen (in pixels,
//               relative to the top-left corner) at which the window
//               should appear.  This is the origin of the top-left
//               corner of the useful part of the window, not
//               including decorations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1305  8 x_origin 1 1282  8 y_origin 1 1282  
113 14 Dtool_62HUmWEm 0 6 128 1282 0 14 Dtool_62HUmWEm 331 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_origin
//       Access: Published
//  Description: Returns the x coordinate of the window's top-left
//               corner, not including decorations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
114 14 Dtool_62HUjWge 0 6 129 1282 0 14 Dtool_62HUjWge 331 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_origin
//       Access: Published
//  Description: Returns the y coordinate of the window's top-left
//               corner, not including decorations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
115 14 Dtool_62HUeNcv 0 6 130 1289 0 14 Dtool_62HUeNcv 315 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_origin
//       Access: Published
//  Description: Returns true if the window origin has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
116 14 Dtool_62HUJusE 0 4 131 1283 0 14 Dtool_62HUJusE 283 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_origin
//       Access: Published
//  Description: Removes the origin specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
117 14 Dtool_62HU7Ba1 0 4 132 1283 0 14 Dtool_62HU7Ba1 393 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_size
//       Access: Published
//  Description: Specifies the requested size of the window, in
//               pixels.  This is the size of the useful part of the
//               window, not including decorations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1305  6 x_size 1 1282  6 y_size 1 1282  
118 14 Dtool_62HUVfNw 0 6 133 1282 0 14 Dtool_62HUVfNw 401 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_size
//       Access: Published
//  Description: Returns size in pixels in the x dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's width.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
119 14 Dtool_62HUQfpo 0 6 134 1282 0 14 Dtool_62HUQfpo 402 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_size
//       Access: Published
//  Description: Returns size in pixels in the y dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's height.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
120 14 Dtool_62HU04_T 0 6 135 1289 0 14 Dtool_62HU04_T 311 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_size
//       Access: Published
//  Description: Returns true if the window size has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
121 14 Dtool_62HUChuY 0 4 136 1283 0 14 Dtool_62HUChuY 279 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_size
//       Access: Published
//  Description: Removes the size specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
122 14 Dtool_62HUrK49 0 6 137 1289 0 14 Dtool_62HUrK49 232 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_mouse_mode
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
123 14 Dtool_62HUmSWG 0 4 138 1283 0 14 Dtool_62HUmSWG 1074 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_mouse_mode
//       Access: Published
//  Description: Specifies the mode in which the window is to operate
//               its mouse pointer.  The default is M_absolute, which
//               is the normal mode in which a mouse pointer operates;
//               but you can also set M_relative, which is
//               particularly useful for FPS-style mouse movements
//               where you have hidden the mouse pointer and are are
//               more interested in how fast the mouse is moving,
//               rather than precisely where the pointer is hovering.
//
//               This has no effect on Windows, which does not
//               have this concept; but is important to do on OSX
//               and Unix/X11 to properly enable a smooth FPS-style
//               mouselook mode.  On Unix/X11, this requires the
//               Xxf86dga extension to be available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  4 mode 1 1238  
124 14 Dtool_62HUjVO3 0 6 139 1238 0 14 Dtool_62HUjVO3 253 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_mouse_mode
//       Access: Published
//  Description: See set_mouse_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
125 14 Dtool_62HUmyf3 0 4 140 1283 0 14 Dtool_62HUmyf3 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_mouse_mode
//       Access: Published
//  Description: Removes the mouse_mode specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
126 14 Dtool_62HUEtQx 0 4 141 1283 0 14 Dtool_62HUEtQx 302 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_title
//       Access: Published
//  Description: Specifies the title that should be assigned to the
//               window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  5 title 1 1286  
127 14 Dtool_62HULpK6 0 6 142 1286 0 14 Dtool_62HULpK6 254 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_title
//       Access: Published
//  Description: Returns the window's title.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
128 14 Dtool_62HU4p0A 0 6 143 1289 0 14 Dtool_62HU4p0A 313 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_title
//       Access: Published
//  Description: Returns true if the window title has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
129 14 Dtool_62HU2KzX 0 4 144 1283 0 14 Dtool_62HU2KzX 281 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_title
//       Access: Published
//  Description: Removes the title specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
130 14 Dtool_62HU1wGY 0 4 145 1283 0 14 Dtool_62HU1wGY 381 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_undecorated
//       Access: Published
//  Description: Specifies whether the window should be created with a
//               visible title and border (false, the default) or not
//               (true).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  11 undecorated 1 1289  
131 14 Dtool_62HUJtRY 0 6 146 1289 0 14 Dtool_62HUJtRY 274 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_undecorated
//       Access: Published
//  Description: Returns true if the window has no border.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
132 14 Dtool_62HUds7e 0 6 147 1289 0 14 Dtool_62HUds7e 286 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_undecorated
//       Access: Published
//  Description: Returns true if set_undecorated() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
133 14 Dtool_62HU6EZL 0 4 148 1283 0 14 Dtool_62HU6EZL 293 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_undecorated
//       Access: Published
//  Description: Removes the undecorated specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
134 14 Dtool_62HUhxLw 0 4 149 1283 0 14 Dtool_62HUhxLw 310 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fixed_size
//       Access: Published
//  Description: Specifies whether the window should be resizable by
//               the user.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  10 fixed_size 1 1289  
135 14 Dtool_62HUi_y_ 0 6 150 1289 0 14 Dtool_62HUi_y_ 323 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fixed_size
//       Access: Published
//  Description: Returns true if the window cannot be resized by the
//               user, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
136 14 Dtool_62HU7wcF 0 6 151 1289 0 14 Dtool_62HU7wcF 284 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fixed_size
//       Access: Published
//  Description: Returns true if set_fixed_size() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
137 14 Dtool_62HUPwhp 0 4 152 1283 0 14 Dtool_62HUPwhp 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fixed_size
//       Access: Published
//  Description: Removes the fixed_size specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
138 14 Dtool_62HUq0Uu 0 4 153 1283 0 14 Dtool_62HUq0Uu 383 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fullscreen
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               fullscreen mode (true) or normal windowed mode
//               (false, the default).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  10 fullscreen 1 1289  
139 14 Dtool_62HUtz98 0 6 154 1289 0 14 Dtool_62HUtz98 281 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fullscreen
//       Access: Published
//  Description: Returns true if the window is in fullscreen mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
140 14 Dtool_62HUi3nD 0 6 155 1289 0 14 Dtool_62HUi3nD 284 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fullscreen
//       Access: Published
//  Description: Returns true if set_fullscreen() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
141 14 Dtool_62HUwgpW 0 4 156 1283 0 14 Dtool_62HUwgpW 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fullscreen
//       Access: Published
//  Description: Removes the fullscreen specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
142 14 Dtool_62HUpPA6 0 4 157 1283 0 14 Dtool_62HUpPA6 372 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_foreground
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               the foreground (true), or left in the background
//               (false).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  10 foreground 1 1289  
143 14 Dtool_62HUrFnI 0 6 158 1289 0 14 Dtool_62HUrFnI 280 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_foreground
//       Access: Published
//  Description: Returns true if the window is in the foreground.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
144 14 Dtool_62HU7CRP 0 6 159 1289 0 14 Dtool_62HU7CRP 284 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_foreground
//       Access: Published
//  Description: Returns true if set_foreground() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
145 14 Dtool_62HUNghP 0 4 160 1283 0 14 Dtool_62HUNghP 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_foreground
//       Access: Published
//  Description: Removes the foreground specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
146 14 Dtool_62HUJuBm 0 4 161 1283 0 14 Dtool_62HUJuBm 331 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_minimized
//       Access: Published
//  Description: Specifies whether the window should be created
//               minimized (true), or normal (false).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  9 minimized 1 1289  
147 14 Dtool_62HUUuGt 0 6 162 1289 0 14 Dtool_62HUUuGt 271 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_minimized
//       Access: Published
//  Description: Returns true if the window is minimized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
148 14 Dtool_62HUgrwz 0 6 163 1289 0 14 Dtool_62HUgrwz 282 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_minimized
//       Access: Published
//  Description: Returns true if set_minimized() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
149 14 Dtool_62HUNh8v 0 4 164 1283 0 14 Dtool_62HUNh8v 289 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_minimized
//       Access: Published
//  Description: Removes the minimized specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
150 14 Dtool_62HUDYtm 0 4 165 1283 0 14 Dtool_62HUDYtm 310 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_raw_mice
//       Access: Published
//  Description: Specifies whether the window should read the raw
//               mouse devices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  8 raw_mice 1 1289  
151 14 Dtool_62HUjiir 0 6 166 1289 0 14 Dtool_62HUjiir 276 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_raw_mice
//       Access: Published
//  Description: Returns true if the window reads the raw mice.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
152 14 Dtool_62HUTfNy 0 6 167 1289 0 14 Dtool_62HUTfNy 280 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_raw_mice
//       Access: Published
//  Description: Returns true if set_raw_mice() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
153 14 Dtool_62HUm_9h 0 4 168 1283 0 14 Dtool_62HUm_9h 287 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_raw_mice
//       Access: Published
//  Description: Removes the raw_mice specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
154 14 Dtool_62HU0PHZ 0 4 169 1283 0 14 Dtool_62HU0PHZ 417 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_open
//       Access: Published
//  Description: Specifies whether the window should be open.  It is
//               legal to create a GraphicsWindow in the closed state,
//               and later request it to open by changing this flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  4 open 1 1289  
155 14 Dtool_62HUnBqS 0 6 170 1289 0 14 Dtool_62HUnBqS 261 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_open
//       Access: Published
//  Description: Returns true if the window is open.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
156 14 Dtool_62HU3AUZ 0 6 171 1289 0 14 Dtool_62HU3AUZ 272 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_open
//       Access: Published
//  Description: Returns true if set_open() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
157 14 Dtool_62HUXQu6 0 4 172 1283 0 14 Dtool_62HUXQu6 279 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_open
//       Access: Published
//  Description: Removes the open specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
158 14 Dtool_62HUuag3 0 4 173 1283 0 14 Dtool_62HUuag3 288 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_hidden
//       Access: Published
//  Description: Specifies whether the mouse cursor should be visible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  13 cursor_hidden 1 1289  
159 14 Dtool_62HUILMV 0 6 174 1289 0 14 Dtool_62HUILMV 281 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_hidden
//       Access: Published
//  Description: Returns true if the mouse cursor is invisible.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
160 14 Dtool_62HU0O2b 0 6 175 1289 0 14 Dtool_62HU0O2b 290 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_hidden
//       Access: Published
//  Description: Returns true if set_cursor_hidden() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
161 14 Dtool_62HUnQoK 0 4 176 1283 0 14 Dtool_62HUnQoK 297 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_hidden
//       Access: Published
//  Description: Removes the cursor_hidden specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
162 14 Dtool_62HUvab1 0 4 177 1283 0 14 Dtool_62HUvab1 344 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_icon_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the window when it is minimized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  13 icon_filename 1 1308  
163 14 Dtool_62HUaEsZ 0 6 178 1308 0 14 Dtool_62HUaEsZ 288 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_icon_filename
//       Access: Published
//  Description: Returns the icon filename associated with the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
164 14 Dtool_62HUqEWg 0 6 179 1289 0 14 Dtool_62HUqEWg 307 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_icon_filename
//       Access: Published
//  Description: Returns true if set_icon_filename() has been
//               specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
165 14 Dtool_62HUOBF2 0 4 180 1283 0 14 Dtool_62HUOBF2 314 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_icon_filename
//       Access: Published
//  Description: Removes the icon_filename specification from the
//               properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
166 14 Dtool_62HUFBsD 0 4 181 1283 0 14 Dtool_62HUFBsD 391 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the mouse cursor when it is within the
//               window (and visible).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  15 cursor_filename 1 1308  
167 14 Dtool_62HUzq6A 0 6 182 1308 0 14 Dtool_62HUzq6A 313 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_filename
//       Access: Published
//  Description: Returns the icon filename associated with the mouse
//               cursor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
168 14 Dtool_62HUjlkH 0 6 183 1289 0 14 Dtool_62HUjlkH 311 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_filename
//       Access: Published
//  Description: Returns true if set_cursor_filename() has been
//               specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
169 14 Dtool_62HUImNb 0 4 184 1283 0 14 Dtool_62HUImNb 318 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_filename
//       Access: Published
//  Description: Removes the cursor_filename specification from the
//               properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
170 14 Dtool_62HUonGh 0 4 185 1283 0 14 Dtool_62HUonGh 609 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_z_order
//       Access: Published
//  Description: Specifies the relative ordering of the window with
//               respect to other windows.  If the z_order is Z_top,
//               the window will always be on top of other windows; if
//               it is Z_bottom, it will always be below other
//               windows.  Most windows will want to be Z_normal,
//               which allows the user to control the order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  7 z_order 1 1237  
171 14 Dtool_62HU_iJo 0 6 186 1237 0 14 Dtool_62HU_iJo 258 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_z_order
//       Access: Published
//  Description: Returns the window's z_order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
172 14 Dtool_62HUuhzu 0 6 187 1289 0 14 Dtool_62HUuhzu 317 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_z_order
//       Access: Published
//  Description: Returns true if the window z_order has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
173 14 Dtool_62HULFwW 0 4 188 1283 0 14 Dtool_62HULFwW 285 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_z_order
//       Access: Published
//  Description: Removes the z_order specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
174 14 Dtool_62HUttFo 0 4 189 1283 0 14 Dtool_62HUttFo 1028 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.  If this is NULL or unspecified, the
//               window will be created as a toplevel window on the
//               desktop; if this is non-NULL, the window will be
//               bound as a child window to the indicated parent
//               window.
//
//               You should use GraphicsPipe::make_window_handle() to
//               create an instance of a WindowHandle object given an
//               appropriate OS-specific window handle representation.
//               Each OS-specific GraphicsPipe class defines a
//               make_window_handle() method that returns an
//               appropriate WindowHandle object to wrap the
//               particular OS-specific representation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  13 parent_window 1 1299  
175 14 Dtool_62HUhe0o 0 4 189 1283 0 14 Dtool_62HUhe0o 1028 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.  If this is NULL or unspecified, the
//               window will be created as a toplevel window on the
//               desktop; if this is non-NULL, the window will be
//               bound as a child window to the indicated parent
//               window.
//
//               You should use GraphicsPipe::make_window_handle() to
//               create an instance of a WindowHandle object given an
//               appropriate OS-specific window handle representation.
//               Each OS-specific GraphicsPipe class defines a
//               make_window_handle() method that returns an
//               appropriate WindowHandle object to wrap the
//               particular OS-specific representation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
176 14 Dtool_62HUDGd5 0 4 189 1283 0 14 Dtool_62HUDGd5 1056 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.
//
//               This is a deprecated variant on this method, and
//               exists only for backward compatibility.  Future code
//               should use the version of set_parent_window() below
//               that receives a WindowHandle object; that interface
//               is much more robust.
//
//               In this deprecated variant, the actual value for
//               "parent" is platform-specific.  On Windows, it is the
//               HWND of the parent window, cast to an unsigned
//               integer.  On X11, it is the Window pointer of the
//               parent window, similarly cast.  On OSX, this is the
//               NSWindow pointer, which doesn't appear to work at
//               all.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  6 parent 1 1285  
177 14 Dtool_62HU7fZY 0 7 190 1299 0 14 Dtool_62HU7fZY 340 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_parent_window
//       Access: Published
//  Description: Returns the parent window specification, or NULL if
//               there is no parent window specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
178 14 Dtool_62HULSDf 0 6 191 1289 0 14 Dtool_62HULSDf 296 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_parent_window
//       Access: Published
//  Description: Checks the S_parent_window specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1306  
179 14 Dtool_62HUy5uH 0 4 192 1283 0 14 Dtool_62HUy5uH 299 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_parent_window
//       Access: Published
//  Description: Removes the S_parent_window specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1305  
180 14 Dtool_62HUcUzF 0 4 193 1283 0 14 Dtool_62HUcUzF 376 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1305  5 other 1 1306  
181 14 Dtool_62HUXFj2 0 4 194 1283 0 14 Dtool_62HUXFj2 368 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1306  3 out 1 1301  
182 14 Dtool_62HUVdpt 0 7 202 1313 0 14 Dtool_62HUVdpt 391 ///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
183 14 Dtool_62HU8EnQ 0 6 203 1296 0 14 Dtool_62HU8EnQ 386 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
184 14 Dtool_62HU85BK 0 6 204 1296 0 14 Dtool_62HU85BK 388 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
185 14 Dtool_62HUCJld 0 6 205 1296 0 14 Dtool_62HUCJld 392 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within its GraphicsOutput.  This 
//               number will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
186 14 Dtool_62HUpTxi 0 6 206 1296 0 14 Dtool_62HUpTxi 384 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
187 14 Dtool_62HU2Ss2 0 4 207 1283 0 14 Dtool_62HU2Ss2 519 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  10 dimensions 1 1293  
188 14 Dtool_62HUta7G 0 4 207 1283 0 14 Dtool_62HUta7G 519 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1314  1 l 1 1296  1 r 1 1296  1 b 1 1296  1 t 1 1296  
189 14 Dtool_62HUKjj6 0 7 208 1315 1011 14 Dtool_62HUKjj6 376 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_window
//       Access: Published
//  Description: Returns the GraphicsOutput that this DisplayRegion is
//               ultimately associated with, or NULL if no window is
//               associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
190 14 Dtool_62HU668k 0 7 209 1278 0 14 Dtool_62HU668k 370 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this DisplayRegion is
//               ultimately associated with, or NULL if no pipe is
//               associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
191 14 Dtool_62HUHd9E 0 6 210 1289 0 14 Dtool_62HUHd9E 313 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_stereo
//       Access: Published, Virtual
//  Description: Returns true if this is a StereoDisplayRegion, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
192 14 Dtool_62HUsRD1 0 4 211 1283 0 14 Dtool_62HUsRD1 669 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_camera
//       Access: Published, Virtual
//  Description: Sets the camera that is associated with this
//               DisplayRegion.  There is a one-to-many association
//               between cameras and DisplayRegions; one camera may be
//               shared by multiple DisplayRegions.
//
//               The camera is actually set via a NodePath, which
//               clarifies which instance of the camera (if there
//               happen to be multiple instances) we should use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  6 camera 1 1316  
193 14 Dtool_62HUQE0w 0 7 212 1321 0 14 Dtool_62HUQE0w 362 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_camera
//       Access: Published
//  Description: Returns the camera associated with this
//               DisplayRegion, or an empty NodePath if no camera is
//               associated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1311  14 current_thread 1 1319  
194 14 Dtool_62HUM2LQ 0 7 212 1321 0 14 Dtool_62HUM2LQ 362 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_camera
//       Access: Published
//  Description: Returns the camera associated with this
//               DisplayRegion, or an empty NodePath if no camera is
//               associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
195 14 Dtool_62HUPMVE 0 4 213 1283 0 14 Dtool_62HUPMVE 386 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_active
//       Access: Published, Virtual
//  Description: Sets the active flag associated with the
//               DisplayRegion.  If the DisplayRegion is marked
//               inactive, nothing is rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  6 active 1 1289  
196 14 Dtool_62HUpe7G 0 6 214 1289 0 14 Dtool_62HUpe7G 299 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
197 14 Dtool_62HUJhLw 0 4 215 1283 0 14 Dtool_62HUJhLw 439 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_sort
//       Access: Published, Virtual
//  Description: Sets the sort value associated with the
//               DisplayRegion.  Within a window, DisplayRegions will
//               be rendered in order from the lowest sort value to
//               the highest.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  4 sort 1 1282  
198 14 Dtool_62HUkJ4o 0 6 216 1282 0 14 Dtool_62HUkJ4o 297 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_sort
//       Access: Published
//  Description: Returns the sort value associated with the
//               DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
199 14 Dtool_62HUwg4T 0 4 217 1283 0 14 Dtool_62HUwg4T 1825 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_stereo_channel
//       Access: Published, Virtual
//  Description: Specifies whether the DisplayRegion represents the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  This automatically
//               adjusts the lens that is used to render to this
//               DisplayRegion to its left or right eye, according to
//               the lens's stereo properties.
//
//               When the DisplayRegion is attached to a stereo window
//               (one for which is_stereo() returns true), this also
//               specifies which physical channel the DisplayRegion
//               renders to.
//
//               Normally you would create at least two DisplayRegions
//               for a stereo window, one for each of the left and
//               right channels.  The two DisplayRegions may share the
//               same camera (and thus the same lens); this parameter
//               is used to control the exact properties of the lens
//               when it is used to render into this DisplayRegion.
//
//               Also see the StereoDisplayRegion, which automates
//               managing a pair of left/right DisplayRegions.
//
//               An ordinary DisplayRegion may be set to SC_mono,
//               SC_left, or SC_right.  You may set SC_stereo only on
//               a StereoDisplayRegion.
//
//               This call also resets tex_view_offset to its default
//               value, which is 0 for the left eye or 1 for the right
//               eye of a stereo display region, or 0 for a mono
//               display region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  14 stereo_channel 1 1322  
200 14 Dtool_62HUGBUH 0 6 218 1322 0 14 Dtool_62HUGBUH 448 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_stereo_channel
//       Access: Published
//  Description: Returns whether the DisplayRegion is specified as the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  See
//               set_stereo_channel().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
201 14 Dtool_62HUotSp 0 4 219 1283 0 14 Dtool_62HUotSp 776 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_tex_view_offset
//       Access: Published, Virtual
//  Description: Sets the current texture view offset for this
//               DisplayRegion.  This is normally set to zero.  If
//               nonzero, it is used to select a particular view of
//               any multiview textures that are rendered within this
//               DisplayRegion.
//
//               For a StereoDisplayRegion, this is normally 0 for the
//               left eye, and 1 for the right eye, to support stereo
//               textures.  This is set automatically when you call
//               set_stereo_channel().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  15 tex_view_offset 1 1282  
202 14 Dtool_62HUYFGv 0 6 220 1282 0 14 Dtool_62HUYFGv 687 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_tex_view_offset
//       Access: Public
//  Description: Returns the current texture view offset for this
//               DisplayRegion.  This is normally set to zero.  If
//               nonzero, it is used to select a particular view of
//               any multiview textures that are rendered within this
//               DisplayRegion.
//
//               For a StereoDisplayRegion, this is normally 0 for the
//               left eye, and 1 for the right eye, to support stereo
//               textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
203 14 Dtool_62HUDC63 0 4 221 1283 0 14 Dtool_62HUDC63 949 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_incomplete_render
//       Access: Published, Virtual
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               This flag may also be set on the
//               GraphicsStateGuardian.  It will be considered true
//               for a given DisplayRegion only if it is true on both
//               the GSG and on the DisplayRegion.
//
//               See GraphicsStateGuardian::set_incomplete_render()
//               for more detail.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  17 incomplete_render 1 1289  
204 14 Dtool_62HU6SQs 0 6 222 1289 0 14 Dtool_62HU6SQs 318 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_incomplete_render
//       Access: Published
//  Description: Returns the incomplete_render flag.  See
//               set_incomplete_render().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
205 14 Dtool_62HU7uok 0 4 223 1283 0 14 Dtool_62HU7uok 988 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_texture_reload_priority
//       Access: Published, Virtual
//  Description: Specifies an integer priority which is assigned to
//               any asynchronous texture reload requests spawned
//               while processing this DisplayRegion.  This controls
//               which textures are loaded first when multiple
//               textures need to be reloaded at once; it also
//               controls the relative priority between asynchronous
//               texture loads and asynchronous model or animation
//               loads.
//
//               Specifying a larger number here makes the textures
//               rendered by this DisplayRegion load up first.  This
//               may be particularly useful to do, for instance, for
//               the DisplayRegion that renders the gui.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  23 texture_reload_priority 1 1282  
206 14 Dtool_62HUpMFg 0 6 224 1282 0 14 Dtool_62HUpMFg 391 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_texture_reload_priority
//       Access: Published
//  Description: Returns the priority which is assigned to
//               asynchronous texture reload requests.  See
//               set_texture_reload_priority().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
207 14 Dtool_62HUt3kY 0 4 225 1283 0 14 Dtool_62HUt3kY 443 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_lens_index
//       Access: Published
//  Description: Sets the lens index, allows for multiple lenses to
//               be attached to a camera.  This is useful for a 
//               variety of setups, such as fish eye rendering.
//               The default is 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  5 index 1 1282  
208 14 Dtool_62HUHvi6 0 6 226 1282 0 14 Dtool_62HUHvi6 479 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_lens_index
//       Access: Public
//  Description: Returns the specific lens of the associated Camera
//               that will be used for rendering this scene.  Most
//               Cameras hold only one lens, but for multiple lenses
//               this method may be used to selected between them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
209 14 Dtool_62HUuCaA 0 4 227 1283 0 14 Dtool_62HUuCaA 494 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_traverser
//       Access: Published, Virtual
//  Description: Specifies the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.  Normally the
//               default CullTraverser is sufficient, but this may be
//               changed to change the default cull behavior.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  4 trav 1 1324  
210 14 Dtool_62HUmlBH 0 7 228 1324 0 14 Dtool_62HUmlBH 337 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_traverser
//       Access: Published
//  Description: Returns the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1314  
211 14 Dtool_62HUVFCA 0 4 229 1283 0 14 Dtool_62HUVFCA 279 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cube_map_index
//       Access: Published
//  Description: Deprecated; replaced by set_target_tex_page().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  14 cube_map_index 1 1282  
212 14 Dtool_62HU_ppu 0 4 230 1283 0 14 Dtool_62HU_ppu 909 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_target_tex_page
//       Access: Published, Virtual
//  Description: This is a special parameter that is only used when
//               rendering the faces of a cube map or multipage and/or
//               multiview texture.  
//
//               This sets up the DisplayRegion to render to the ith
//               page and jth view of its associated texture(s); the
//               value must be consistent with the range of values
//               availble to the texture.  A normal DisplayRegion that
//               is not associated with any particular page should be
//               set to page -1 and view 0.
//
//               This is particularly useful when rendering cube maps
//               and/or stereo textures.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  4 page 1 1282  
213 14 Dtool_62HUNBc0 0 6 231 1282 0 14 Dtool_62HUNBc0 433 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_target_tex_page
//       Access: Published
//  Description: Returns the target page number associated with this
//               particular DisplayRegion, or -1 if it is not
//               associated with a page.  See
//               set_target_tex_page().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
214 14 Dtool_62HUZe2r 0 4 232 1283 0 14 Dtool_62HUZe2r 1597 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the DisplayRegion is visited during the cull
//               traversal.  This callback will be made during the
//               cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               traversal for this DisplayRegion has not yet started.
//
//               The callback is passed an instance of a
//               DisplayRegionCullCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal cull behavior, so if your
//               callback does nothing, the scene graph will not be
//               traversed and therefore nothing will be drawn.  If
//               you wish the normal cull traversal to be performed
//               for this DisplayRegion, you must call
//               cbdata->upcall() from your callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  6 object 1 1326  
215 14 Dtool_62HUlceA 0 4 233 1283 0 14 Dtool_62HUlceA 318 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1314  
216 14 Dtool_62HUIcXV 0 7 234 1326 0 14 Dtool_62HUIcXV 286 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
217 14 Dtool_62HU12YM 0 4 235 1283 0 14 Dtool_62HU12YM 1951 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the contents of DisplayRegion is drawn during the
//               draw traversal.  This callback will be made during
//               the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state is in the initial state, and no
//               projection matrix or modelview matrix is in effect.
//               begin_scene() has not yet been called, and no objects
//               have yet been drawn.  However, the viewport has
//               already been set to the appropriate part of the
//               window, and the clear commands for this DisplayRegion
//               (if any) have been issued.
//
//               The callback is passed an instance of a
//               DisplayRegionDrawCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal draw behavior, so if your
//               callback does nothing, nothing in the DisplayRegion
//               will be drawn.  If you wish the draw traversal to
//               continue to draw the contents of this DisplayRegion,
//               you must call cbdata->upcall() from your callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  6 object 1 1326  
218 14 Dtool_62HUmEIH 0 4 236 1283 0 14 Dtool_62HUmEIH 318 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1314  
219 14 Dtool_62HUTl41 0 7 237 1326 0 14 Dtool_62HUTl41 286 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
220 14 Dtool_62HU9Qnq 0 6 238 1282 0 14 Dtool_62HU9Qnq 279 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_width
//       Access: Published
//  Description: Returns the width of the DisplayRegion in pixels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
221 14 Dtool_62HUKQDR 0 6 239 1282 0 14 Dtool_62HUKQDR 281 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_height
//       Access: Published
//  Description: Returns the height of the DisplayRegion in pixels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1311  
222 14 Dtool_62HUwKBx 0 4 240 1283 0 14 Dtool_62HUwKBx 229 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1311  3 out 1 1301  
223 14 Dtool_62HUzVMo 0 7 241 1328 0 14 Dtool_62HUzVMo 757 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_screenshot_filename
//       Access: Published, Static
//  Description: Synthesizes a suitable default filename for passing
//               to save_screenshot().
//
//               The default filename is generated from the supplied
//               prefix and from the Config variable
//               screenshot-filename, which contains the following
//               strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 1 6 prefix 1 1286  
224 14 Dtool_62HUWeJc 0 7 241 1328 0 14 Dtool_62HUWeJc 757 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_screenshot_filename
//       Access: Published, Static
//  Description: Synthesizes a suitable default filename for passing
//               to save_screenshot().
//
//               The default filename is generated from the supplied
//               prefix and from the Config variable
//               screenshot-filename, which contains the following
//               strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 0 
225 14 Dtool_62HUcz2s 0 7 242 1328 0 14 Dtool_62HUcz2s 470 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  6 prefix 1 1286  
226 14 Dtool_62HUJTg6 0 7 242 1328 0 14 Dtool_62HUJTg6 470 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1314  
227 14 Dtool_62HUECpM 0 6 243 1289 0 14 Dtool_62HUECpM 350 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1314  8 filename 1 1308  13 image_comment 1 1286  
228 14 Dtool_62HUN5lm 0 6 243 1289 0 14 Dtool_62HUN5lm 350 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  8 filename 1 1308  
229 14 Dtool_62HUVX7L 0 7 244 1330 0 14 Dtool_62HUVX7L 374 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer and returns it as a Texture, or NULL
//               on failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1314  
230 14 Dtool_62HU__qS 0 6 244 1289 0 14 Dtool_62HU__qS 398 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1314  5 image 1 1331  
231 14 Dtool_62HUGzuE 0 7 245 1334 0 14 Dtool_62HUGzuE 1131 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_cull_result_graph
//       Access: Published
//  Description: Returns a special scene graph constructed to
//               represent the results of the last frame's cull
//               operation.
//
//               This will be a hierarchy of nodes, one node for each
//               bin, each of which will in term be a parent of a
//               number of GeomNodes, representing the geometry drawn
//               in each bin.
//
//               This is useful mainly for high-level debugging and
//               abstraction tools; it should not be mistaken for the
//               low-level cull result itself, which is constructed
//               and maintained internally.  No such scene graph is
//               normally constructed during the rendering of a frame;
//               this is an artificial construct created for the
//               purpose of making it easy to analyze the results of
//               the cull operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1314  
232 14 Dtool_62HUZZzb 0 7 246 1280 0 14 Dtool_62HUZZzb 0 0 
233 14 Dtool_62HUrv6o 0 7 197 1335 0 14 Dtool_62HUrv6o 0 1 4 this 3 1314  
234 14 Dtool_62HUNvZ3 0 7 198 1314 812 14 Dtool_62HUNvZ3 0 1 4 this 3 1335  
235 14 Dtool_62HUlwzo 0 6 199 1290 0 14 Dtool_62HUlwzo 0 1 4 this 3 1314  
236 14 Dtool_62HUWozv 0 7 200 1314 812 14 Dtool_62HUWozv 0 1 4 this 3 1290  
237 14 Dtool_62HU9STW 0 7 248 1314 812 14 Dtool_62HU9STW 819 // Filename: stereoDisplayRegion.I
// Created by:  drose (19Feb09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_left_eye
//       Access: Published
//  Description: Returns a pointer to the left DisplayRegion managed
//               by this stereo object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1336  
238 14 Dtool_62HUHJcU 0 7 249 1314 812 14 Dtool_62HUHJcU 326 ////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_right_eye
//       Access: Published
//  Description: Returns a pointer to the right DisplayRegion managed
//               by this stereo object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1336  
239 14 Dtool_62HUSQKL 0 7 250 1280 0 14 Dtool_62HUSQKL 0 0 
240 14 Dtool_62HU0P03 0 7 284 1337 894 14 Dtool_62HU0P03 233 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
241 14 Dtool_62HUOlPt 0 7 284 1337 894 14 Dtool_62HUOlPt 735 // Filename: frameBufferProperties.I
// Created by:  drose (27Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1338  
242 14 Dtool_62HU6uCK 0 6 252 1282 0 14 Dtool_62HU6uCK 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_depth_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
243 14 Dtool_62HUp9ex 0 6 253 1282 0 14 Dtool_62HUp9ex 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_color_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
244 14 Dtool_62HUYuZb 0 6 254 1282 0 14 Dtool_62HUYuZb 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_alpha_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
245 14 Dtool_62HUCuvJ 0 6 255 1282 0 14 Dtool_62HUCuvJ 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stencil_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
246 14 Dtool_62HUzcaD 0 6 256 1282 0 14 Dtool_62HUzcaD 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_accum_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
247 14 Dtool_62HUi42A 0 6 257 1282 0 14 Dtool_62HUi42A 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_rgba
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
248 14 Dtool_62HU6m6B 0 6 258 1282 0 14 Dtool_62HU6m6B 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_hrgba
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
249 14 Dtool_62HUFEoX 0 6 259 1282 0 14 Dtool_62HUFEoX 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_float
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
250 14 Dtool_62HUSH90 0 6 260 1282 0 14 Dtool_62HUSH90 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_multisamples
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
251 14 Dtool_62HU1QBe 0 6 261 1282 0 14 Dtool_62HU1QBe 356 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
252 14 Dtool_62HUn2ht 0 6 262 1282 0 14 Dtool_62HUn2ht 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_back_buffers
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
253 14 Dtool_62HUQkg0 0 6 263 1282 0 14 Dtool_62HUQkg0 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_indexed_color
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
254 14 Dtool_62HU7V7R 0 6 264 1282 0 14 Dtool_62HU7V7R 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_rgb_color
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
255 14 Dtool_62HU1KER 0 6 265 1282 0 14 Dtool_62HU1KER 233 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stereo
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
256 14 Dtool_62HUmgiH 0 6 266 1282 0 14 Dtool_62HUmgiH 241 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_hardware
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
257 14 Dtool_62HUI_F1 0 6 267 1282 0 14 Dtool_62HUI_F1 241 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_software
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
258 14 Dtool_62HU4McT 0 4 268 1283 0 14 Dtool_62HU4McT 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_depth_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
259 14 Dtool_62HUgD26 0 4 269 1283 0 14 Dtool_62HUgD26 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_color_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
260 14 Dtool_62HUjyyk 0 4 270 1283 0 14 Dtool_62HUjyyk 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_alpha_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
261 14 Dtool_62HUwbci 0 4 271 1283 0 14 Dtool_62HUwbci 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stencil_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
262 14 Dtool_62HU2I1M 0 4 272 1283 0 14 Dtool_62HU2I1M 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_accum_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
263 14 Dtool_62HUIVH0 0 4 273 1283 0 14 Dtool_62HUIVH0 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_rgba
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
264 14 Dtool_62HUJ2_Q 0 4 274 1283 0 14 Dtool_62HUJ2_Q 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_hrgba
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
265 14 Dtool_62HUqLrm 0 4 275 1283 0 14 Dtool_62HUqLrm 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_float
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
266 14 Dtool_62HU6_qN 0 4 276 1283 0 14 Dtool_62HU6_qN 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_multisamples
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
267 14 Dtool_62HUmvEd 0 4 277 1283 0 14 Dtool_62HUmvEd 355 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
268 14 Dtool_62HUcsOG 0 4 278 1283 0 14 Dtool_62HUcsOG 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_back_buffers
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
269 14 Dtool_62HUAi_y 0 4 279 1283 0 14 Dtool_62HUAi_y 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_indexed_color
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
270 14 Dtool_62HUKb_g 0 4 280 1283 0 14 Dtool_62HUKb_g 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_rgb_color
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
271 14 Dtool_62HU3y2O 0 4 281 1283 0 14 Dtool_62HU3y2O 233 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stereo
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
272 14 Dtool_62HU4Co9 0 4 282 1283 0 14 Dtool_62HU4Co9 241 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_hardware
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
273 14 Dtool_62HUI3Lr 0 4 283 1283 0 14 Dtool_62HUI3Lr 241 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_software
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  1 n 1 1282  
274 14 Dtool_62HULWDE 0 6 286 1337 0 14 Dtool_62HULWDE 246 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  4 copy 1 1338  
275 14 Dtool_62HUFGOb 0 6 287 1338 0 14 Dtool_62HUFGOb 395 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_default
//       Access: Published, Static
//  Description: Returns a FrameBufferProperties structure with all of
//               the default values filled in according to the user's
//               config file.
//////////////////////////////////////////////////////////////////// 0 
276 14 Dtool_62HU_xuw 0 6 288 1289 0 14 Dtool_62HU_xuw 234 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::operator == 
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1338  5 other 1 1338  
277 14 Dtool_62HUiGu_ 0 6 289 1289 0 14 Dtool_62HUiGu_ 233 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1338  5 other 1 1338  
278 14 Dtool_62HUfz7q 0 4 290 1283 0 14 Dtool_62HUfz7q 391 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the FrameBufferProperties structure to its
//               initial empty state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1337  
279 14 Dtool_62HUzSla 0 4 291 1283 0 14 Dtool_62HUzSla 268 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_all_specified
//       Access: Published
//  Description: sets all the specified bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1337  
280 14 Dtool_62HUrBZu 0 6 292 1289 0 14 Dtool_62HUrBZu 405 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::subsumes
//       Access: Public
//  Description: Returns true if this set of properties makes
//               strictly greater or equal demands of the framebuffer
//               than the other set of framebuffer properties.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1338  5 other 1 1338  
281 14 Dtool_62HUHaxr 0 4 293 1283 0 14 Dtool_62HUHaxr 381 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1337  5 other 1 1338  
282 14 Dtool_62HUCzSe 0 4 294 1283 0 14 Dtool_62HUCzSe 373 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1338  3 out 1 1301  
283 14 Dtool_62HUs3_4 0 4 295 1283 0 14 Dtool_62HUs3_4 398 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_one_bit_per_channel
//       Access: Published
//  Description: If any of the depth, color, alpha, accum, or
//               stencil properties is set to more than one,
//               then they are reduced to one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1337  
284 14 Dtool_62HUx4ZJ 0 6 296 1289 0 14 Dtool_62HUx4ZJ 231 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_stereo
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
285 14 Dtool_62HUWlX5 0 6 297 1289 0 14 Dtool_62HUWlX5 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_single_buffered
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
286 14 Dtool_62HUJ6K8 0 6 298 1282 0 14 Dtool_62HUJ6K8 1390 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_quality
//       Access: Published
//  Description: Assumes that these properties are a description of
//               a window.
//
//               Measures how well this window satisfies a specified
//               set of requirements.  A higher quality number means
//               that more requirements were satisfied.  A quality of
//               zero means that the window is unsuitable.
//
//               The routine deducts a lot if the window fails to
//               provide a requested feature.  It deducts less
//               if the window provides a feature, but at a degraded
//               level of functionality (ie, the user asks for rgba8,
//               color, but the window only provides rgba4).  The
//               routine also deducts a small amount for unnecessary
//               features.  For example, if the window has an
//               accumulation buffer when one is not requested will
//               reduce quality slightly.  Maximum quality is obtained
//               when the window exactly matches the request.
//
//               If you want to know whether the window satisfies
//               all of the requirements, use the "subsumes" function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1338  4 reqs 1 1338  
287 14 Dtool_62HU5Lag 0 6 299 1289 0 14 Dtool_62HU5Lag 324 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
288 14 Dtool_62HUByA7 0 6 300 1289 0 14 Dtool_62HUByA7 444 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_basic
//       Access: Published
//  Description: Returns true if the properties are extremely basic.
//               The following count as basic: rgb or rgba, depth.
//               If anything else is specified, the properties are
//               non-basic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
289 14 Dtool_62HUTi5r 0 6 301 1282 0 14 Dtool_62HUTi5r 324 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_mask
//       Access: Published
//  Description: Converts the aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
290 14 Dtool_62HUFEQC 0 6 302 1282 0 14 Dtool_62HUFEQC 329 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_buffer_mask
//       Access: Private
//  Description: Converts the non-aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
291 14 Dtool_62HUbcBa 0 6 303 1289 0 14 Dtool_62HUbcBa 426 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::verify_hardware_software
//       Access: Public
//  Description: Validates that the properties represent the desired
//               kind of renderer (hardware or software).  If not,
//               prints out an error message and returns false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1338  5 props 1 1338  8 renderer 1 1286  
292 14 Dtool_62HUwJOi 0 7 305 1342 927 14 Dtool_62HUwJOi 738 // Filename: graphicsThreadingModel.I
// Created by:  drose (27Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1340  
293 14 Dtool_62HUtG_c 0 7 305 1342 927 14 Dtool_62HUtG_c 1800 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Constructor
//       Access: Published
//  Description: The threading model accepts a string representing the
//               names of the two threads that will process cull and
//               draw for the given window, separated by a slash.  The
//               names are completely arbitrary and are used only to
//               differentiate threads.  The two names may be the
//               same, meaning the same thread, or each may be the
//               empty string, which represents the previous thread.
//
//               Thus, for example, "cull/draw" indicates that the
//               window will be culled in a thread called "cull", and
//               drawn in a separate thread called "draw".
//               "draw/draw" or simply "draw" indicates the window
//               will be culled and drawn in the same thread, "draw".
//               On the other hand, "/draw" indicates the thread will
//               be culled in the main, or app thread, and drawn in a
//               separate thread named "draw".  The empty string, ""
//               or "/", indicates the thread will be culled and drawn
//               in the main thread; that is to say, a single-process
//               model.
//
//               Finally, if the threading model begins with a "-"
//               character, then cull and draw are run simultaneously,
//               in the same thread, with no binning or state sorting.
//               It simplifies the cull process but it forces the
//               scene to render in scene graph order; state sorting
//               and alpha sorting is lost.
//////////////////////////////////////////////////////////////////// 1 5 model 1 1286  
294 14 Dtool_62HUPBJ_ 0 7 305 1342 927 14 Dtool_62HUPBJ_ 1800 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Constructor
//       Access: Published
//  Description: The threading model accepts a string representing the
//               names of the two threads that will process cull and
//               draw for the given window, separated by a slash.  The
//               names are completely arbitrary and are used only to
//               differentiate threads.  The two names may be the
//               same, meaning the same thread, or each may be the
//               empty string, which represents the previous thread.
//
//               Thus, for example, "cull/draw" indicates that the
//               window will be culled in a thread called "cull", and
//               drawn in a separate thread called "draw".
//               "draw/draw" or simply "draw" indicates the window
//               will be culled and drawn in the same thread, "draw".
//               On the other hand, "/draw" indicates the thread will
//               be culled in the main, or app thread, and drawn in a
//               separate thread named "draw".  The empty string, ""
//               or "/", indicates the thread will be culled and drawn
//               in the main thread; that is to say, a single-process
//               model.
//
//               Finally, if the threading model begins with a "-"
//               character, then cull and draw are run simultaneously,
//               in the same thread, with no binning or state sorting.
//               It simplifies the cull process but it forces the
//               scene to render in scene graph order; state sorting
//               and alpha sorting is lost.
//////////////////////////////////////////////////////////////////// 0 
295 14 Dtool_62HUGZxc 0 6 306 1342 0 14 Dtool_62HUGZxc 248 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1342  4 copy 1 1340  
296 14 Dtool_62HU7c0w 0 6 307 1286 0 14 Dtool_62HU7c0w 326 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_model
//       Access: Published
//  Description: Returns the string that describes the threading
//               model.  See the constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1340  
297 14 Dtool_62HU8GWk 0 6 308 1286 0 14 Dtool_62HU8GWk 324 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               culling in this model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1340  
298 14 Dtool_62HUHjIx 0 4 309 1283 0 14 Dtool_62HUHjIx 481 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               culling in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1342  9 cull_name 1 1286  
299 14 Dtool_62HUMOJd 0 6 310 1282 0 14 Dtool_62HUMOJd 454 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the cull thread
//               should access data.  This will be 0 if the cull is
//               run in the same thread as app, or 1 if it is its own
//               thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1340  
300 14 Dtool_62HUlbag 0 6 311 1286 0 14 Dtool_62HUlbag 392 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               sending the actual graphics primitives to the
//               graphics API in this model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1340  
301 14 Dtool_62HUwWNt 0 4 312 1283 0 14 Dtool_62HUwWNt 481 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_draw_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               drawing in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1342  9 cull_name 1 1286  
302 14 Dtool_62HU3ENZ 0 6 313 1282 0 14 Dtool_62HU3ENZ 538 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the draw thread
//               should access data.  This will be the same value as
//               get_cull_stage() if cull and draw are run in the same
//               thread, or one more than that value if draw should be
//               in its own thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1340  
303 14 Dtool_62HUzVRl 0 6 314 1289 0 14 Dtool_62HUzVRl 396 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_sorting
//       Access: Published
//  Description: Returns true if the model involves a separate cull
//               pass, or false if culling happens implicitly, at the
//               same time as draw.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1340  
304 14 Dtool_62HUtSHC 0 4 315 1283 0 14 Dtool_62HUtSHC 521 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_sorting
//       Access: Published
//  Description: Changes the flag that indicates whether the threading
//               model involves a separate cull pass.  This won't
//               change any windows that were already created with
//               this model; this only has an effect on newly-opened
//               windows.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1342  12 cull_sorting 1 1289  
305 14 Dtool_62HUysdw 0 6 316 1289 0 14 Dtool_62HUysdw 372 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_single_threaded
//       Access: Published
//  Description: Returns true if the threading model is a
//               single-threaded model, or false if it involves
//               threads.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1340  
306 14 Dtool_62HUVNCv 0 6 317 1289 0 14 Dtool_62HUVNCv 377 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_default
//       Access: Published
//  Description: Returns true if the threading model is the default,
//               cull-then-draw single-threaded model, or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1340  
307 14 Dtool_62HUolSI 0 4 318 1283 0 14 Dtool_62HUolSI 230 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1340  3 out 1 1301  
308 14 Dtool_62HUhhed 0 4 328 1283 0 14 Dtool_62HUhhed 857 // Filename: graphicsStateGuardian.I
// Created by:  drose (24Sep99)
// Updated by: fperazzi, PandaSE (29Apr10) (added 
// get_max_2d_texture_array_layers and related)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all
//       Access: Public
//  Description: Releases all prepared objects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
309 14 Dtool_62HUNhtg 0 6 329 1282 0 14 Dtool_62HUNhtg 319 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_textures
//       Access: Public
//  Description: Frees the resources for all textures associated with
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
310 14 Dtool_62HUtq2Y 0 6 330 1282 0 14 Dtool_62HUtq2Y 313 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_geoms
//       Access: Public
//  Description: Frees the resources for all geoms associated with
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
311 14 Dtool_62HUbu1d 0 6 331 1282 0 14 Dtool_62HUbu1d 331 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_vertex_buffers
//       Access: Public
//  Description: Frees the resources for all vertex buffers associated
//               with this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
312 14 Dtool_62HUvg3_ 0 6 332 1282 0 14 Dtool_62HUvg3_ 329 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_index_buffers
//       Access: Public
//  Description: Frees the resources for all index buffers associated
//               with this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
313 14 Dtool_62HU41Tn 0 4 333 1283 0 14 Dtool_62HU41Tn 538 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsStateGuardian.  If the GraphicsStateGuardian
//               is marked inactive, nothing is rendered.  This is not
//               normally turned off unless there is a problem with
//               the rendering detected at a low level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1343  6 active 1 1289  
314 14 Dtool_62HUWMEv 0 6 334 1289 0 14 Dtool_62HUWMEv 315 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               GraphicsStateGuardian.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
315 14 Dtool_62HUBs7Q 0 6 335 1289 0 14 Dtool_62HUBs7Q 435 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_valid
//       Access: Published
//  Description: Returns true if the GSG has been correctly
//               initialized within a graphics context, false if there
//               has been some problem or it hasn't been initialized
//               yet.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
316 14 Dtool_62HUqmCi 0 6 336 1289 0 14 Dtool_62HUqmCi 301 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::needs_reset
//       Access: Public
//  Description: Returns true if the gsg is marked as needing a
//               reset.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
317 14 Dtool_62HUTWNA 0 4 337 1283 0 14 Dtool_62HUTWNA 1472 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_incomplete_render
//       Access: Public
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               Setting this true allows for a smoother frame rate,
//               but occasionally parts of the frame will be invisible
//               or missing (they will generally come in within a
//               second or two).  Setting this false guarantees that
//               every frame will be complete, but may cause more
//               chugs as things are loaded up at runtime.
//
//               You may want to set this false during loading
//               screens, to guarantee that all of your assets are
//               available by the time you take the loading screen
//               down.
//
//               This flag may also be set individually on each
//               DisplayRegion.  It will be considered true for a
//               given DisplayRegion only if it is true on both the
//               GSG and on the DisplayRegion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1343  17 incomplete_render 1 1289  
318 14 Dtool_62HUgMzz 0 4 338 1283 0 14 Dtool_62HUgMzz 385 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_loader
//       Access: Public
//  Description: Sets the Loader object that will be used by this GSG
//               to load textures when necessary, if
//               get_incomplete_render() is true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1343  6 loader 1 1346  
319 14 Dtool_62HURXHV 0 7 339 1346 0 14 Dtool_62HURXHV 397 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be used by this
//               GSG to load textures when necessary, if
//               get_incomplete_render() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
320 14 Dtool_62HUXe8K 0 7 340 1278 0 14 Dtool_62HUXe8K 304 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_pipe
//       Access: Published
//  Description: Returns the graphics pipe on which this GSG was
//               created.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
321 14 Dtool_62HUG5DS 0 7 341 1348 0 14 Dtool_62HUG5DS 463 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this GSG.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
322 14 Dtool_62HUax_q 0 6 342 1340 0 14 Dtool_62HUax_q 320 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_threading_model
//       Access: Published
//  Description: Returns the threading model that was used to create
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
323 14 Dtool_62HU6HMQ 0 6 343 1289 0 14 Dtool_62HU6HMQ 373 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_hardware
//       Access: Published
//  Description: Returns true if this GSG appears to be
//               hardware-accelerated, or false if it is known to be
//               software only.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
324 14 Dtool_62HUuf8m 0 6 344 1282 0 14 Dtool_62HUuf8m 859 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_texture_stages
//       Access: Published
//  Description: Returns the maximum number of simultaneous textures
//               that may be applied to geometry with multitexturing,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority texture stages will
//               not be applied.  Use TextureStage::set_priority() to
//               adjust the relative importance of the different
//               texture stages.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
325 14 Dtool_62HUN0H1 0 6 345 1282 0 14 Dtool_62HUN0H1 654 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_3d_texture_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a 3-d texture, or -1 if there is no
//               particular limit.  Returns 0 if 3-d textures are not
//               supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
326 14 Dtool_62HUn6r1 0 6 346 1282 0 14 Dtool_62HUn6r1 621 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_2d_texture_array_layers
//       Access: Published
//  Description: Returns the largest possible number of pages, or -1 
//               if there is no particular limit. Returns 0 if 2-d
//               texture arrays not supported.
//               
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
327 14 Dtool_62HUCoqA 0 6 347 1282 0 14 Dtool_62HUCoqA 662 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_cube_map_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a cube map texture, or -1 if there is
//               no particular limit.  Returns 0 if cube map textures
//               are not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
328 14 Dtool_62HU4MTA 0 6 348 1289 0 14 Dtool_62HU4MTA 595 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_combine
//       Access: Published
//  Description: Returns true if this particular GSG can use the
//               TextureStage::M_combine mode, which includes all of
//               the texture blend modes specified by
//               set_combine_rgb() and/or set_combine_alpha().  If
//               this is false, you must limit yourself to using the
//               simpler blend modes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
329 14 Dtool_62HU8l6n 0 6 349 1289 0 14 Dtool_62HU8l6n 475 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_saved_result
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CS_last_saved_result source, which
//               allows you to save the result of a TextureStage and
//               re-use it for multiple inputs.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
330 14 Dtool_62HUtTve 0 6 350 1289 0 14 Dtool_62HUtTve 375 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_dot3
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CM_dot3_rgb or CM_dot3_rgba combine
//               modes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
331 14 Dtool_62HU363k 0 6 351 1289 0 14 Dtool_62HU363k 325 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_3d_texture
//       Access: Published
//  Description: Returns true if this GSG can render 3-d (volumetric)
//               textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
332 14 Dtool_62HUXLw6 0 6 352 1289 0 14 Dtool_62HUXLw6 324 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_2d_texture_array
//       Access: Published
//  Description: Returns true if this GSG can render 2-d textures
//               array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
333 14 Dtool_62HULBxF 0 6 353 1289 0 14 Dtool_62HULBxF 298 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cube_map
//       Access: Published
//  Description: Returns true if this GSG can render cube map textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
334 14 Dtool_62HUb7rC 0 6 354 1289 0 14 Dtool_62HUb7rC 333 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tex_non_pow2
//       Access: Published
//  Description: Returns true if this GSG can handle non power of two
//               sized textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
335 14 Dtool_62HUmk5Z 0 6 355 1289 0 14 Dtool_62HUmk5Z 423 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compressed_texture
//       Access: Published
//  Description: Returns true if this GSG can compress textures as it
//               loads them into texture memory, and/or accept
//               pre-compressed textures for storing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
336 14 Dtool_62HU1JaQ 0 6 356 1282 0 14 Dtool_62HU1JaQ 579 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_lights
//       Access: Published
//  Description: Returns the maximum number of simultaneous lights
//               that may be rendered on geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
337 14 Dtool_62HUj53l 0 6 357 1282 0 14 Dtool_62HUj53l 588 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_clip_planes
//       Access: Published
//  Description: Returns the maximum number of simultaneous clip planes
//               that may be applied to geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
338 14 Dtool_62HUWirW 0 6 358 1282 0 14 Dtool_62HUWirW 818 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transforms
//       Access: Published
//  Description: Returns the maximum number of transform matrices that
//               may be simultaneously used to transform any one
//               vertex by the graphics hardware.  If this number is
//               0, then the hardware (or the graphics backend)
//               doesn't support soft-skinned vertices (in which case
//               Panda will animate the vertices in software).
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
339 14 Dtool_62HUykA4 0 6 359 1282 0 14 Dtool_62HUykA4 811 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transform_indices
//       Access: Published
//  Description: Returns the maximum number of transforms there may be
//               in a single TransformTable for this graphics
//               hardware.  If this number is 0 (but
//               get_max_transforms() is nonzero), then the graphics
//               hardware (or API) doesn't support indexed transforms,
//               but can support direct transform references.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
340 14 Dtool_62HU4Ta6 0 6 360 1289 0 14 Dtool_62HU4Ta6 976 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_copy_texture_inverted
//       Access: Published
//  Description: Returns true if this particular GSG has the property
//               that any framebuffer-to-texture copy results in a
//               texture that is upside-down and backwards from
//               Panda's usual convention; that is, it copies into a
//               texture from the bottom up instead of from the top
//               down.
//
//               If this is true, then on offscreen GraphicsBuffer
//               created for the purposes of rendering into a texture
//               should be created with the invert flag set true, to
//               compensate.  Panda will do this automatically if you
//               create an offscreen buffer using
//               GraphicsOutput::make_texture_buffer().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
341 14 Dtool_62HU9xp9 0 6 361 1289 0 14 Dtool_62HU9xp9 555 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_generate_mipmap
//       Access: Published
//  Description: Returns true if this particular GSG can generate
//               mipmaps for a texture automatically, or if they must
//               be generated in software.  If this is true, then
//               mipmaps can safely be enabled for rendered textures
//               (e.g. using the MultitexReducer).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
342 14 Dtool_62HUWzUj 0 6 362 1289 0 14 Dtool_62HUWzUj 543 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_texture
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               returns true if the GSG supports GL_DEPTH_COMPONENT
//               textures, which are considered a limited but still
//               valid case of F_depth_stencil.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
343 14 Dtool_62HUV1XG 0 6 363 1289 0 14 Dtool_62HUV1XG 475 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               only returns true if the GSG supports the full
//               packed depth-stencil functionality.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
344 14 Dtool_62HU9nGe 0 6 364 1289 0 14 Dtool_62HU9nGe 334 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_basic_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               arbfp1+arbvp1 or above.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
345 14 Dtool_62HUqAkH 0 6 365 1289 0 14 Dtool_62HUqAkH 331 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               geometry shaders.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
346 14 Dtool_62HU6Uqz 0 6 366 1289 0 14 Dtool_62HU6Uqz 338 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tessellation_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               tesselation shaders.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
347 14 Dtool_62HUAtne 0 6 367 1289 0 14 Dtool_62HUAtne 315 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_glsl
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               GLSL shaders.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
348 14 Dtool_62HU3MNr 0 6 368 1289 0 14 Dtool_62HU3MNr 328 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               stencil buffers at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
349 14 Dtool_62HUPsvb 0 6 369 1289 0 14 Dtool_62HUPsvb 426 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_two_sided_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               two sided stencil: different stencil settings for the
//               front and back side of the same polygon.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
350 14 Dtool_62HUhwaW 0 6 370 1289 0 14 Dtool_62HUhwaW 494 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_instancing
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               hardware geometry instancing: the ability to render
//               multiple copies of a model. In OpenGL, this is
//               done using the EXT_draw_instanced extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
351 14 Dtool_62HUJVkQ 0 6 371 1282 0 14 Dtool_62HUJVkQ 855 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_color_targets
//       Access: Published
//  Description: Returns the maximum number of simultaneous color
//               textures that may be attached for render-to-texture,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority render targets will
//               not be applied.  Use RenderTarget::set_priority() to
//               adjust the relative importance of the different
//               render targets.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
352 14 Dtool_62HUj2nm 0 6 372 1282 0 14 Dtool_62HUj2nm 364 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_maximum_simultaneous_render_targets
//       Access: Published
//  Description: Deprecated.  Use get_max_color_targets() instead,
//               which returns the exact same value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
353 14 Dtool_62HUH2E7 0 6 373 1282 0 14 Dtool_62HUH2E7 262 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_shader_model
//       Access: Published
//  Description: Returns the ShaderModel
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
354 14 Dtool_62HUF_yT 0 4 374 1283 0 14 Dtool_62HUF_yT 403 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_shader_model
//       Access: Published
//  Description: Sets the ShaderModel.  This will override the auto-
//               detected shader model during GSG reset.  Useful for
//               testing lower-end shaders.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1343  12 shader_model 1 1282  
355 14 Dtool_62HUHqBZ 0 6 375 1289 0 14 Dtool_62HUHqBZ 350 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cg_profile
//       Access: Published, Virtual
//  Description: Returns true if this particular GSG supports the 
//               specified Cg Shader Profile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1344  4 name 1 1286  
356 14 Dtool_62HU11LA 0 6 376 1289 0 14 Dtool_62HU11LA 499 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_color_scale_via_lighting
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale using materials and/or ambient lights, or
//               false if we need to actually munge the color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
357 14 Dtool_62HUjrll 0 6 377 1289 0 14 Dtool_62HUjrll 478 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) an alpha scale via an
//               additional Texture layer, or false if we need to
//               actually munge the alpha.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
358 14 Dtool_62HUmzXP 0 6 377 1289 0 14 Dtool_62HUmzXP 636 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: This variant of get_alpha_scale_via_texture() answers
//               the question of whether the GSG can implement an
//               alpha scale via an additional Texture layer,
//               considering the current TextureAttrib that will be in
//               effect.  This considers whether there is at least one
//               additional texture slot available on the GSG.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1344  10 tex_attrib 1 1349  
359 14 Dtool_62HU9h3s 0 6 378 1289 0 14 Dtool_62HU9h3s 483 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_runtime_color_scale
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale directly, without requiring any munging of
//               vertices or tricks with lighting.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
360 14 Dtool_62HUfwIg 0 7 379 1353 0 14 Dtool_62HUfwIg 408 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_texture_stage
//       Access: Published, Static
//  Description: Returns the TextureStage that will be used to apply
//               an alpha scale, if get_alpha_scale_via_texture()
//               returns true.
//////////////////////////////////////////////////////////////////// 0 
361 14 Dtool_62HUnlK4 0 4 380 1283 0 14 Dtool_62HUnlK4 771 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_coordinate_system
//       Access: Published
//  Description: Changes the coordinate system in effect on this
//               particular gsg.  This is also called the "external"
//               coordinate system, since it is the coordinate system
//               used by the scene graph, external to to GSG.
//
//               Normally, this will be the default coordinate system,
//               but it might be set differently at runtime.  It will
//               automatically be copied from the current lens's
//               coordinate system as each DisplayRegion is rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1343  2 cs 1 1354  
362 14 Dtool_62HUU3J8 0 6 381 1354 0 14 Dtool_62HUU3J8 457 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system in effect on this
//               particular gsg.  Normally, this will be the default
//               coordinate system, but it might be set differently at
//               runtime.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
363 14 Dtool_62HUg4rL 0 6 382 1354 0 14 Dtool_62HUg4rL 756 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_internal_coordinate_system
//       Access: Published, Virtual
//  Description: Returns the coordinate system used internally by the
//               GSG.  This may be the same as the external coordinate
//               system reported by get_coordinate_system(), or it may
//               be something different.
//
//               In any case, vertices that have been transformed
//               before being handed to the GSG (that is, vertices
//               with a contents value of C_clip_point) will be
//               expected to be in this coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
364 14 Dtool_62HUSVj3 0 7 383 1356 0 14 Dtool_62HUSVj3 411 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_prepared_objects
//       Access: Public, Virtual
//  Description: Returns the set of texture and geom objects that have
//               been prepared with this GSG (and possibly other GSG's
//               that share objects).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
365 14 Dtool_62HUkkpB 0 6 384 1289 0 14 Dtool_62HUkkpB 277 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_gamma
//       Access: Published, Virtual
//  Description: Set gamma.  Returns true on success.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1343  5 gamma 1 1296  
366 14 Dtool_62HU3ZpZ 0 6 385 1296 0 14 Dtool_62HU3ZpZ 262 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_gamma
//       Access: Published
//  Description: Get the current gamma setting.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1343  5 gamma 1 1296  
367 14 Dtool_62HUm_yX 0 4 386 1283 0 14 Dtool_62HUm_yX 276 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::restore_gamma
//       Access: Published, Virtual
//  Description: Restore original gamma setting.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
368 14 Dtool_62HUucW_ 0 4 387 1283 0 14 Dtool_62HUucW_ 749 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_texture_quality_override
//       Access: Published
//  Description: Specifies the global quality_level to be imposed for
//               all Textures rendered by this GSG.  This overrides
//               the value set on individual textures via
//               Texture::set_quality_level().  Set this to
//               Texture::QL_default in order to allow the individual
//               texture quality levels to be respected.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1343  13 quality_level 1 1357  
369 14 Dtool_62HUtIcw 0 6 388 1357 0 14 Dtool_62HUtIcw 485 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_texture_quality_override
//       Access: Published
//  Description: Returns the global quality_level override specified
//               by set_texture_quality_override.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
370 14 Dtool_62HUoQjB 0 6 389 1358 0 14 Dtool_62HUoQjB 0 1 4 this 3 1344  
371 14 Dtool_62HUfJaY 0 4 391 1283 0 14 Dtool_62HUfJaY 1337 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_flash_texture
//       Access: Published
//  Description: Sets the "flash texture".  This is a debug feature;
//               when enabled, the specified texture will begin
//               flashing in the scene, helping you to find it
//               visually.
//
//               The texture also flashes with a color code: blue for
//               mipmap level 0, yellow for mipmap level 1, and red
//               for mipmap level 2 or higher (even for textures that
//               don't have mipmaps).  This gives you an idea of the
//               choice of the texture size.  If it is blue, the
//               texture is being drawn the proper size or magnified;
//               if it is yellow, it is being minified a little bit;
//               and if it red, it is being minified considerably.  If
//               you see a red texture when you are right in front of
//               it, you should consider reducing the size of the
//               texture to avoid wasting texture memory.
//
//               Not all rendering backends support the flash_texture
//               feature.  Presently, it is only supported by OpenGL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1343  3 tex 1 1330  
372 14 Dtool_62HUHN7t 0 4 392 1283 0 14 Dtool_62HUHN7t 344 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::clear_flash_texture
//       Access: Published
//  Description: Resets the "flash texture", so that no textures will
//               flash.  See set_flash_texture().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
373 14 Dtool_62HUUOe5 0 7 393 1330 0 14 Dtool_62HUUOe5 344 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_flash_texture
//       Access: Published
//  Description: Returns the current "flash texture", if any, or NULL
//               if none.  See set_flash_texture().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
374 14 Dtool_62HUASTl 0 6 394 1286 0 14 Dtool_62HUASTl 290 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_vendor
//       Access: Public, Virtual
//  Description: Returns the vendor of the video card driver 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
375 14 Dtool_62HUtlGz 0 6 395 1286 0 14 Dtool_62HUtlGz 265 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_vendor
//       Access: Public, Virtual
//  Description: Returns GL_Renderer
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
376 14 Dtool_62HUABRK 0 6 396 1286 0 14 Dtool_62HUABRK 471 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version
//       Access: Public, Virtual
//  Description: Returns driver version
//               This has an implementation-defined meaning, and may
//               be "0" if the particular graphics implementation
//               does not provide a way to query this information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
377 14 Dtool_62HUO6BG 0 6 397 1282 0 14 Dtool_62HUO6BG 496 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version_major
//       Access: Public, Virtual
//  Description: Returns major version of the video driver.
//               This has an implementation-defined meaning, and may
//               be -1 if the particular graphics implementation
//               does not provide a way to query this information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
378 14 Dtool_62HUi6UH 0 6 398 1282 0 14 Dtool_62HUi6UH 500 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version_minor
//       Access: Public, Virtual
//  Description: Returns the minor version of the video driver.
//               This has an implementation-defined meaning, and may
//               be -1 if the particular graphics implementation
//               does not provide a way to query this information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
379 14 Dtool_62HUEEDF 0 6 399 1282 0 14 Dtool_62HUEEDF 306 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_shader_version_major
//       Access: Public, Virtual
//  Description: Returns the major version of the shader model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
380 14 Dtool_62HUtLxk 0 6 400 1282 0 14 Dtool_62HUtLxk 306 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_shader_version_minor
//       Access: Public, Virtual
//  Description: Returns the minor version of the shader model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
381 14 Dtool_62HUvuAc 0 6 401 1289 0 14 Dtool_62HUvuAc 549 // NDEBUG
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_scene
//       Access: Published
//  Description: Sets the SceneSetup object that indicates the initial
//               camera position, etc.  This must be called before
//               traversal begins.  Returns true if the scene is
//               acceptable, false if something's wrong.  This should
//               be called in the draw thread only.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1343  11 scene_setup 1 1360  
382 14 Dtool_62HUCYog 0 7 402 1360 0 14 Dtool_62HUCYog 279 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_scene
//       Access: Published, Virtual
//  Description: Returns the current SceneSetup object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1344  
383 14 Dtool_62HUc8_w 0 6 403 1289 0 14 Dtool_62HUc8_w 933 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::begin_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the beginning of drawing commands for a "scene"
//               (usually a particular DisplayRegion) within a frame.
//               All 3-D drawing commands, except the clear operation,
//               must be enclosed within begin_scene() .. end_scene().
//               This must be called in the draw thread.
//
//               The return value is true if successful (in which case
//               the scene will be drawn and end_scene() will be
//               called later), or false if unsuccessful (in which
//               case nothing will be drawn and end_scene() will not
//               be called).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
384 14 Dtool_62HUEBkF 0 4 404 1283 0 14 Dtool_62HUEBkF 565 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::end_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the end of drawing commands for a "scene" (usually a
//               particular DisplayRegion) within a frame.  All 3-D
//               drawing commands, except the clear operation, must be
//               enclosed within begin_scene() .. end_scene().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1343  
385 14 Dtool_62HUX9JS 0 7 405 1280 0 14 Dtool_62HUX9JS 0 0 
386 14 Dtool_62HU6R3_ 0 7 415 1343 0 14 Dtool_62HU6R3_ 1096 // Filename: graphicsOutput.I
// Created by:  drose (06Feb04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_gsg
//       Access: Published
//  Description: Returns the GSG that is associated with this window.
//               There is a one-to-one association between windows and
//               GSG's.
//
//               This may return NULL if the graphics context has not
//               yet been created for the window, e.g. before the
//               first frame has rendered; or after the window has
//               been closed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
387 14 Dtool_62HURmhe 0 7 416 1278 0 14 Dtool_62HURmhe 586 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this window is
//               associated with.  It is possible that the
//               GraphicsPipe might have been deleted while an
//               outstanding PT(GraphicsOutput) prevented all of its
//               children windows from also being deleted; in this
//               unlikely case, get_pipe() may return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
388 14 Dtool_62HUs2Rt 0 7 417 1348 0 14 Dtool_62HUs2Rt 459 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this output.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
389 14 Dtool_62HUhafm 0 6 418 1286 0 14 Dtool_62HUhafm 308 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_name
//       Access: Published
//  Description: Returns the name that was passed to the
//               GraphicsOutput constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
390 14 Dtool_62HUZzOT 0 6 419 1282 0 14 Dtool_62HUZzOT 539 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::count_textures
//       Access: Published
//  Description: If the GraphicsOutput is set to render into a
//               texture, returns the number of textures that are
//               being rendered into.  Normally, the textures would
//               be associated with different buffers - a color
//               texture, a depth texture, and a stencil texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
391 14 Dtool_62HUL5u4 0 6 420 1289 0 14 Dtool_62HUL5u4 318 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_texture
//       Access: Published
//  Description: Returns true if the GraphicsOutput is rendering 
//               into any textures at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
392 14 Dtool_62HUOT2F 0 7 421 1330 0 14 Dtool_62HUOT2F 725 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture
//       Access: Published
//  Description: Returns the nth texture into which the GraphicsOutput
//               renders.  Returns NULL if there is no such texture.
//
//               If the texture is non-NULL, it may be applied to
//               geometry to be rendered for any other windows or
//               outputs that share the same GSG as this
//               GraphicsOutput.  The effect is undefined for windows
//               that share a different GSG; usually in these cases
//               the texture will be invalid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1362  1 i 1 1282  
393 14 Dtool_62HUjbtr 0 7 421 1330 0 14 Dtool_62HUjbtr 725 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture
//       Access: Published
//  Description: Returns the nth texture into which the GraphicsOutput
//               renders.  Returns NULL if there is no such texture.
//
//               If the texture is non-NULL, it may be applied to
//               geometry to be rendered for any other windows or
//               outputs that share the same GSG as this
//               GraphicsOutput.  The effect is undefined for windows
//               that share a different GSG; usually in these cases
//               the texture will be invalid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
394 14 Dtool_62HUr9lk 0 6 422 1233 0 14 Dtool_62HUr9lk 377 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_plane
//       Access: Published
//  Description: Returns the RenderTexturePlane associated with the
//               nth render-texture.  Returns 0 if there is no such
//               texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1362  1 i 1 1282  
395 14 Dtool_62HUtRfb 0 6 422 1233 0 14 Dtool_62HUtRfb 377 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_plane
//       Access: Published
//  Description: Returns the RenderTexturePlane associated with the
//               nth render-texture.  Returns 0 if there is no such
//               texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
396 14 Dtool_62HUtK3h 0 6 423 1253 0 14 Dtool_62HUtK3h 378 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_rtm_mode
//       Access: Published
//  Description: Returns the RenderTextureMode associated with the
//               nth render-texture.  Returns RTM_none if there is
//               no such texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1362  1 i 1 1282  
397 14 Dtool_62HUeXTd 0 6 423 1253 0 14 Dtool_62HUeXTd 378 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_rtm_mode
//       Access: Published
//  Description: Returns the RenderTextureMode associated with the
//               nth render-texture.  Returns RTM_none if there is
//               no such texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
398 14 Dtool_62HUy_19 0 4 424 1283 0 14 Dtool_62HUy_19 387 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_render_textures
//       Access: Published
//  Description: If the GraphicsOutput is currently rendering to
//               a texture, then all textures are dissociated from
//               the GraphicsOuput.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
399 14 Dtool_62HUEdHR 0 4 425 1283 0 14 Dtool_62HUEdHR 1875 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::add_render_texture
//       Access: Published
//  Description: Creates a new Texture object, suitable for rendering
//               the contents of this buffer into, and appends it to
//               the list of render textures.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created, in which case you may call
//               get_texture() to retrieve the new texture pointer.
//
//               You can specify a bitplane to attach the texture to.
//               the legal choices are:
//
//               * RTP_depth
//               * RTP_depth_stencil
//               * RTP_color
//               * RTP_aux_rgba_0
//               * RTP_aux_rgba_1
//               * RTP_aux_rgba_2
//               * RTP_aux_rgba_3
//
//               If you do not specify a bitplane to attach the
//               texture to, this routine will use a default based
//               on the texture's format:
//
//               * F_depth_component attaches to RTP_depth
//               * F_depth_stencil attaches to RTP_depth_stencil
//               * all other formats attach to RTP_color.
//
//               The texture's format will be changed to match
//               the format of the bitplane to which it is attached.
//               For example, if you pass in an F_rgba texture and
//               order that it be attached to RTP_depth_stencil, it will turn
//               into an F_depth_stencil texture.
//
//               Also see make_texture_buffer(), which is a
//               higher-level interface for preparing
//               render-to-a-texture mode.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1315  3 tex 1 1330  4 mode 1 1253  8 bitplane 1 1233  
400 14 Dtool_62HUyxSR 0 4 425 1283 0 14 Dtool_62HUyxSR 1875 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::add_render_texture
//       Access: Published
//  Description: Creates a new Texture object, suitable for rendering
//               the contents of this buffer into, and appends it to
//               the list of render textures.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created, in which case you may call
//               get_texture() to retrieve the new texture pointer.
//
//               You can specify a bitplane to attach the texture to.
//               the legal choices are:
//
//               * RTP_depth
//               * RTP_depth_stencil
//               * RTP_color
//               * RTP_aux_rgba_0
//               * RTP_aux_rgba_1
//               * RTP_aux_rgba_2
//               * RTP_aux_rgba_3
//
//               If you do not specify a bitplane to attach the
//               texture to, this routine will use a default based
//               on the texture's format:
//
//               * F_depth_component attaches to RTP_depth
//               * F_depth_stencil attaches to RTP_depth_stencil
//               * all other formats attach to RTP_color.
//
//               The texture's format will be changed to match
//               the format of the bitplane to which it is attached.
//               For example, if you pass in an F_rgba texture and
//               order that it be attached to RTP_depth_stencil, it will turn
//               into an F_depth_stencil texture.
//
//               Also see make_texture_buffer(), which is a
//               higher-level interface for preparing
//               render-to-a-texture mode.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1315  3 tex 1 1330  4 mode 1 1253  
401 14 Dtool_62HUcdjE 0 4 426 1283 0 14 Dtool_62HUcdjE 494 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::setup_render_texture
//       Access: Published
//  Description: This is a deprecated interface that made sense back
//               when GraphicsOutputs could only render into one
//               texture at a time.  From now on, use
//               clear_render_textures and add_render_texture
//               instead.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1315  3 tex 1 1330  10 allow_bind 1 1289  6 to_ram 1 1289  
402 14 Dtool_62HUpVEG 0 6 427 1282 0 14 Dtool_62HUpVEG 746 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_x_size
//       Access: Published
//  Description: Returns the visible width of the window or buffer, if
//               it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
403 14 Dtool_62HU5zZG 0 6 428 1282 0 14 Dtool_62HU5zZG 747 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_y_size
//       Access: Published
//  Description: Returns the visible height of the window or buffer,
//               if it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
404 14 Dtool_62HUrFNb 0 6 429 1282 0 14 Dtool_62HUrFNb 440 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_x_size
//       Access: Published
//  Description: Returns the internal width of the window or buffer.
//               This is almost always the same as get_x_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
405 14 Dtool_62HUXHNp 0 6 430 1282 0 14 Dtool_62HUXHNp 441 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_y_size
//       Access: Published
//  Description: Returns the internal height of the window or buffer.
//               This is almost always the same as get_y_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
406 14 Dtool_62HUfzZk 0 6 431 1282 0 14 Dtool_62HUfzZk 522 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_x_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel width of the left eye, based on scaling
//               get_x_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_x_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
407 14 Dtool_62HUtXck 0 6 432 1282 0 14 Dtool_62HUtXck 523 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_y_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel height of the left eye, based on scaling
//               get_y_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_y_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
408 14 Dtool_62HUpDlt 0 6 433 1282 0 14 Dtool_62HUpDlt 525 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_x_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel width of the right eye, based on scaling
//               get_x_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_x_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
409 14 Dtool_62HUp40u 0 6 434 1282 0 14 Dtool_62HUp40u 526 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_y_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel height of the right eye, based on scaling
//               get_y_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_y_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
410 14 Dtool_62HUqgyg 0 6 435 1289 0 14 Dtool_62HUqgyg 530 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_size
//       Access: Published
//  Description: Returns true if the size of the window/frame buffer
//               is known, false otherwise.  In certain cases the size
//               may not be known until after the object has been
//               fully created.  Also, certain objects (like windows)
//               may change size spontaneously.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
411 14 Dtool_62HUewNA 0 6 436 1289 0 14 Dtool_62HUewNA 326 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_valid
//       Access: Published
//  Description: Returns true if the output is fully created and ready
//               for rendering, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
412 14 Dtool_62HUf9W_ 0 6 437 1289 0 14 Dtool_62HUf9W_ 375 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_nonzero_size
//       Access: Published
//  Description: Returns true if the output has a nonzero size in both
//               X and Y, or false if it is zero (and therefore
//               invalid).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
413 14 Dtool_62HUKShL 0 4 438 1283 0 14 Dtool_62HUKShL 380 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsOutput.  If the GraphicsOutput is marked
//               inactive, nothing is rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  6 active 1 1289  
414 14 Dtool_62HUCPRe 0 6 439 1289 0 14 Dtool_62HUCPRe 324 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_active
//       Access: Published, Virtual
//  Description: Returns true if the window is ready to be rendered
//               into, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
415 14 Dtool_62HUHoke 0 4 440 1283 0 14 Dtool_62HUHoke 1275 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_one_shot
//       Access: Published
//  Description: Changes the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will render the
//               current frame and then automatically set itself
//               inactive.  This is particularly useful for buffers
//               that are created for the purposes of
//               render-to-texture, for static textures that don't
//               need to be continually re-rendered once they have
//               been rendered the first time.
//
//               Setting the buffer inactive is not the same thing as
//               destroying it.  You are still responsible for passing
//               this buffer to GraphicsEngine::remove_window() when
//               you no longer need the texture, in order to clean up
//               fully.  (However, you should not call remove_window()
//               on this buffer while the texture is still needed,
//               because depending on the render-to-texture mechanism
//               in use, this may invalidate the texture contents.)
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  8 one_shot 1 1289  
416 14 Dtool_62HU2vFO 0 6 441 1289 0 14 Dtool_62HU2vFO 427 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_one_shot
//       Access: Published
//  Description: Returns the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will
//               automatically set itself inactive after the next
//               frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
417 14 Dtool_62HUNoPm 0 4 442 1283 0 14 Dtool_62HUNoPm 947 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_inverted
//       Access: Published
//  Description: Changes the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down and backwards, that is, inverted
//               as if viewed through a mirror placed on the floor.
//
//               This is primarily intended to support DirectX (and a
//               few buggy OpenGL graphics drivers) that perform a
//               framebuffer-to-texture copy upside-down from the
//               usual OpenGL (and Panda) convention.  Panda will
//               automatically set this flag for offscreen buffers on
//               hardware that is known to do this, to compensate when
//               rendering offscreen into a texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  8 inverted 1 1289  
418 14 Dtool_62HUx4vV 0 6 443 1289 0 14 Dtool_62HUx4vV 459 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_inverted
//       Access: Published
//  Description: Returns the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down, flipped like a mirror along the X
//               axis.  See set_inverted().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
419 14 Dtool_62HUnTba 0 4 444 1283 0 14 Dtool_62HUnTba 688 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_swap_eyes
//       Access: Public
//  Description: Changes the "swap eyes" flag.  This flag is normally
//               false.  When it is true, the left and right channels
//               of a stereo DisplayRegion are sent to the opposite
//               channels in the rendering backend.  This is meant to
//               work around hardware that inadvertently swaps the
//               output channels, or hardware for which it cannot be
//               determined which channel is which until runtime.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  9 swap_eyes 1 1289  
420 14 Dtool_62HUjPni 0 6 445 1289 0 14 Dtool_62HUjPni 316 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_swap_eyes
//       Access: Public
//  Description: Returns the current setting of the "swap eyes" flag.
//               See set_swap_eyes().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
421 14 Dtool_62HUPGYQ 0 4 446 1283 0 14 Dtool_62HUPGYQ 959 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_red_blue_stereo
//       Access: Published
//  Description: Enables red-blue stereo mode on this particular
//               window.  When red-blue stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render in the red (or specified) channel only, while
//               DisplayRegions that have the "right" channel set will
//               render in the blue (or specified) channel only.
//
//               The remaining two parameters specify the particular
//               color channel(s) to associate with each eye.  Use the
//               bits defined in ColorWriteAttrib::Channels.
//
//               This can be used to achieve a cheesy stereo mode in
//               the absence of hardware-supported stereo.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1315  15 red_blue_stereo 1 1289  19 left_eye_color_mask 1 1285  20 right_eye_color_mask 1 1285  
422 14 Dtool_62HUgl0N 0 6 447 1289 0 14 Dtool_62HUgl0N 357 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_red_blue_stereo
//       Access: Published
//  Description: Returns whether red-blue stereo mode is in effect for
//               this particular window.  See set_red_blue_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
423 14 Dtool_62HUhaUJ 0 6 448 1285 0 14 Dtool_62HUhaUJ 470 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_left_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               left-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
424 14 Dtool_62HUoNZy 0 6 449 1285 0 14 Dtool_62HUoNZy 472 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_right_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               right-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
425 14 Dtool_62HUXkdS 0 4 450 1283 0 14 Dtool_62HUXkdS 1007 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_side_by_side_stereo
//       Access: Published
//  Description: Enables side-by-side stereo mode on this particular
//               window.  When side-by-side stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render on the part of the window specified by
//               sbs_left_dimensions (typically the left half: (0,
//               0.5, 0, 1)), while DisplayRegions that have the
//               "right" channel set will render on the part of the
//               window specified by sbs_right_dimensions (typically
//               the right half: (0.5, 1, 0, 1)).
//
//               This is commonly used in a dual-monitor mode, where a
//               window is opened that spans two monitors, and each
//               monitor represents a different eye.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  19 side_by_side_stereo 1 1289  
426 14 Dtool_62HUYrlA 0 4 450 1283 0 14 Dtool_62HUYrlA 1007 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_side_by_side_stereo
//       Access: Published
//  Description: Enables side-by-side stereo mode on this particular
//               window.  When side-by-side stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render on the part of the window specified by
//               sbs_left_dimensions (typically the left half: (0,
//               0.5, 0, 1)), while DisplayRegions that have the
//               "right" channel set will render on the part of the
//               window specified by sbs_right_dimensions (typically
//               the right half: (0.5, 1, 0, 1)).
//
//               This is commonly used in a dual-monitor mode, where a
//               window is opened that spans two monitors, and each
//               monitor represents a different eye.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1315  19 side_by_side_stereo 1 1289  19 sbs_left_dimensions 1 1293  20 sbs_right_dimensions 1 1293  
427 14 Dtool_62HU4I_i 0 6 451 1289 0 14 Dtool_62HU4I_i 369 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_side_by_side_stereo
//       Access: Published
//  Description: Returns whether side-by-side stereo mode is in effect for
//               this particular window.  See set_side_by_side_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
428 14 Dtool_62HUD7Sq 0 6 452 1293 0 14 Dtool_62HUD7Sq 458 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_dimensions
//       Access: Published
//  Description: Returns the effective sub-region of the window for
//               displaying the left channel, if side-by-side stereo
//               mode is in effect for the window.  See
//               set_side_by_side_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
429 14 Dtool_62HUf7uq 0 6 453 1293 0 14 Dtool_62HUf7uq 460 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_dimensions
//       Access: Published
//  Description: Returns the effective sub-region of the window for
//               displaying the right channel, if side-by-side stereo
//               mode is in effect for the window.  See
//               set_side_by_side_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
430 14 Dtool_62HUjFO0 0 6 454 1338 0 14 Dtool_62HUjFO0 282 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_properties
//       Access: Published
//  Description: Returns the framebuffer properties of the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
431 14 Dtool_62HUp1Tf 0 6 455 1289 0 14 Dtool_62HUp1Tf 447 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_stereo
//       Access: Published
//  Description: Returns Returns true if this window can render stereo
//               DisplayRegions, either through red-blue stereo (see
//               set_red_blue_stereo()) or through true hardware
//               stereo rendering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
432 14 Dtool_62HUjxx5 0 4 456 1283 0 14 Dtool_62HUjxx5 386 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_delete_flag
//       Access: Published
//  Description: Resets the delete flag, so the GraphicsOutput will
//               not be automatically deleted before the beginning of
//               the next frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
433 14 Dtool_62HUsJD_ 0 6 457 1289 0 14 Dtool_62HUsJD_ 460 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_delete_flag
//       Access: Published
//  Description: Returns the current setting of the delete flag.  When
//               this is true, the GraphicsOutput will automatically
//               be removed before the beginning of the next frame by
//               the GraphicsEngine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
434 14 Dtool_62HUQqjF 0 4 458 1283 0 14 Dtool_62HUQqjF 345 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_sort
//       Access: Published, Virtual
//  Description: Adjusts the sorting order of this particular
//               GraphicsOutput, relative to other GraphicsOutputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  4 sort 1 1282  
435 14 Dtool_62HUcE4c 0 6 459 1282 0 14 Dtool_62HUcE4c 432 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sort
//       Access: Published
//  Description: Returns the sorting order of this particular
//               GraphicsOutput.  The various GraphicsOutputs within a
//               particular thread will be rendered in the indicated
//               order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
436 14 Dtool_62HUyqqS 0 4 460 1283 0 14 Dtool_62HUyqqS 1026 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_child_sort
//       Access: Published
//  Description: Specifies the sort value of future offscreen buffers
//               created by make_texture_sort().
//
//               The purpose of this method is to allow the user to
//               limit the sort value chosen for a buffer created via
//               make_texture_buffer().  Normally, this buffer will be
//               assigned a value of get_sort() - 1, so that it
//               will be rendered before this window is rendered; but
//               sometimes this isn't sufficiently early, especially
//               if other buffers also have a view into the same
//               scene.
//
//               If you specify a value here, then new buffers created
//               via make_texture_buffer() will be given that sort
//               value instead of get_sort() - 1.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  10 child_sort 1 1282  
437 14 Dtool_62HU_qOW 0 4 461 1283 0 14 Dtool_62HU_qOW 390 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_child_sort
//       Access: Published
//  Description: Resets the sort value of future offscreen buffers
//               created by make_texture_sort() to the default value.
//               See set_child_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
438 14 Dtool_62HUx5eS 0 6 462 1282 0 14 Dtool_62HUx5eS 351 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_child_sort
//       Access: Published
//  Description: Returns the sort value of future offscreen buffers
//               created by make_texture_sort(). See set_child_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
439 14 Dtool_62HUys0m 0 4 463 1283 0 14 Dtool_62HUys0m 376 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::trigger_copy
//       Access: Published
//  Description: When the GraphicsOutput is in triggered copy mode,
//               this function triggers the copy (at the end of the
//               next frame).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
440 14 Dtool_62HUDSih 0 7 464 1314 812 14 Dtool_62HUDSih 652 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
441 14 Dtool_62HUB1Dz 0 7 464 1314 812 14 Dtool_62HUB1Dz 735 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  10 dimensions 1 1293  
442 14 Dtool_62HUefSE 0 7 464 1314 812 14 Dtool_62HUefSE 735 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1315  1 l 1 1296  1 r 1 1296  1 b 1 1296  1 t 1 1296  
443 14 Dtool_62HUrH1t 0 7 465 1314 812 14 Dtool_62HUrH1t 732 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
444 14 Dtool_62HUN35Q 0 7 465 1314 812 14 Dtool_62HUN35Q 815 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  10 dimensions 1 1293  
445 14 Dtool_62HUN6dz 0 7 465 1314 812 14 Dtool_62HUN6dz 732 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
//////////////////////////////////////////////////////////////////// 5 4 this 3 1315  1 l 1 1296  1 r 1 1296  1 b 1 1296  1 t 1 1296  
446 14 Dtool_62HUbYGK 0 7 466 1336 812 14 Dtool_62HUbYGK 428 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
447 14 Dtool_62HUKmoh 0 7 466 1336 812 14 Dtool_62HUKmoh 511 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  10 dimensions 1 1293  
448 14 Dtool_62HUa2ry 0 7 466 1336 812 14 Dtool_62HUa2ry 428 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1315  1 l 1 1296  1 r 1 1296  1 b 1 1296  1 t 1 1296  
449 14 Dtool_62HUyMVJ 0 6 467 1289 0 14 Dtool_62HUyMVJ 492 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_display_region
//       Access: Published
//  Description: Removes the indicated DisplayRegion from the window,
//               and destructs it if there are no other references.
//
//               Returns true if the DisplayRegion is found and
//               removed, false if it was not a part of the window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  14 display_region 1 1314  
450 14 Dtool_62HUVlIl 0 4 468 1283 0 14 Dtool_62HUVlIl 359 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_all_display_regions
//       Access: Published
//  Description: Removes all display regions from the window, except
//               the default one that is created with the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
451 14 Dtool_62HUlL68 0 7 469 1314 812 14 Dtool_62HUlL68 951 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_overlay_display_region
//       Access: Published
//  Description: Returns the special "overlay" DisplayRegion that is
//               created for each window or buffer.  This
//               DisplayRegion covers the entire window, but cannot be
//               used for rendering.  It is a placeholder only, to
//               indicate the dimensions of the window, and is usually
//               used internally for purposes such as clearing the
//               window, or grabbing a screenshot of the window.
//
//               There are very few applications that require access
//               to this DisplayRegion.  Normally, you should create
//               your own DisplayRegion that covers the window, if you
//               want to render to the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
452 14 Dtool_62HUXV31 0 4 470 1283 0 14 Dtool_62HUXV31 1132 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_overlay_display_region
//       Access: Published
//  Description: Replaces the special "overlay" DisplayRegion that is
//               created for each window or buffer.  See
//               get_overlay_display_region().  This must be a new
//               DisplayRegion that has already been created for this
//               window, for instance via a call to
//               make_mono_display_region().  You are responsible for
//               ensuring that the new DisplayRegion covers the entire
//               window.  The previous overlay display region is not
//               automatically removed; you must explicitly call
//               remove_display_region() on it after replacing it with
//               this method, if you wish it to be removed.
//
//               Normally, there is no reason to change the overlay
//               DisplayRegion, so this method should be used only
//               in very unusual circumstances.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  14 display_region 1 1314  
453 14 Dtool_62HUHxxm 0 6 471 1282 0 14 Dtool_62HUHxxm 355 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_display_regions
//       Access: Published
//  Description: Returns the number of DisplayRegions that have
//               been created within the window, active or otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
454 14 Dtool_62HU1bhW 0 7 472 1314 812 14 Dtool_62HU1bhW 542 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_display_region
//       Access: Published
//  Description: Returns the nth DisplayRegion of those that have been
//               created within the window.  This may return NULL if n
//               is out of bounds; particularly likely if the number
//               of display regions has changed since the last call to
//               get_num_display_regions().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1362  1 n 1 1282  
455 14 Dtool_62HU_TMd 0 6 473 1282 0 14 Dtool_62HU_TMd 348 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_active_display_regions
//       Access: Published
//  Description: Returns the number of active DisplayRegions that have
//               been created within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
456 14 Dtool_62HUjI4S 0 7 474 1314 812 14 Dtool_62HUjI4S 563 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_active_display_region
//       Access: Published
//  Description: Returns the nth active DisplayRegion of those that
//               have been created within the window.  This may return
//               NULL if n is out of bounds; particularly likely if
//               the number of display regions has changed since the
//               last call to get_num_active_display_regions().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1362  1 n 1 1282  
457 14 Dtool_62HUOgc9 0 7 475 1315 1011 14 Dtool_62HUOgc9 1790 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window().
//////////////////////////////////////////////////////////////////// 7 4 this 3 1315  4 name 1 1286  6 x_size 1 1282  6 y_size 1 1282  3 tex 1 1330  6 to_ram 1 1289  3 fbp 1 1337  
458 14 Dtool_62HUoo09 0 7 475 1315 1011 14 Dtool_62HUoo09 1790 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window().
//////////////////////////////////////////////////////////////////// 6 4 this 3 1315  4 name 1 1286  6 x_size 1 1282  6 y_size 1 1282  3 tex 1 1330  6 to_ram 1 1289  
459 14 Dtool_62HU54eM 0 7 475 1315 1011 14 Dtool_62HU54eM 1790 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window().
//////////////////////////////////////////////////////////////////// 5 4 this 3 1315  4 name 1 1286  6 x_size 1 1282  6 y_size 1 1282  3 tex 1 1330  
460 14 Dtool_62HU6cMF 0 7 475 1315 1011 14 Dtool_62HU6cMF 1790 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window().
//////////////////////////////////////////////////////////////////// 4 4 this 3 1315  4 name 1 1286  6 x_size 1 1282  6 y_size 1 1282  
461 14 Dtool_62HUSG5G 0 7 476 1315 1011 14 Dtool_62HUSG5G 1206 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
//////////////////////////////////////////////////////////////////// 7 4 this 3 1315  4 name 1 1286  4 size 1 1282  10 camera_rig 1 1321  11 camera_mask 1 1364  6 to_ram 1 1289  3 fbp 1 1337  
462 14 Dtool_62HUA8GH 0 7 476 1315 1011 14 Dtool_62HUA8GH 1206 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1315  4 name 1 1286  4 size 1 1282  10 camera_rig 1 1321  11 camera_mask 1 1364  6 to_ram 1 1289  
463 14 Dtool_62HUEFcu 0 7 476 1315 1011 14 Dtool_62HUEFcu 1206 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1315  4 name 1 1286  4 size 1 1282  10 camera_rig 1 1321  11 camera_mask 1 1364  
464 14 Dtool_62HUVD6z 0 7 476 1315 1011 14 Dtool_62HUVD6z 1206 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1315  4 name 1 1286  4 size 1 1282  10 camera_rig 1 1321  
465 14 Dtool_62HUeFZK 0 7 477 1328 0 14 Dtool_62HUeFZK 806 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_screenshot_filename
//       Access: Published, Static
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The default filename is
//               generated from the supplied prefix and from the
//               Config variable screenshot-filename, which contains
//               the following strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 1 6 prefix 1 1286  
466 14 Dtool_62HUPz_F 0 7 477 1328 0 14 Dtool_62HUPz_F 806 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_screenshot_filename
//       Access: Published, Static
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The default filename is
//               generated from the supplied prefix and from the
//               Config variable screenshot-filename, which contains
//               the following strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 0 
467 14 Dtool_62HUbMge 0 7 478 1328 0 14 Dtool_62HUbMge 471 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  6 prefix 1 1286  
468 14 Dtool_62HU8zcS 0 7 478 1328 0 14 Dtool_62HU8zcS 471 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
469 14 Dtool_62HUrjOY 0 6 479 1289 0 14 Dtool_62HUrjOY 600 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  The image comment is an optional user
//               readable string that will be saved with the header
//               of the image (if the file format supports embedded
//               data; for example jpg allows comments).  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1315  8 filename 1 1308  13 image_comment 1 1286  
470 14 Dtool_62HUoVLU 0 6 479 1289 0 14 Dtool_62HUoVLU 600 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  The image comment is an optional user
//               readable string that will be saved with the header
//               of the image (if the file format supports embedded
//               data; for example jpg allows comments).  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  8 filename 1 1308  
471 14 Dtool_62HUKXv9 0 7 480 1330 0 14 Dtool_62HUKXv9 373 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer and returns it as Texture, or NULL on
//               failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
472 14 Dtool_62HUIsHW 0 6 480 1289 0 14 Dtool_62HUIsHW 399 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  5 image 1 1331  
473 14 Dtool_62HUUNk3 0 7 481 1321 0 14 Dtool_62HUUNk3 959 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_card
//       Access: Published
//  Description: Returns a PandaNode containing a square polygon.
//               The dimensions are (-1,0,-1) to (1,0,1). The texture
//               coordinates are such that the texture of this
//               GraphicsOutput is aligned properly to the polygon.
//               The GraphicsOutput promises to surgically update
//               the Geom inside the PandaNode if necessary to maintain
//               this invariant.
//
//               Each invocation of this function returns a freshly-
//               allocated PandaNode.  You can therefore safely modify
//               the RenderAttribs of the PandaNode.  The
//               PandaNode is initially textured with the texture
//               of this GraphicOutput.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
474 14 Dtool_62HU2Eyc 0 6 482 1289 0 14 Dtool_62HU2Eyc 386 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::share_depth_buffer
//       Access: Published, Virtual
//  Description: Will attempt to use the depth buffer of the input
//               graphics_output. The buffer sizes must be exactly
//               the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1315  15 graphics_output 1 1315  
475 14 Dtool_62HUX5g9 0 4 483 1283 0 14 Dtool_62HUX5g9 282 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::unshare_depth_buffer
//       Access: Published, Virtual
//  Description: Discontinue sharing the depth buffer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
476 14 Dtool_62HUHdDD 0 6 484 1289 0 14 Dtool_62HUHdDD 477 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_supports_render_texture
//       Access: Published, Virtual
//  Description: Returns true if this particular GraphicsOutput can
//               render directly into a texture, or false if it must
//               always copy-to-texture at the end of each frame to
//               achieve this effect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
477 14 Dtool_62HUWtdR 0 6 485 1289 0 14 Dtool_62HUWtdR 335 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::flip_ready
//       Access: Published, Virtual
//  Description: Returns true if a frame has been rendered and needs
//               to be flipped, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
478 14 Dtool_62HUybdT 0 7 486 1315 1011 14 Dtool_62HUybdT 502 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_host
//       Access: Published, Virtual
//  Description: This is normally called only from within
//               make_texture_buffer().  When called on a
//               ParasiteBuffer, it returns the host of that buffer;
//               but when called on some other buffer, it returns the
//               buffer itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1315  
479 14 Dtool_62HUg2P6 0 7 487 1280 0 14 Dtool_62HUg2P6 0 0 
480 14 Dtool_62HU_FL1 0 7 408 1366 0 14 Dtool_62HU_FL1 0 1 4 this 3 1315  
481 14 Dtool_62HUlfJN 0 7 409 1315 1011 14 Dtool_62HUlfJN 0 1 4 this 3 1366  
482 14 Dtool_62HUpLTb 0 6 410 1290 0 14 Dtool_62HUpLTb 0 1 4 this 3 1315  
483 14 Dtool_62HUuJDd 0 7 411 1315 1011 14 Dtool_62HUuJDd 0 1 4 this 3 1290  
484 14 Dtool_62HU_Z5p 0 4 490 1283 0 14 Dtool_62HU_Z5p 288 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_down
//       Access: Public
//  Description: Records that the indicated button has been depressed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1367  6 button 1 1368  4 time 1 1370  
485 14 Dtool_62HUEXB7 0 4 490 1283 0 14 Dtool_62HUEXB7 288 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_down
//       Access: Public
//  Description: Records that the indicated button has been depressed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1367  6 button 1 1368  
486 14 Dtool_62HUTe4Z 0 4 491 1283 0 14 Dtool_62HUTe4Z 465 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_resume_down
//       Access: Public
//  Description: Records that the indicated button was depressed
//               earlier, and we only just detected the event after
//               the fact.  This is mainly useful for tracking the
//               state of modifier keys.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1367  6 button 1 1368  4 time 1 1370  
487 14 Dtool_62HUCZR0 0 4 491 1283 0 14 Dtool_62HUCZR0 465 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_resume_down
//       Access: Public
//  Description: Records that the indicated button was depressed
//               earlier, and we only just detected the event after
//               the fact.  This is mainly useful for tracking the
//               state of modifier keys.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1367  6 button 1 1368  
488 14 Dtool_62HUEdRe 0 4 492 1283 0 14 Dtool_62HUEdRe 285 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_up
//       Access: Public
//  Description: Records that the indicated button has been released.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1367  6 button 1 1368  4 time 1 1370  
489 14 Dtool_62HUt5Ix 0 4 492 1283 0 14 Dtool_62HUt5Ix 285 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_up
//       Access: Public
//  Description: Records that the indicated button has been released.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1367  6 button 1 1368  
490 14 Dtool_62HU___s 0 4 493 1283 0 14 Dtool_62HU___s 306 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::keystroke
//       Access: Public
//  Description: Records that the indicated keystroke has been
//               generated.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1367  7 keycode 1 1282  4 time 1 1370  
491 14 Dtool_62HUW_pD 0 4 493 1283 0 14 Dtool_62HUW_pD 306 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::keystroke
//       Access: Public
//  Description: Records that the indicated keystroke has been
//               generated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1367  7 keycode 1 1282  
492 14 Dtool_62HUXeYh 0 4 494 1283 0 14 Dtool_62HUXeYh 463 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::candidate
//       Access: Public
//  Description: Records that the indicated candidate string has been
//               highlighted.  This is used to implement IME support
//               for typing in international languages, especially
//               Chinese/Japanese/Korean.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1367  16 candidate_string 1 1286  15 highlight_start 1 1285  13 highlight_end 1 1285  10 cursor_pos 1 1285  
493 14 Dtool_62HUeu_I 0 4 495 1283 0 14 Dtool_62HUeu_I 668 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::focus_lost
//       Access: Public
//  Description: This should be called when the window focus is lost,
//               so that we may miss upcoming button events
//               (especially "up" events) for the next period of time.
//               It generates keyboard and mouse "up" events for those
//               buttons that we previously sent unpaired "down"
//               events, so that the Panda application will believe
//               all buttons are now released.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1367  4 time 1 1370  
494 14 Dtool_62HUXnr9 0 4 495 1283 0 14 Dtool_62HUXnr9 668 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::focus_lost
//       Access: Public
//  Description: This should be called when the window focus is lost,
//               so that we may miss upcoming button events
//               (especially "up" events) for the next period of time.
//               It generates keyboard and mouse "up" events for those
//               buttons that we previously sent unpaired "down"
//               events, so that the Panda application will believe
//               all buttons are now released.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1367  
495 14 Dtool_62HUgZL7 0 4 496 1283 0 14 Dtool_62HUgZL7 292 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_down
//       Access: Public
//  Description: Records that the indicated button has been depressed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1367  6 button 1 1368  4 time 1 1370  
496 14 Dtool_62HUIkQw 0 4 496 1283 0 14 Dtool_62HUIkQw 292 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_down
//       Access: Public
//  Description: Records that the indicated button has been depressed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1367  6 button 1 1368  
497 14 Dtool_62HUpxaa 0 4 497 1283 0 14 Dtool_62HUpxaa 289 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_up
//       Access: Public
//  Description: Records that the indicated button has been released.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1367  6 button 1 1368  4 time 1 1370  
498 14 Dtool_62HUOUoH 0 4 497 1283 0 14 Dtool_62HUOUoH 289 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_up
//       Access: Public
//  Description: Records that the indicated button has been released.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1367  6 button 1 1368  
499 14 Dtool_62HUI9ni 0 4 498 1283 0 14 Dtool_62HUI9ni 413 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_in_window
//       Access: Public
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is within the window, at
//               the given pixel coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1367  1 x 1 1370  1 y 1 1370  4 time 1 1370  
500 14 Dtool_62HUdUWX 0 4 498 1283 0 14 Dtool_62HUdUWX 413 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_in_window
//       Access: Public
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is within the window, at
//               the given pixel coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1367  1 x 1 1370  1 y 1 1370  
501 14 Dtool_62HU1UCL 0 4 499 1283 0 14 Dtool_62HU1UCL 395 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_out_of_window
//       Access: Public
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is no longer within the
//               window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1367  4 time 1 1370  
502 14 Dtool_62HUSIYw 0 4 499 1283 0 14 Dtool_62HUSIYw 395 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_out_of_window
//       Access: Public
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is no longer within the
//               window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1367  
503 14 Dtool_62HU4aIN 0 4 500 1283 0 14 Dtool_62HU4aIN 281 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer
//       Access: Public
//  Description: Records that a mouse movement has taken place.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1367  5 inwin 1 1289  1 x 1 1370  1 y 1 1370  4 time 1 1370  
504 14 Dtool_62HUPUp1 0 6 503 1282 0 14 Dtool_62HUPUp1 0 1 4 this 3 1371  
505 14 Dtool_62HUHDz1 0 6 504 1282 0 14 Dtool_62HUHDz1 0 1 4 this 3 1371  
506 14 Dtool_62HUA_Db 0 6 505 1282 0 14 Dtool_62HUA_Db 0 1 4 this 3 1371  
507 14 Dtool_62HUMWv5 0 6 506 1282 0 14 Dtool_62HUMWv5 0 1 4 this 3 1371  
508 14 Dtool_62HU_0he 0 6 510 1282 0 14 Dtool_62HU_0he 280 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_hwnd
//       Access: Published
//  Description: Returns the Windows proc hwnd parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1372  
509 14 Dtool_62HUPC0q 0 6 511 1282 0 14 Dtool_62HUPC0q 278 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_msg
//       Access: Published
//  Description: Returns the Windows proc msg parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1372  
510 14 Dtool_62HUyLDI 0 6 512 1282 0 14 Dtool_62HUyLDI 284 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_wparam
//       Access: Published
//  Description: Returns the Windows proc wparam parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1372  
511 14 Dtool_62HUAL2s 0 6 513 1282 0 14 Dtool_62HUAL2s 284 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_lparam
//       Access: Published
//  Description: Returns the Windows proc lparam parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1372  
512 14 Dtool_62HUFsIL 0 6 514 1289 0 14 Dtool_62HUFsIL 313 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::is_touch_event
//       Access: Public, Virtual
//  Description: Returns whether the event is a touch event.
//               
//////////////////////////////////////////////////////////////////// 1 4 this 3 1374  
513 14 Dtool_62HUCdg3 0 6 515 1282 0 14 Dtool_62HUCdg3 323 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_num_touches
//       Access: Public, Virtual
//  Description: Returns the current number of touches on the window.
//               
//////////////////////////////////////////////////////////////////// 1 4 this 3 1374  
514 14 Dtool_62HU6s0U 0 7 516 1371 1101 14 Dtool_62HU6s0U 330 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_touch_info
//       Access: Public, Virtual
//  Description: Returns the TouchInfo object describing the specified touch.
//               
//////////////////////////////////////////////////////////////////// 2 4 this 3 1374  5 index 1 1282  
515 14 Dtool_62HUt7d3 0 7 517 1280 0 14 Dtool_62HUt7d3 0 0 
516 14 Dtool_62HUhbmW 0 7 520 1306 0 14 Dtool_62HUhbmW 275 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_properties
//       Access: Published
//  Description: Returns the current properties of the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1375  
517 14 Dtool_62HU0Htu 0 7 521 1306 0 14 Dtool_62HU0Htu 459 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_requested_properties
//       Access: Published
//  Description: Returns the properties of the window that are
//               currently requested.  These properties will be
//               applied to the window (if valid) at the next
//               execution of process_events().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1375  
518 14 Dtool_62HUYZ4X 0 4 522 1283 0 14 Dtool_62HUYZ4X 346 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::clear_rejected_properties
//       Access: Published
//  Description: Empties the set of failed properties that will be
//               returned by get_rejected_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
519 14 Dtool_62HUcXSI 0 7 523 1305 730 14 Dtool_62HUcXSI 563 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_rejected_properties
//       Access: Published
//  Description: Returns the set of properties that have recently been
//               requested, but could not be applied to the window for
//               some reason.  This set of properties will remain
//               unchanged until they are changed by a new failed
//               request, or clear_rejected_properties() is called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1375  
520 14 Dtool_62HUGdcu 0 4 524 1283 0 14 Dtool_62HUGdcu 603 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::request_properties
//       Access: Published
//  Description: Requests a property change on the window.  For
//               example, use this method to request a window change
//               size or minimize or something.
//
//               The change is not made immediately; rather, the
//               request is saved and will be applied the next time
//               the window task is run (probably at the next frame).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  20 requested_properties 1 1306  
521 14 Dtool_62HUu9q8 0 6 525 1289 0 14 Dtool_62HUu9q8 1121 // Filename: graphicsWindow.I
// Created by:  frang (07Mar99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_closed
//       Access: Published
//  Description: Returns true if the window has not yet been opened,
//               or has been fully closed, false if it is open.  The
//               window is not opened immediately after
//               GraphicsEngine::make_window() is called; nor is it
//               closed immediately after
//               GraphicsEngine::remove_window() is called.  Either
//               operation may take a frame or two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1375  
522 14 Dtool_62HUJaEs 0 6 526 1289 0 14 Dtool_62HUJaEs 329 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_fullscreen
//       Access: Published
//  Description: Returns true if the window has been opened as a
//               fullscreen window, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1375  
523 14 Dtool_62HUGNv6 0 4 527 1283 0 14 Dtool_62HUGNv6 630 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_window_event
//       Access: Published
//  Description: Changes the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.
//
//               By default, all windows have the same window event
//               unless they are explicitly changed.  When the event
//               is generated, it includes one parameter: the window
//               itself.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  12 window_event 1 1286  
524 14 Dtool_62HU_R55 0 6 528 1286 0 14 Dtool_62HU_R55 421 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_event
//       Access: Published
//  Description: Returns the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.  See set_window_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1375  
525 14 Dtool_62HUuHKx 0 4 529 1283 0 14 Dtool_62HUuHKx 1393 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_close_request_event
//       Access: Published
//  Description: Sets the event that is triggered when the user
//               requests to close the window, e.g. via alt-F4, or
//               clicking on the close box.
//
//               The default for each window is for this event to be
//               the empty string, which means the window-close
//               request is handled immediately by Panda (and the
//               window will be closed without the app getting a
//               chance to intervene).  If you set this to a nonempty
//               string, then the window is not closed, but instead
//               the event is thrown.  It is then up to the app to
//               respond appropriately, for instance by presenting an
//               "are you sure?" dialog box, and eventually calling
//               close_window() when the user is sure.
//
//               It is considered poor form to set this string and
//               then not handle the event.  This can frustrate the
//               user by making it difficult for him to cleanly shut
//               down the application (and may force the user to
//               hard-kill the app, or reboot the machine).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  19 close_request_event 1 1286  
526 14 Dtool_62HUg_ue 0 6 530 1286 0 14 Dtool_62HUg_ue 515 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_close_request_event
//       Access: Published
//  Description: Returns the name of the event set via
//               set_close_request_event().  If this string is
//               nonempty, then when the user requests to close
//               window, this event will be generated instead.  See
//               set_close_request_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1375  
527 14 Dtool_62HUN9Aq 0 4 531 1283 0 14 Dtool_62HUN9Aq 894 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_unexposed_draw
//       Access: Published
//  Description: If this flag is false, the window is redrawn only
//               after it has received a recent "unexpose" or "draw"
//               event from the underlying windowing systme.  If this
//               flag is true, the window is redrawn every frame
//               regardless.  Setting this false may prevent the
//               window from redrawing unnecessarily when it is
//               hidden, and may play nicer with other windows on the
//               desktop, but may adversely affect frame rate even
//               when the window is fully visible; setting it true will
//               ensure that the window contents are always current.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  14 unexposed_draw 1 1289  
528 14 Dtool_62HULj90 0 6 532 1289 0 14 Dtool_62HULj90 259 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_unexposed_draw
//       Access: Published
//  Description: See set_unexposed_draw().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1375  
529 14 Dtool_62HUYAaM 0 7 533 1299 0 14 Dtool_62HUYAaM 641 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_handle
//       Access: Published
//  Description: Returns the WindowHandle corresponding to this window
//               on the desktop.  This is mainly useful for
//               communicating with external libraries.  Use
//               window_handle->get_os_handle()->get_handle(), or
//               window_handle->get_string_handle(), to get the actual
//               OS-specific window handle object, whatever type that
//               might be.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1375  
530 14 Dtool_62HUWc_C 0 6 534 1282 0 14 Dtool_62HUWc_C 594 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_num_input_devices
//       Access: Published
//  Description: Returns the number of separate input devices
//               associated with the window.  Typically, a window will
//               have exactly one input device: the keyboard/mouse
//               pair.  However, some windows may have no input
//               devices, and others may add additional devices, for
//               instance for a joystick.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1375  
531 14 Dtool_62HUqhfW 0 6 535 1286 0 14 Dtool_62HUqhfW 278 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_input_device_name
//       Access: Published
//  Description: Returns the name of the nth input device.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1375  6 device 1 1282  
532 14 Dtool_62HUYErM 0 6 536 1289 0 14 Dtool_62HUYErM 366 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_pointer
//       Access: Published
//  Description: Returns true if the nth input device has a
//               screen-space pointer (for instance, a mouse), false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1375  6 device 1 1282  
533 14 Dtool_62HUeEpH 0 6 537 1289 0 14 Dtool_62HUeEpH 314 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_keyboard
//       Access: Published
//  Description: Returns true if the nth input device has a keyboard,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1375  6 device 1 1282  
534 14 Dtool_62HUzz5k 0 7 538 1379 0 14 Dtool_62HUzz5k 348 ////////////////////////////////////////////////////////////////////
//     Function: x11GraphicsWindow::get_keyboard_map
//       Access: Published, Virtual
//  Description: Returns a ButtonMap containing the association
//               between raw buttons and virtual buttons.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1375  
535 14 Dtool_62HUCg1v 0 4 539 1283 0 14 Dtool_62HUCg1v 278 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_events
//       Access: Published
//  Description: Turn on the generation of pointer events.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  6 device 1 1282  
536 14 Dtool_62HUyQiD 0 4 540 1283 0 14 Dtool_62HUyQiD 280 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: Turn off the generation of pointer events.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  6 device 1 1282  
537 14 Dtool_62HUN5RH 0 4 541 1283 0 14 Dtool_62HUN5RH 285 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_mode
//       Access: Published
//  Description: See GraphicsWindowInputDevice::enable_pointer_mode
//////////////////////////////////////////////////////////////////// 3 4 this 3 1377  6 device 1 1282  5 speed 1 1370  
538 14 Dtool_62HU8M8I 0 4 542 1283 0 14 Dtool_62HU8M8I 289 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: See GraphicsWindowInputDevice::disable_pointer_mode
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  6 device 1 1282  
539 14 Dtool_62HUxqr_ 0 7 543 1381 0 14 Dtool_62HUxqr_ 471 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_pointer
//       Access: Published
//  Description: Returns the MouseData associated with the nth
//               input device's pointer.  This is deprecated; use
//               get_pointer_device().get_pointer() instead, or for
//               raw mice, use the InputDeviceManager interface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1375  6 device 1 1282  
540 14 Dtool_62HUPl6f 0 6 544 1289 0 14 Dtool_62HUPl6f 540 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::move_pointer
//       Access: Published, Virtual
//  Description: Forces the pointer to the indicated position within
//               the window, if possible.
//
//               Returns true if successful, false on failure.  This
//               may fail if the mouse is not currently within the
//               window, or if the API doesn't support this operation.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1377  6 device 1 1282  1 x 1 1282  1 y 1 1282  
541 14 Dtool_62HU_nZW 0 4 545 1283 0 14 Dtool_62HU_nZW 274 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::close_ime
//       Access: Published, Virtual
//  Description: Forces the ime window to close if any
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
542 14 Dtool_62HUbjlV 0 4 546 1283 0 14 Dtool_62HUbjlV 343 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::add_custom_event_handler
//       Access: Published
//  Description: Adds a python event handler to be called
//               when a window event occurs.
//               
//////////////////////////////////////////////////////////////////// 3 4 this 3 1377  7 handler 1 1358  4 name 1 1358  
543 14 Dtool_62HU4ul5 0 4 547 1283 0 14 Dtool_62HU4ul5 304 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::remove_custom_event_handler
//       Access: Published
//  Description: Removes the specified python event handler.
//               
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  4 name 1 1358  
544 14 Dtool_62HUjGVA 0 7 548 1280 0 14 Dtool_62HUjGVA 0 0 
545 14 Dtool_62HUw_oh 0 4 569 1283 0 14 Dtool_62HUw_oh 1327 // Filename: callbackGraphicsWindow.I
// Created by:  drose (06Jan11)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_events_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window is polled for window events, including
//               mouse and keyboard events, as well as window resize
//               events and other system-generated events.
//
//               This callback will receive a
//               CallbackGraphicsWindow::EventsCallbackData.
//
//               This callback should process any system-generated
//               events, and call data->upcall() to process requested
//               property change requests made via
//               request_properties().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1382  6 object 1 1326  
546 14 Dtool_62HUAR7V 0 4 570 1283 0 14 Dtool_62HUAR7V 331 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_events_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_events_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1382  
547 14 Dtool_62HUbexL 0 7 571 1326 0 14 Dtool_62HUbexL 299 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_events_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_events_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1383  
548 14 Dtool_62HU4DCQ 0 4 572 1283 0 14 Dtool_62HU4DCQ 1100 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_properties_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window receives a property change request from
//               user code (e.g. via request_properties).
//
//               This callback will receive a
//               CallbackGraphicsWindow::PropertiesCallbackData, which
//               provides a get_properties() method that returns a
//               modifiable reference to a WindowsProperties object.
//               This object will contain only those properties
//               requested by user code.  The callback should handle
//               any of the requests it finds, including and
//               especially set_open(), and remove them from the
//               object when it has handled them.  Any unhandled
//               properties should be left unchanged in the properties
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1382  6 object 1 1326  
549 14 Dtool_62HUn_i0 0 4 573 1283 0 14 Dtool_62HUn_i0 339 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_properties_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_properties_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1382  
550 14 Dtool_62HUUXfq 0 7 574 1326 0 14 Dtool_62HUUXfq 307 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_properties_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_properties_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1383  
551 14 Dtool_62HUetLf 0 4 575 1283 0 14 Dtool_62HUetLf 702 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_render_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window is invoked (in the draw thread) to render
//               its contents, and/or flip the graphics buffers.
//
//               This callback will actually serve several different
//               functions.  It receivces a RenderCallbackData, and
//               you can query data->get_callback_type() to return the
//               actual function of each particular callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1382  6 object 1 1326  
552 14 Dtool_62HUxQAK 0 4 576 1283 0 14 Dtool_62HUxQAK 331 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_render_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_render_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1382  
553 14 Dtool_62HUvJVJ 0 7 577 1326 0 14 Dtool_62HUvJVJ 299 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_render_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_render_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1383  
554 14 Dtool_62HU1QMX 0 6 578 1367 0 14 Dtool_62HU1QMX 480 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_input_device
//       Access: Published
//  Description: Returns a writable reference to the nth input device
//               (mouse).  This is intended to be used for the window
//               implementation to record mouse and keyboard input
//               information for the Panda system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1382  6 device 1 1282  
555 14 Dtool_62HUWnP_ 0 6 579 1282 0 14 Dtool_62HUWnP_ 385 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::create_input_device
//       Access: Published
//  Description: Adds a new input device (mouse) to the window with
//               the indicated name.  Returns the index of the new
//               device.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1382  4 name 1 1286  
556 14 Dtool_62HUTKC9 0 7 580 1280 0 14 Dtool_62HUTKC9 0 0 
557 14 Dtool_62HURmD4 0 7 551 1382 1011 14 Dtool_62HURmD4 306 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::WindowCallbackData::get_window
//       Access: Published
//  Description: Returns the window this callback was triggered from.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1385  
558 14 Dtool_62HU5Nl6 0 7 552 1280 0 14 Dtool_62HU5Nl6 0 0 
559 14 Dtool_62HUQICH 0 7 555 1280 0 14 Dtool_62HUQICH 0 0 
560 14 Dtool_62HUpcBm 0 6 558 1305 0 14 Dtool_62HUpcBm 504 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::PropertiesCallbackData::get_properties
//       Access: Published
//  Description: Returns the WindowProperties object that this
//               callback should process.  Any properties that are
//               handled should be removed from this object;
//               properties that are unhandled should be left alone.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1387  
561 14 Dtool_62HUT67_ 0 7 559 1280 0 14 Dtool_62HUT67_ 0 0 
562 14 Dtool_62HUoeV8 0 6 563 1265 0 14 Dtool_62HUoeV8 467 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_callback_type
//       Access: Published
//  Description: Since the render callback is shared for several
//               functions, this method is needed to indicate which
//               particular function is being invoked with this
//               callback.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
563 14 Dtool_62HU1jTM 0 6 564 1254 0 14 Dtool_62HU1jTM 507 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_frame_mode
//       Access: Published
//  Description: If the callback type (returned by get_callback_type)
//               is RCT_begin_frame or RCT_end_frame, then this method
//               will return the particular frame mode indicating
//               what, precisely, we want to do this frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
564 14 Dtool_62HUELCp 0 4 565 1283 0 14 Dtool_62HUELCp 549 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::set_render_flag
//       Access: Published
//  Description: If the callback type is RCT_begin_frame, this call is
//               available to specify the return value from the
//               begin_frame() call.  If this is true (the default),
//               the frame is rendered normally; if it is false, the
//               frame is omitted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1391  11 render_flag 1 1289  
565 14 Dtool_62HU9SDX 0 6 566 1289 0 14 Dtool_62HU9SDX 347 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_render_flag
//       Access: Published
//  Description: Returns the current setting of the render flag.  See
//               set_render_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
566 14 Dtool_62HUHK2f 0 7 567 1280 0 14 Dtool_62HUHK2f 0 0 
567 14 Dtool_62HUeb9k 0 6 582 1394 0 14 Dtool_62HUeb9k 869 // Filename: displayRegionCullCallbackData.I
// Created by:  drose (14Mar09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_cull_handler
//       Access: Published
//  Description: Returns a pointer to the CullHandler, which accepts
//               each object to be added to the list for drawing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1392  
568 14 Dtool_62HUc6C0 0 7 583 1360 0 14 Dtool_62HUc6C0 360 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1392  
569 14 Dtool_62HU_hfB 0 7 584 1280 0 14 Dtool_62HU_hfB 0 0 
570 14 Dtool_62HU6KCi 0 7 587 1399 0 14 Dtool_62HU6KCi 893 // Filename: displayRegionDrawCallbackData.I
// Created by:  drose (13Mar09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_cull_result
//       Access: Published
//  Description: Returns a pointer to the CullResult, the list of
//               CullableObjects that should be drawn in this
//               DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1397  
571 14 Dtool_62HU3Sjb 0 7 588 1360 0 14 Dtool_62HU3Sjb 360 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1397  
572 14 Dtool_62HUao_o 0 7 589 1280 0 14 Dtool_62HUao_o 0 0 
573 14 Dtool_62HULHQY 0 7 592 1400 1175 14 Dtool_62HULHQY 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
574 14 Dtool_62HU8Zgh 0 4 594 1283 0 14 Dtool_62HU8Zgh 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1400  13 minimum_width 1 1282  
575 14 Dtool_62HU6RSe 0 4 595 1283 0 14 Dtool_62HU6RSe 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1400  13 maximum_width 1 1282  
576 14 Dtool_62HUt5bs 0 4 596 1283 0 14 Dtool_62HUt5bs 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1400  14 minimum_height 1 1282  
577 14 Dtool_62HUXyNp 0 4 597 1283 0 14 Dtool_62HUXyNp 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1400  14 maximum_height 1 1282  
578 14 Dtool_62HUFe4X 0 4 598 1283 0 14 Dtool_62HUFe4X 251 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1400  22 minimum_bits_per_pixel 1 1282  
579 14 Dtool_62HUbWqU 0 4 599 1283 0 14 Dtool_62HUbWqU 251 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1400  22 maximum_bits_per_pixel 1 1282  
580 14 Dtool_62HUs2_j 0 4 601 1283 0 14 Dtool_62HUs2_j 548 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1401  1 x 1 1282  1 y 1 1282  
581 14 Dtool_62HUJuQB 0 7 602 1280 0 14 Dtool_62HUJuQB 0 0 
582 14 Dtool_62HUGcAr 0 7 605 1348 0 14 Dtool_62HUGcAr 448 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::Constructor
//       Access: Published
//  Description: Creates a new GraphicsEngine object.  The Pipeline is
//               normally left to default to NULL, which indicates the
//               global render pipeline, but it may be any Pipeline
//               you choose.
//////////////////////////////////////////////////////////////////// 1 8 pipeline 1 1402  
583 14 Dtool_62HU3Xr_ 0 7 605 1348 0 14 Dtool_62HU3Xr_ 448 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::Constructor
//       Access: Published
//  Description: Creates a new GraphicsEngine object.  The Pipeline is
//               normally left to default to NULL, which indicates the
//               global render pipeline, but it may be any Pipeline
//               you choose.
//////////////////////////////////////////////////////////////////// 0 
584 14 Dtool_62HUkzZy 0 4 606 1283 0 14 Dtool_62HUkzZy 422 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_threading_model
//       Access: Published
//  Description: Specifies how future objects created via make_gsg(),
//               make_buffer(), and make_window() will be threaded.
//               This does not affect any already-created objects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1348  15 threading_model 1 1340  
585 14 Dtool_62HU_NLg 0 7 607 1342 927 14 Dtool_62HU_NLg 347 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_threading_model
//       Access: Published
//  Description: Returns the threading model that will be applied to
//               future objects.  See set_threading_model().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
586 14 Dtool_62HUbqNp 0 6 608 1406 0 14 Dtool_62HUbqNp 1010 // Filename: graphicsEngine.I
// Created by:  drose (24Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_render_lock
//       Access: Published
//  Description: Returns a ReMutex object that is held by the
//               GraphicsEngine during the entire call to
//               render_frame().  While you hold this lock you can be
//               confident that no part of the frame will be rendered
//               (at least by the app thread).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
587 14 Dtool_62HUpnHT 0 4 609 1283 0 14 Dtool_62HUpnHT 925 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_auto_flip
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should automatically cause windows to sync and flip
//               as soon as they have finished drawing, rather than
//               waiting for all of the windows to finish drawing
//               first so they can flip together.
//
//               This only affects the timing of when the flip occurs.
//               If this is true (the default), the flip occurs before
//               render_frame() returns.  If this is false, the flip
//               occurs whenever flip_frame() is called, or at the
//               beginning of the next call to render_frame(), if
//               flip_frame() is never called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1348  9 auto_flip 1 1289  
588 14 Dtool_62HUdDTb 0 6 610 1289 0 14 Dtool_62HUdDTb 316 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_auto_flip
//       Access: Published
//  Description: Returns the current setting for the auto-flip flag.
//               See set_auto_flip.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
589 14 Dtool_62HU5bdZ 0 4 611 1283 0 14 Dtool_62HU5bdZ 325 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_portal_cull
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should start portal culling
//////////////////////////////////////////////////////////////////// 2 4 this 3 1348  5 value 1 1289  
590 14 Dtool_62HUsi85 0 6 612 1289 0 14 Dtool_62HUsi85 287 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_portal_cull
//       Access: Published
//  Description: Returns the current setting for the portal culling flag.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
591 14 Dtool_62HUm7fs 0 4 613 1283 0 14 Dtool_62HUm7fs 398 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_default_loader
//       Access: Public
//  Description: Sets the Loader object that will be assigned to every
//               GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1348  6 loader 1 1346  
592 14 Dtool_62HUL2Ib 0 7 614 1346 0 14 Dtool_62HUL2Ib 410 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_default_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be assigned to
//               every GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
593 14 Dtool_62HU6E_Y 0 7 615 1315 1011 14 Dtool_62HU6E_Y 760 // THIS IS THE OLD CODE FOR make_gsg
//  PT(GraphicsStateGuardian) gsg = pipe->make_gsg(properties, share_with);
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_output
//       Access: Published
//  Description: Creates a new window (or buffer) and returns it.
//               The GraphicsEngine becomes the owner of the window,
//               it will persist at least until remove_window() is
//               called later.
//
//               If a null pointer is supplied for the gsg, then this
//               routine will create a new gsg.
//               
//               This routine is only called from the app thread.
//////////////////////////////////////////////////////////////////// 9 4 this 3 1348  4 pipe 1 1278  4 name 1 1286  4 sort 1 1282  7 fb_prop 1 1338  8 win_prop 1 1306  5 flags 1 1282  3 gsg 1 1343  4 host 1 1315  
594 14 Dtool_62HUHZRz 0 7 615 1315 1011 14 Dtool_62HUHZRz 760 // THIS IS THE OLD CODE FOR make_gsg
//  PT(GraphicsStateGuardian) gsg = pipe->make_gsg(properties, share_with);
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_output
//       Access: Published
//  Description: Creates a new window (or buffer) and returns it.
//               The GraphicsEngine becomes the owner of the window,
//               it will persist at least until remove_window() is
//               called later.
//
//               If a null pointer is supplied for the gsg, then this
//               routine will create a new gsg.
//               
//               This routine is only called from the app thread.
//////////////////////////////////////////////////////////////////// 8 4 this 3 1348  4 pipe 1 1278  4 name 1 1286  4 sort 1 1282  7 fb_prop 1 1338  8 win_prop 1 1306  5 flags 1 1282  3 gsg 1 1343  
595 14 Dtool_62HUo_rj 0 7 615 1315 1011 14 Dtool_62HUo_rj 760 // THIS IS THE OLD CODE FOR make_gsg
//  PT(GraphicsStateGuardian) gsg = pipe->make_gsg(properties, share_with);
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_output
//       Access: Published
//  Description: Creates a new window (or buffer) and returns it.
//               The GraphicsEngine becomes the owner of the window,
//               it will persist at least until remove_window() is
//               called later.
//
//               If a null pointer is supplied for the gsg, then this
//               routine will create a new gsg.
//               
//               This routine is only called from the app thread.
//////////////////////////////////////////////////////////////////// 7 4 this 3 1348  4 pipe 1 1278  4 name 1 1286  4 sort 1 1282  7 fb_prop 1 1338  8 win_prop 1 1306  5 flags 1 1282  
596 14 Dtool_62HUQ92T 0 7 616 1315 1011 14 Dtool_62HUQ92T 723 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This is the
//               preferred way to create an offscreen buffer, when you
//               already have an onscreen window or another buffer to
//               start with.  For the first parameter, pass an
//               existing GraphicsOutput object, e.g. the main window;
//               this allows the buffer to adapt itself to that
//               window's framebuffer properties, and allows maximum
//               sharing of resources.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1348  4 host 1 1315  4 name 1 1286  4 sort 1 1282  6 x_size 1 1282  6 y_size 1 1282  
597 14 Dtool_62HUG7HJ 0 7 616 1315 1011 14 Dtool_62HUG7HJ 1177 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This flavor
//               accepts a GSG rather than a GraphicsOutput as the
//               first parameter, which is too limiting and disallows
//               the possibility of creating a ParasiteBuffer if the
//               user's graphics hardware prefers that.  It also
//               attempts to request specific framebuffer properties
//               and may therefore do a poorer job of sharing the GSG
//               between the old buffer and the new.
//
//               For these reasons, this variant is a poor choice
//               unless you are creating an offscreen buffer for the
//               first time, without an onscreen window already in
//               existence.  If you already have an onscreen window,
//               you should use the other flavor of make_buffer()
//               instead, which accepts a GraphicsOutput as the first
//               parameter.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1348  3 gsg 1 1343  4 name 1 1286  4 sort 1 1282  6 x_size 1 1282  6 y_size 1 1282  
598 14 Dtool_62HUs8x6 0 7 617 1315 1011 14 Dtool_62HUs8x6 265 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_parasite
//       Access: Published
//  Description: Syntactic shorthand for make_buffer.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1348  4 host 1 1315  4 name 1 1286  4 sort 1 1282  6 x_size 1 1282  6 y_size 1 1282  
599 14 Dtool_62HUQEjj 0 6 618 1289 0 14 Dtool_62HUQEjj 1357 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_window
//       Access: Published
//  Description: Removes the indicated window or offscreen buffer from
//               the set of windows that will be processed when
//               render_frame() is called.  This also closes the
//               window if it is open, and removes the window from its
//               GraphicsPipe, allowing the window to be destructed if
//               there are no other references to it.  (However, the
//               window may not be actually closed until next frame,
//               if it is controlled by a sub-thread.)
//
//               The return value is true if the window was removed,
//               false if it was not found.
//
//               Unlike remove_all_windows(), this function does not
//               terminate any of the threads that may have been
//               started to service this window; they are left running
//               (since you might open a new window later on these
//               threads).  If your intention is to clean up before
//               shutting down, it is better to call
//               remove_all_windows() then to call remove_window() one
//               at a time.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1348  6 window 1 1315  
600 14 Dtool_62HUbizP 0 4 619 1283 0 14 Dtool_62HUbizP 412 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_all_windows
//       Access: Published
//  Description: Removes and closes all windows from the engine.  This
//               also cleans up and terminates any threads that have
//               been started to service those windows.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1348  
601 14 Dtool_62HU7tzD 0 4 620 1283 0 14 Dtool_62HU7tzD 466 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::reset_all_windows
//       Access: Published
//  Description: Resets the framebuffer of the current window.  This
//               is currently used by DirectX 8 only. It calls a
//               reset_window function on each active window to 
//               release/create old/new framebuffer
//////////////////////////////////////////////////////////////////// 2 4 this 3 1348  9 swapchain 1 1289  
602 14 Dtool_62HUqWta 0 6 621 1289 0 14 Dtool_62HUqWta 360 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::is_empty
//       Access: Published
//  Description: Returns true if there are no windows or buffers
//               managed by the engine, false if there is at least
//               one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
603 14 Dtool_62HUxJBp 0 6 622 1282 0 14 Dtool_62HUxJBp 313 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_num_windows
//       Access: Published
//  Description: Returns the number of windows (or buffers) managed by
//               the engine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
604 14 Dtool_62HULl7l 0 7 623 1315 1011 14 Dtool_62HULl7l 316 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_window
//       Access: Published
//  Description: Returns the nth window or buffers managed by the
//               engine, in sorted order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1404  1 n 1 1282  
605 14 Dtool_62HU4GAK 0 4 624 1283 0 14 Dtool_62HU4GAK 334 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::render_frame
//       Access: Published
//  Description: Renders the next frame in all the registered windows,
//               and flips all of the frame buffers.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1348  
606 14 Dtool_62HUfeD_ 0 4 625 1283 0 14 Dtool_62HUfeD_ 658 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::open_windows
//       Access: Published
//  Description: Fully opens (or closes) any windows that have
//               recently been requested open or closed, without
//               rendering any frames.  It is not necessary to call
//               this explicitly, since windows will be automatically
//               opened or closed when the next frame is rendered, but
//               you may call this if you want your windows now
//               without seeing a frame go by.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1348  
607 14 Dtool_62HUNMb_ 0 4 626 1283 0 14 Dtool_62HUNMb_ 558 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::sync_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing.  The windows are not
//               yet flipped when this returns; see also flip_frame().
//               It is not usually necessary to call this explicitly,
//               unless you need to see the previous frame right away.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1348  
608 14 Dtool_62HUmoKK 0 4 627 1283 0 14 Dtool_62HUmoKK 963 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::ready_flip
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing. Returns when all threads have
//               actually finished drawing, as opposed to 'sync_frame'
//               we seems to return once all draw calls have been submitted.
//               Calling 'flip_frame' after this function should immediately
//               cause a buffer flip.  This function will only work in
//               opengl right now, for all other graphics pipelines it will 
//               simply return immediately.  In opengl it's a bit of a hack:
//               it will attempt to read a single pixel from the frame buffer to
//               force the graphics card to finish drawing before it returns
//////////////////////////////////////////////////////////////////// 1 4 this 3 1348  
609 14 Dtool_62HUbWRO 0 4 628 1283 0 14 Dtool_62HUbWRO 516 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::flip_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing, and then flips all the
//               windows.  It is not usually necessary to call this
//               explicitly, unless you need to see the previous frame
//               right away.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1348  
610 14 Dtool_62HU8ADE 0 6 629 1289 0 14 Dtool_62HU8ADE 1560 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::extract_texture_data
//       Access: Published
//  Description: Asks the indicated GraphicsStateGuardian to retrieve
//               the texture memory image of the indicated texture and
//               store it in the texture's ram_image field.  The image
//               can then be written to disk via Texture::write(), or
//               otherwise manipulated on the CPU.
//
//               This is useful for retrieving the contents of a
//               texture that has been somehow generated on the
//               graphics card, instead of having been loaded the
//               normal way via Texture::read() or Texture::load().
//               It is particularly useful for getting the data
//               associated with a compressed texture image.
//
//               Since this requires a round-trip to the draw thread,
//               it may require waiting for the current thread to
//               finish rendering if it is called in a multithreaded
//               environment.  However, you can call this several
//               consecutive times on different textures for little
//               additional cost.
//
//               If the texture has not yet been loaded to the GSG in
//               question, it will be loaded immediately.
//
//               The return value is true if the operation is
//               successful, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1348  3 tex 1 1330  3 gsg 1 1343  
611 14 Dtool_62HUB52G 0 7 630 1348 0 14 Dtool_62HUB52G 238 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_global_ptr
//       Access: Published, Static
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
612 14 Dtool_62HUkGJV 0 6 632 1282 0 14 Dtool_62HUkGJV 382 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_pipe_types
//       Access: Published
//  Description: Returns the number of different types of
//               GraphicsPipes that are available to create through
//               this interface.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
613 14 Dtool_62HUdWon 0 7 633 1280 0 14 Dtool_62HUdWon 323 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_pipe_type
//       Access: Published
//  Description: Returns the nth type of GraphicsPipe available
//               through this interface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  1 n 1 1282  
614 14 Dtool_62HUKhch 0 4 634 1283 0 14 Dtool_62HUKhch 348 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::print_pipe_types
//       Access: Published
//  Description: Writes a list of the currently known GraphicsPipe
//               types to nout, for the user's information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
615 14 Dtool_62HUgtWV 0 7 635 1278 0 14 Dtool_62HUgtWV 456 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1411  4 type 1 1280  
616 14 Dtool_62HU_DWW 0 7 635 1278 0 14 Dtool_62HU_DWW 651 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//
//               If the type is not already defined, this will
//               implicitly load the named module, or if module_name
//               is empty, it will call load_aux_modules().
//////////////////////////////////////////////////////////////////// 3 4 this 3 1411  9 type_name 1 1286  11 module_name 1 1286  
617 14 Dtool_62HU053M 0 7 635 1278 0 14 Dtool_62HU053M 651 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//
//               If the type is not already defined, this will
//               implicitly load the named module, or if module_name
//               is empty, it will call load_aux_modules().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1411  9 type_name 1 1286  
618 14 Dtool_62HU7Nor 0 7 636 1278 0 14 Dtool_62HU7Nor 430 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_module_pipe
//       Access: Published
//  Description: Returns a new GraphicsPipe of a type defined by the
//               indicated module.  Returns NULL if the module is not
//               found or does not properly recommend a GraphicsPipe.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1411  11 module_name 1 1286  
619 14 Dtool_62HUJlGM 0 7 637 1278 0 14 Dtool_62HUJlGM 426 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_default_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of some arbitrary type.
//               The user may specify a preference using the Configrc
//               file; otherwise, one will be chosen arbitrarily.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1411  
620 14 Dtool_62HUtQ2r 0 6 638 1282 0 14 Dtool_62HUtQ2r 969 // Filename: graphicsPipeSelection.I
// Created by:  drose (15Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_aux_modules
//       Access: Published
//  Description: Returns the number of display modules that are still
//               to be loaded.  If this is nonzero, then calling
//               load_aux_modules() will likely increase the number of
//               GraphicsPipes available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
621 14 Dtool_62HU4_4n 0 4 639 1283 0 14 Dtool_62HU4_4n 391 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::load_aux_modules
//       Access: Published
//  Description: Loads all the modules named in the aux-display
//               Configrc variable, making as many graphics pipes as
//               possible available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1411  
622 14 Dtool_62HUa86m 0 6 640 1411 0 14 Dtool_62HUa86m 327 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one global
//               GraphicsPipeSelection object.
//////////////////////////////////////////////////////////////////// 0 
623 14 Dtool_62HUzpWM 0 7 642 1299 0 14 Dtool_62HUzpWM 607 ////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_int
//       Access: Published, Static
//  Description: Constructs a new WindowHandle with an int value,
//               which is understood to be either an HWND or a Window,
//               cast to int.  This method exists for the convenience
//               of Python, which likes to deal with ints; C++ code
//               should use one of the more specific make_x11() or
//               make_win32() methods instead.
//////////////////////////////////////////////////////////////////// 1 6 window 1 1285  
624 14 Dtool_62HUP_i_ 0 7 643 1299 0 14 Dtool_62HUP_i_ 636 ////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_subprocess
//       Access: Published, Static
//  Description: Constructs a new WindowHandle that references a
//               SubprocessWindowBuffer read in another process, with
//               the named pipe filename that it uses for
//               communication.
//
//               This is (at present, and maybe always) useful only on
//               the OS X platform, where parenting child windows is
//               particularly problematic.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 1308  
625 14 Dtool_62HU9VjG 0 7 644 1280 0 14 Dtool_62HU9VjG 0 0 
626 14 Dtool_62HUvamu 0 4 647 1283 0 14 Dtool_62HUvamu 548 ////////////////////////////////////////////////////////////////////
//     Function: ParasiteBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1412  1 x 1 1282  1 y 1 1282  
627 14 Dtool_62HUKj4L 0 7 648 1280 0 14 Dtool_62HUKj4L 0 0 
189
1225 14 GraphicsDevice 0 75777 14 GraphicsDevice 14 GraphicsDevice 0 0 0 0 0 0 2 628 629 0 0 1 0 1226 0 0 0 0 499
////////////////////////////////////////////////////////////////////
//       Class : GraphicsDevice
// Description : An abstract device object that is part of Graphics
//               Pipe. This device is set to NULL for OpenGL. But 
//               DirectX uses it to take control of multiple windows
//               under single device or multiple devices (i.e. more
//               than one adapters in the machine).   
//
////////////////////////////////////////////////////////////////////

1226 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1227 18 DisplayInformation 0 26625 18 DisplayInformation 18 DisplayInformation 0 0 0 1 631 630 0 53 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 0 0 0 0 1 1228 239
////////////////////////////////////////////////////////////////////
//       Class : DisplayInformation
// Description : This class contains various display information.
////////////////////////////////////////////////////////////////////

1228 14 DetectionState 0 794624 34 DisplayInformation::DetectionState 34 DisplayInformation::DetectionState 1227 0 0 0 0 0 0 0 0 0 5 10 DS_unknown 30 DisplayInformation::DS_unknown 0 10 DS_success 30 DisplayInformation::DS_success 1 25 DS_direct_3d_create_error 45 DisplayInformation::DS_direct_3d_create_error 2 22 DS_create_window_error 42 DisplayInformation::DS_create_window_error 3 22 DS_create_device_error 42 DisplayInformation::DS_create_device_error 4 0 0

1229 12 GraphicsPipe 0 75777 12 GraphicsPipe 12 GraphicsPipe 0 0 0 0 0 0 9 685 686 687 688 689 690 691 692 693 0 0 1 0 1226 0 0 0 2 1230 1231 1126
////////////////////////////////////////////////////////////////////
//       Class : GraphicsPipe
// Description : An object to create GraphicsOutputs that share a
//               particular 3-D API.  Normally, there will only be one
//               GraphicsPipe in an application, although it is
//               possible to have multiple of these at once if there
//               are multiple different API's available in the same
//               machine.
//
//               Often, the GraphicsPipe corresponds to a physical
//               output device, hence the term "pipe", but this is not
//               necessarily the case.
//
//               The GraphicsPipe is used by the GraphicsEngine object
//               to create and destroy windows; it keeps ownership of
//               the windows it creates.
//
//               M. Asad added new/interim functionality where GraphicsPipe
//               now contains a device interface to directx/opengl which
//               will be used to handle multiple windows from same device.
//
////////////////////////////////////////////////////////////////////

1230 11 OutputTypes 0 794624 25 GraphicsPipe::OutputTypes 25 GraphicsPipe::OutputTypes 1229 0 0 0 0 0 0 0 0 0 4 9 OT_window 23 GraphicsPipe::OT_window 1 20 OT_fullscreen_window 34 GraphicsPipe::OT_fullscreen_window 2 9 OT_buffer 23 GraphicsPipe::OT_buffer 4 17 OT_texture_buffer 31 GraphicsPipe::OT_texture_buffer 8 0 0

1231 19 BufferCreationFlags 0 794624 33 GraphicsPipe::BufferCreationFlags 33 GraphicsPipe::BufferCreationFlags 1229 0 0 0 0 0 0 0 0 0 14 18 BF_refuse_parasite 32 GraphicsPipe::BF_refuse_parasite 1 19 BF_require_parasite 33 GraphicsPipe::BF_require_parasite 2 16 BF_refuse_window 30 GraphicsPipe::BF_refuse_window 4 17 BF_require_window 31 GraphicsPipe::BF_require_window 8 26 BF_require_callback_window 40 GraphicsPipe::BF_require_callback_window 16 17 BF_can_bind_color 31 GraphicsPipe::BF_can_bind_color 64 17 BF_can_bind_every 31 GraphicsPipe::BF_can_bind_every 128 13 BF_resizeable 27 GraphicsPipe::BF_resizeable 256 18 BF_size_track_host 32 GraphicsPipe::BF_size_track_host 512 17 BF_rtt_cumulative 31 GraphicsPipe::BF_rtt_cumulative 1024 20 BF_fb_props_optional 34 GraphicsPipe::BF_fb_props_optional 2048 14 BF_size_square 28 GraphicsPipe::BF_size_square 4096 15 BF_size_power_2 29 GraphicsPipe::BF_size_power_2 8192 19 BF_can_bind_layered 33 GraphicsPipe::BF_can_bind_layered 16384 0 0

1232 14 DrawableRegion 0 26625 14 DrawableRegion 14 DrawableRegion 0 0 0 0 694 0 23 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 0 0 0 0 1 1233 655
////////////////////////////////////////////////////////////////////
//       Class : DrawableRegion
// Description : This is a base class for GraphicsWindow (actually,
//               GraphicsOutput) and DisplayRegion, both of which are
//               conceptually rectangular regions into which drawing
//               commands may be issued.  Sometimes you want to deal
//               with a single display region, and sometimes you want
//               to deal with the whole window at once, particularly
//               for issuing clear commands and capturing screenshots.
////////////////////////////////////////////////////////////////////

1233 18 RenderTexturePlane 0 794624 34 DrawableRegion::RenderTexturePlane 34 DrawableRegion::RenderTexturePlane 1232 0 0 0 0 0 0 0 0 0 17 11 RTP_stencil 27 DrawableRegion::RTP_stencil 0 17 RTP_depth_stencil 33 DrawableRegion::RTP_depth_stencil 1 9 RTP_color 25 DrawableRegion::RTP_color 2 14 RTP_aux_rgba_0 30 DrawableRegion::RTP_aux_rgba_0 3 14 RTP_aux_rgba_1 30 DrawableRegion::RTP_aux_rgba_1 4 14 RTP_aux_rgba_2 30 DrawableRegion::RTP_aux_rgba_2 5 14 RTP_aux_rgba_3 30 DrawableRegion::RTP_aux_rgba_3 6 15 RTP_aux_hrgba_0 31 DrawableRegion::RTP_aux_hrgba_0 7 15 RTP_aux_hrgba_1 31 DrawableRegion::RTP_aux_hrgba_1 8 15 RTP_aux_hrgba_2 31 DrawableRegion::RTP_aux_hrgba_2 9 15 RTP_aux_hrgba_3 31 DrawableRegion::RTP_aux_hrgba_3 10 15 RTP_aux_float_0 31 DrawableRegion::RTP_aux_float_0 11 15 RTP_aux_float_1 31 DrawableRegion::RTP_aux_float_1 12 15 RTP_aux_float_2 31 DrawableRegion::RTP_aux_float_2 13 15 RTP_aux_float_3 31 DrawableRegion::RTP_aux_float_3 14 9 RTP_depth 25 DrawableRegion::RTP_depth 15 9 RTP_COUNT 25 DrawableRegion::RTP_COUNT 16 0 168
// It seems awkward to have this type, and also
// RenderBuffer::Type.  However, the fact that RenderBuffer::Type
// is a bitmask makes it awfully awkward to work with.

1234 12 WindowHandle 0 75777 12 WindowHandle 12 WindowHandle 0 0 0 1 718 0 0 6 719 720 721 722 723 727 0 0 1 0 1226 0 0 0 1 1235 859
////////////////////////////////////////////////////////////////////
//       Class : WindowHandle
// Description : This object represents a window on the desktop, not
//               necessarily a Panda window.  This structure can be
//               assigned to a WindowProperties to indicate a parent
//               window.
//
//               It also has callbacks so the Panda window can
//               communicate with its parent window, which is
//               particularly important when running embedded in a
//               browser.
//
//               To create a WindowHandle, you would usually call one
//               of the NativeWindowHandle::make_*() methods,
//               depending on the kind of native window handle object
//               you already have.
////////////////////////////////////////////////////////////////////

1235 8 OSHandle 0 337921 22 WindowHandle::OSHandle 22 WindowHandle::OSHandle 1234 0 0 0 0 0 3 724 725 726 0 0 1 0 1226 0 0 0 0 154
// This internal pointer within WindowHandle stores the actual
// OS-specific window handle type, whatever type that is.  It is
// subclassed for each OS.

1236 16 WindowProperties 0 26625 16 WindowProperties 16 WindowProperties 0 0 0 1 728 730 0 78 729 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 0 0 0 0 2 1237 1238 436
////////////////////////////////////////////////////////////////////
//       Class : WindowProperties
// Description : A container for the various kinds of properties we
//               might ask to have on a graphics window before we open
//               it.  This also serves to hold the current properties
//               for a window after it has been opened.
////////////////////////////////////////////////////////////////////

1237 6 ZOrder 0 794624 24 WindowProperties::ZOrder 24 WindowProperties::ZOrder 1236 0 0 0 0 0 0 0 0 0 3 8 Z_bottom 26 WindowProperties::Z_bottom 0 8 Z_normal 26 WindowProperties::Z_normal 1 5 Z_top 23 WindowProperties::Z_top 2 0 0

1238 9 MouseMode 0 794624 27 WindowProperties::MouseMode 27 WindowProperties::MouseMode 1236 0 0 0 0 0 0 0 0 0 2 10 M_absolute 28 WindowProperties::M_absolute 0 10 M_relative 28 WindowProperties::M_relative 1 0 0

1239 13 DisplayRegion 0 26625 13 DisplayRegion 13 DisplayRegion 0 0 0 0 812 0 45 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 0 0 2 3 1240 808 809 3 1232 810 811 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegion
// Description : A rectangular subregion within a window for rendering
//               into.  Typically, there is one DisplayRegion that
//               covers the whole window, but you may also create
//               smaller DisplayRegions for having different regions
//               within the window that represent different scenes.
//               You may also stack up DisplayRegions like panes of
//               glass, usually for layering 2-d interfaces on top of
//               a 3-d scene.
////////////////////////////////////////////////////////////////////

1240 17 DisplayRegionBase 0 2049 17 DisplayRegionBase 17 DisplayRegionBase 0 0 0 0 0 0 0 0 0 0 0 0 307
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionBase
// Description : An abstract base class for DisplayRegion, mainly so
//               we can store DisplayRegion pointers in a Camera.
////////////////////////////////////////////////////////////////////

1241 19 StereoDisplayRegion 0 75777 19 StereoDisplayRegion 19 StereoDisplayRegion 0 0 0 0 812 0 3 858 859 860 0 0 1 0 1239 0 0 0 0 862
////////////////////////////////////////////////////////////////////
//       Class : StereoDisplayRegion
// Description : This is a special DisplayRegion wrapper that actually
//               includes a pair of DisplayRegions internally: the
//               left and right eyes.  The DisplayRegion represented
//               here does not have a physical association with the
//               window, but it pretends it does.  Instead, it
//               maintains a pointer to the left and right
//               DisplayRegions separately.
//
//               Operations on the StereoDisplayRegion object affect
//               both left and right eyes together.  To access the
//               left or right eyes independently, use get_left_eye()
//               and get_right_eye().
////////////////////////////////////////////////////////////////////

1242 21 FrameBufferProperties 0 26625 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 1 893 894 0 50 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 0 0 0 0 0 346
////////////////////////////////////////////////////////////////////
//       Class : FrameBufferProperties
// Description : A container for the various kinds of properties we
//               might ask to have on a graphics frameBuffer before we
//               create a GSG.
////////////////////////////////////////////////////////////////////

1243 22 GraphicsThreadingModel 0 141313 22 GraphicsThreadingModel 22 GraphicsThreadingModel 0 0 0 1 913 927 0 13 914 915 916 917 918 919 920 921 922 923 924 925 926 0 0 0 0 0 313
////////////////////////////////////////////////////////////////////
//       Class : GraphicsThreadingModel
// Description : This represents the user's specification of how a
//               particular frame is handled by the various threads.
////////////////////////////////////////////////////////////////////

1244 19 StencilRenderStates 0 26625 19 StencilRenderStates 19 StencilRenderStates 0 0 0 0 928 0 0 0 0 0 0 3 1245 1246 1247 516
////////////////////////////////////////////////////////////////////
//       Class : StencilRenderStates
// Description : An abstract cross-platform class for setting stencil
//               buffer render states.  Each gsg needs to create its
//               own low-level API specific functions on how to set
//               each render state. The "set_stencil_render_state"
//               function can be used in an immediate-mode fashion.
////////////////////////////////////////////////////////////////////

1245 18 StencilRenderState 0 794624 39 StencilRenderStates::StencilRenderState 39 StencilRenderStates::StencilRenderState 1244 0 0 0 0 0 0 0 0 0 17 16 SRS_front_enable 37 StencilRenderStates::SRS_front_enable 0 15 SRS_back_enable 36 StencilRenderStates::SRS_back_enable 1 29 SRS_front_comparison_function 50 StencilRenderStates::SRS_front_comparison_function 2 32 SRS_front_stencil_fail_operation 53 StencilRenderStates::SRS_front_stencil_fail_operation 3 39 SRS_front_stencil_pass_z_fail_operation 60 StencilRenderStates::SRS_front_stencil_pass_z_fail_operation 4 39 SRS_front_stencil_pass_z_pass_operation 60 StencilRenderStates::SRS_front_stencil_pass_z_pass_operation 5 13 SRS_reference 34 StencilRenderStates::SRS_reference 6 13 SRS_read_mask 34 StencilRenderStates::SRS_read_mask 7 14 SRS_write_mask 35 StencilRenderStates::SRS_write_mask 8 28 SRS_back_comparison_function 49 StencilRenderStates::SRS_back_comparison_function 9 31 SRS_back_stencil_fail_operation 52 StencilRenderStates::SRS_back_stencil_fail_operation 10 38 SRS_back_stencil_pass_z_fail_operation 59 StencilRenderStates::SRS_back_stencil_pass_z_fail_operation 11 38 SRS_back_stencil_pass_z_pass_operation 59 StencilRenderStates::SRS_back_stencil_pass_z_pass_operation 12 9 SRS_clear 30 StencilRenderStates::SRS_clear 13 15 SRS_clear_value 36 StencilRenderStates::SRS_clear_value 14 9 SRS_total 30 StencilRenderStates::SRS_total 15 9 SRS_first 30 StencilRenderStates::SRS_first 0 0 0

1246 25 StencilComparisonFunction 0 794624 46 StencilRenderStates::StencilComparisonFunction 46 StencilRenderStates::StencilComparisonFunction 1244 0 0 0 0 0 0 0 0 0 8 9 SCF_never 30 StencilRenderStates::SCF_never 0 13 SCF_less_than 34 StencilRenderStates::SCF_less_than 1 9 SCF_equal 30 StencilRenderStates::SCF_equal 2 22 SCF_less_than_or_equal 43 StencilRenderStates::SCF_less_than_or_equal 3 16 SCF_greater_than 37 StencilRenderStates::SCF_greater_than 4 13 SCF_not_equal 34 StencilRenderStates::SCF_not_equal 5 25 SCF_greater_than_or_equal 46 StencilRenderStates::SCF_greater_than_or_equal 6 10 SCF_always 31 StencilRenderStates::SCF_always 7 0 0

1247 16 StencilOperation 0 794624 37 StencilRenderStates::StencilOperation 37 StencilRenderStates::StencilOperation 1244 0 0 0 0 0 0 0 0 0 8 7 SO_keep 28 StencilRenderStates::SO_keep 0 7 SO_zero 28 StencilRenderStates::SO_zero 1 10 SO_replace 31 StencilRenderStates::SO_replace 2 12 SO_increment 33 StencilRenderStates::SO_increment 3 12 SO_decrement 33 StencilRenderStates::SO_decrement 4 9 SO_invert 30 StencilRenderStates::SO_invert 5 21 SO_increment_saturate 42 StencilRenderStates::SO_increment_saturate 6 21 SO_decrement_saturate 42 StencilRenderStates::SO_decrement_saturate 7 0 0

1248 21 GraphicsStateGuardian 0 75777 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 78 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 0 0 1 0 1249 0 0 0 1 1250 564
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardian
// Description : Encapsulates all the communication with a particular
//               instance of a given rendering backend.  Tries to
//               guarantee that redundant state-change requests are
//               not issued (hence "state guardian").
//
//               There will be one of these objects for each different
//               graphics context active in the system.
////////////////////////////////////////////////////////////////////

1249 25 GraphicsStateGuardianBase 0 2049 25 GraphicsStateGuardianBase 25 GraphicsStateGuardianBase 0 0 0 0 0 0 0 1 1414 0 0 0 0 957
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardianBase
// Description : This is a base class for the GraphicsStateGuardian
//               class, which is itself a base class for the various
//               GSG's for different platforms.  This class contains
//               all the function prototypes to support the
//               double-dispatch of GSG to geoms, transitions, etc.  It
//               lives in a separate class in its own package so we
//               can avoid circular build dependency problems.
//
//               GraphicsStateGuardians are not actually writable to
//               bam files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

1250 11 ShaderModel 0 794624 34 GraphicsStateGuardian::ShaderModel 34 GraphicsStateGuardian::ShaderModel 1248 0 0 0 0 0 0 0 0 0 7 5 SM_00 28 GraphicsStateGuardian::SM_00 0 5 SM_11 28 GraphicsStateGuardian::SM_11 1 5 SM_20 28 GraphicsStateGuardian::SM_20 2 5 SM_2X 28 GraphicsStateGuardian::SM_2X 3 5 SM_30 28 GraphicsStateGuardian::SM_30 4 5 SM_40 28 GraphicsStateGuardian::SM_40 5 5 SM_50 28 GraphicsStateGuardian::SM_50 6 0 0

1251 14 GraphicsOutput 0 26625 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 1011 0 73 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 2 1415 1416 0 2 3 1252 1007 1008 3 1232 1009 1010 0 2 1253 1254 1111
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutput
// Description : This is a base class for the various different
//               classes that represent the result of a frame of
//               rendering.  The most common kind of GraphicsOutput is
//               a GraphicsWindow, which is a real-time window on the
//               desktop, but another example is GraphicsBuffer, which
//               is an offscreen buffer.
//
//               The actual rendering, and anything associated with
//               the graphics context itself, is managed by the
//               associated GraphicsStateGuardian (which might output
//               to multiple GraphicsOutput objects).
//
//               GraphicsOutputs are not actually writable to bam
//               files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

1252 18 GraphicsOutputBase 0 2049 18 GraphicsOutputBase 18 GraphicsOutputBase 0 0 0 0 0 0 0 0 0 0 0 0 277
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutputBase
// Description : An abstract base class for GraphicsOutput, for all
//               the usual reasons.
////////////////////////////////////////////////////////////////////

1253 17 RenderTextureMode 0 794624 33 GraphicsOutput::RenderTextureMode 33 GraphicsOutput::RenderTextureMode 1251 0 0 0 0 0 0 0 0 0 7 8 RTM_none 24 GraphicsOutput::RTM_none 0 16 RTM_bind_or_copy 32 GraphicsOutput::RTM_bind_or_copy 1 16 RTM_copy_texture 32 GraphicsOutput::RTM_copy_texture 2 12 RTM_copy_ram 28 GraphicsOutput::RTM_copy_ram 3 26 RTM_triggered_copy_texture 42 GraphicsOutput::RTM_triggered_copy_texture 4 22 RTM_triggered_copy_ram 38 GraphicsOutput::RTM_triggered_copy_ram 5 16 RTM_bind_layered 32 GraphicsOutput::RTM_bind_layered 6 0 0

1254 9 FrameMode 0 794624 25 GraphicsOutput::FrameMode 25 GraphicsOutput::FrameMode 1251 0 0 0 0 0 0 0 0 0 3 9 FM_render 25 GraphicsOutput::FM_render 0 11 FM_parasite 27 GraphicsOutput::FM_parasite 1 10 FM_refresh 26 GraphicsOutput::FM_refresh 2 0 56
// There are many reasons to call begin_frame/end_frame.

1255 25 GraphicsWindowInputDevice 0 26625 25 GraphicsWindowInputDevice 25 GraphicsWindowInputDevice 0 0 0 0 1085 0 11 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 0 0 0 0 0 505
////////////////////////////////////////////////////////////////////
//       Class : GraphicsWindowInputDevice
// Description : This is a structure representing a single input
//               device that may be associated with a window.
//               Typically this will be a keyboard/mouse pair, and
//               there will be exactly one of these associated with
//               each window, but other variants are possible.
////////////////////////////////////////////////////////////////////

1256 9 TouchInfo 0 141313 9 TouchInfo 9 TouchInfo 0 0 0 0 1101 0 4 1097 1098 1099 1100 0 0 0 0 1 1257 226
////////////////////////////////////////////////////////////////////
//       Class : TouchInfo
// Description : Stores information for a single touch event.
////////////////////////////////////////////////////////////////////

1257 14 TouchInfoFlags 0 794624 25 TouchInfo::TouchInfoFlags 25 TouchInfo::TouchInfoFlags 1256 0 0 0 0 0 0 0 0 0 3 8 TIF_move 19 TouchInfo::TIF_move 1 8 TIF_down 19 TouchInfo::TIF_down 2 6 TIF_up 17 TouchInfo::TIF_up 4 0 0

1258 30 GraphicsWindowProcCallbackData 0 141313 30 GraphicsWindowProcCallbackData 30 GraphicsWindowProcCallbackData 0 0 0 0 1110 0 8 1102 1103 1104 1105 1106 1107 1108 1109 0 0 1 0 1259 0 0 0 0 408
////////////////////////////////////////////////////////////////////
//       Class : GraphicsWindowProcCallbackData
// Description : This specialization on CallbackData is passed when
//               the callback is initiated from from an implementation
//               of the GraphicsWindowProc class, such as PythonGraphicsWindowProc.
////////////////////////////////////////////////////////////////////

1259 12 CallbackData 0 2049 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : CallbackData
// Description : This is a generic data block that is passed along to
//               a CallbackObject when a callback is made.  It
//               contains data specific to the particular callback
//               type in question.
//
//               This is actually an abstract base class and contains
//               no data.  Specializations of this class will contain
//               the actual data relevant to each callback type.
////////////////////////////////////////////////////////////////////

1260 14 GraphicsWindow 0 75777 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 1011 0 29 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1 1417 0 1 0 1251 0 0 0 0 329
////////////////////////////////////////////////////////////////////
//       Class : GraphicsWindow
// Description : A window, fullscreen or on a desktop, into which a
//               graphics device sends its output for interactive
//               display.
////////////////////////////////////////////////////////////////////

1261 22 CallbackGraphicsWindow 0 75777 22 CallbackGraphicsWindow 22 CallbackGraphicsWindow 0 0 0 0 1011 0 12 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 0 0 1 0 1260 0 0 0 5 1262 1263 1264 1265 1266 545
////////////////////////////////////////////////////////////////////
//       Class : CallbackGraphicsWindow
// Description : This special window object doesn't represent a window
//               in its own right, but instead hooks into some
//               third-party API for creating and rendering to windows
//               via callbacks.  This can be used to allow Panda to
//               render into an already-created OpenGL context, for
//               instance.
////////////////////////////////////////////////////////////////////

1262 18 WindowCallbackData 0 403457 42 CallbackGraphicsWindow::WindowCallbackData 42 CallbackGraphicsWindow::WindowCallbackData 1261 0 0 0 1142 0 2 1140 1141 0 0 1 0 1259 0 0 0 0 0

1263 18 EventsCallbackData 0 403457 42 CallbackGraphicsWindow::EventsCallbackData 42 CallbackGraphicsWindow::EventsCallbackData 1261 0 0 0 1144 0 1 1143 0 0 1 0 1262 0 0 0 0 0

1264 22 PropertiesCallbackData 0 403457 46 CallbackGraphicsWindow::PropertiesCallbackData 46 CallbackGraphicsWindow::PropertiesCallbackData 1261 0 0 0 1147 0 2 1145 1146 0 0 1 0 1262 0 0 0 0 0

1265 18 RenderCallbackType 0 794624 42 CallbackGraphicsWindow::RenderCallbackType 42 CallbackGraphicsWindow::RenderCallbackType 1261 0 0 0 0 0 0 0 0 0 4 15 RCT_begin_frame 39 CallbackGraphicsWindow::RCT_begin_frame 0 13 RCT_end_frame 37 CallbackGraphicsWindow::RCT_end_frame 1 14 RCT_begin_flip 38 CallbackGraphicsWindow::RCT_begin_flip 2 12 RCT_end_flip 36 CallbackGraphicsWindow::RCT_end_flip 3 0 0

1266 18 RenderCallbackData 0 403457 42 CallbackGraphicsWindow::RenderCallbackData 42 CallbackGraphicsWindow::RenderCallbackData 1261 0 0 0 1153 0 5 1148 1149 1150 1151 1152 0 0 1 0 1262 0 0 0 0 0

1267 29 DisplayRegionCullCallbackData 0 141313 29 DisplayRegionCullCallbackData 29 DisplayRegionCullCallbackData 0 0 0 0 1169 0 3 1166 1167 1168 0 0 1 0 1259 0 0 0 0 358
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionCullCallbackData
// Description : This specialization on CallbackData is passed when
//               the callback is initiated from the cull traversal,
//               for a DisplayRegion.
////////////////////////////////////////////////////////////////////

1268 29 DisplayRegionDrawCallbackData 0 141313 29 DisplayRegionDrawCallbackData 29 DisplayRegionDrawCallbackData 0 0 0 0 1173 0 3 1170 1171 1172 0 0 1 0 1259 0 0 0 0 358
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionDrawCallbackData
// Description : This specialization on CallbackData is passed when
//               the callback is initiated from the draw traversal,
//               for a DisplayRegion.
////////////////////////////////////////////////////////////////////

1269 23 DisplaySearchParameters 0 26625 23 DisplaySearchParameters 23 DisplaySearchParameters 0 0 0 1 1174 1175 0 6 1176 1177 1178 1179 1180 1181 0 0 0 0 0 247
////////////////////////////////////////////////////////////////////
//       Class : DisplaySearchParameters
// Description : Parameters used for searching display capabilities.
////////////////////////////////////////////////////////////////////

1270 14 GraphicsBuffer 0 75777 14 GraphicsBuffer 14 GraphicsBuffer 0 0 0 0 1011 0 2 1182 1183 0 0 1 0 1251 0 0 0 0 361
////////////////////////////////////////////////////////////////////
//       Class : GraphicsBuffer
// Description : An offscreen buffer for rendering into.  This is
//               similar in function to a GraphicsWindow, except that
//               the output is not visible to the user.
////////////////////////////////////////////////////////////////////

1271 14 GraphicsEngine 0 75777 14 GraphicsEngine 14 GraphicsEngine 0 0 0 1 1184 0 0 25 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1 1418 0 1 0 1272 0 0 0 0 823
////////////////////////////////////////////////////////////////////
//       Class : GraphicsEngine
// Description : This class is the main interface to controlling the
//               render process.  There is typically only one
//               GraphicsEngine in an application, and it synchronizes
//               rendering to all all of the active windows; although
//               it is possible to have multiple GraphicsEngine
//               objects if multiple synchronicity groups are
//               required.
//
//               The GraphicsEngine is responsible for managing the
//               various cull and draw threads.  The application
//               simply calls engine->render_frame() and considers it
//               done.
////////////////////////////////////////////////////////////////////

1272 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

1273 21 GraphicsPipeSelection 0 43009 21 GraphicsPipeSelection 21 GraphicsPipeSelection 0 0 0 0 0 0 9 1210 1211 1212 1213 1214 1215 1216 1217 1218 1 1419 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : GraphicsPipeSelection
// Description : This maintains a list of GraphicsPipes by type that
//               are available for creation.  Normally there is one
//               default interactive GraphicsPipe, and possibly other
//               types available as well.
////////////////////////////////////////////////////////////////////

1274 18 NativeWindowHandle 0 141313 18 NativeWindowHandle 18 NativeWindowHandle 0 0 0 0 1222 0 3 1219 1220 1221 0 0 1 0 1234 0 0 0 0 510
////////////////////////////////////////////////////////////////////
//       Class : NativeWindowHandle
// Description : This subclass of WindowHandle exists to allow simple
//               creation of a WindowHandle of the appropriate type to
//               the current OS.
//
//               This class exists for name scoping only.  Don't use
//               the constructor directly; use one of the make_*
//               methods.
////////////////////////////////////////////////////////////////////

1275 14 ParasiteBuffer 0 75777 14 ParasiteBuffer 14 ParasiteBuffer 0 0 0 0 1011 0 2 1223 1224 0 0 1 0 1251 0 0 0 0 1508
////////////////////////////////////////////////////////////////////
//       Class : ParasiteBuffer
// Description : This is a special GraphicsOutput type that acts a lot
//               like a GraphicsBuffer, effectively allowing rendering
//               to an offscreen buffer, except it does not create any
//               framebuffer space for itself.  Instead, it renders
//               into the framebuffer owned by some other
//               GraphicsOutput.
//
//               The x_size and y_size must therefore fit within the
//               bounds of the source GraphicsOutput.
//
//               Since the framebuffer will be subsequently cleared
//               when the actual owner draws in it later, this only
//               makes sense if we are going to copy the contents of
//               the framebuffer to a texture immediately after we
//               draw it.  Thus, has_texture() is implicitly true for
//               a ParasiteBuffer.
//
//               This class is useful to render offscreen to a texture
//               while preventing the waste of framebuffer memory for
//               API's that are unable to render directly into a
//               texture (and must render into a separate framebuffer
//               first and then copy to texture).  It is also the only
//               way to render to a texture on API's that do not
//               support offscreen rendering.
////////////////////////////////////////////////////////////////////

1276 22 GraphicsDevice const * 0 8576 22 GraphicsDevice const * 22 GraphicsDevice const * 0 0 1277 0 0 0 0 0 0 0 0 0 0

1277 20 GraphicsDevice const 0 8832 20 GraphicsDevice const 20 GraphicsDevice const 0 0 1225 0 0 0 0 0 0 0 0 0 0

1278 14 GraphicsPipe * 0 8576 14 GraphicsPipe * 14 GraphicsPipe * 0 0 1229 0 0 0 0 0 0 0 0 0 0

1279 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1280 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1279 0 0 0 0 0 0 0 0 0 0

1281 20 DisplayInformation * 0 8576 20 DisplayInformation * 20 DisplayInformation * 0 0 1227 0 0 0 0 0 0 0 0 0 0

1282 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1283 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1284 16 unsigned __int64 0 8230 16 unsigned __int64 16 unsigned __int64 0 8 0 0 0 0 0 0 0 0 0 0 0

1285 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1286 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1287 20 GraphicsPipe const * 0 8576 20 GraphicsPipe const * 20 GraphicsPipe const * 0 0 1288 0 0 0 0 0 0 0 0 0 0

1288 18 GraphicsPipe const 0 8832 18 GraphicsPipe const 18 GraphicsPipe const 0 0 1229 0 0 0 0 0 0 0 0 0 0

1289 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1290 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1232 0 0 0 0 0 0 0 0 0 0

1291 22 DrawableRegion const * 0 8576 22 DrawableRegion const * 22 DrawableRegion const * 0 0 1292 0 0 0 0 0 0 0 0 0 0

1292 20 DrawableRegion const 0 8832 20 DrawableRegion const 20 DrawableRegion const 0 0 1232 0 0 0 0 0 0 0 0 0 0

1293 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1294 0 0 0 0 0 0 0 0 0 0

1294 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1295 0 0 0 0 0 0 0 0 0 0

1295 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1296 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1297 20 WindowHandle const * 0 8576 20 WindowHandle const * 20 WindowHandle const * 0 0 1298 0 0 0 0 0 0 0 0 0 0

1298 18 WindowHandle const 0 8832 18 WindowHandle const 18 WindowHandle const 0 0 1234 0 0 0 0 0 0 0 0 0 0

1299 14 WindowHandle * 0 8576 14 WindowHandle * 14 WindowHandle * 0 0 1234 0 0 0 0 0 0 0 0 0 0

1300 10 OSHandle * 0 8576 24 WindowHandle::OSHandle * 24 WindowHandle::OSHandle * 0 0 1235 0 0 0 0 0 0 0 0 0 0

1301 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1302 0 0 0 0 0 0 0 0 0 0

1302 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1303 16 OSHandle const * 0 8576 30 WindowHandle::OSHandle const * 30 WindowHandle::OSHandle const * 0 0 1304 0 0 0 0 0 0 0 0 0 0

1304 14 OSHandle const 0 8832 28 WindowHandle::OSHandle const 28 WindowHandle::OSHandle const 0 0 1235 0 0 0 0 0 0 0 0 0 0

1305 18 WindowProperties * 0 8576 18 WindowProperties * 18 WindowProperties * 0 0 1236 0 0 0 0 0 0 0 0 0 0

1306 24 WindowProperties const * 0 8576 24 WindowProperties const * 24 WindowProperties const * 0 0 1307 0 0 0 0 0 0 0 0 0 0

1307 22 WindowProperties const 0 8832 22 WindowProperties const 22 WindowProperties const 0 0 1236 0 0 0 0 0 0 0 0 0 0

1308 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1309 0 0 0 0 0 0 0 0 0 0

1309 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1310 0 0 0 0 0 0 0 0 0 0

1310 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

1311 21 DisplayRegion const * 0 8576 21 DisplayRegion const * 21 DisplayRegion const * 0 0 1312 0 0 0 0 0 0 0 0 0 0

1312 19 DisplayRegion const 0 8832 19 DisplayRegion const 19 DisplayRegion const 0 0 1239 0 0 0 0 0 0 0 0 0 0

1313 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 1295 0 0 0 0 0 0 0 0 0 0

1314 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1239 0 0 0 0 0 0 0 0 0 0

1315 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 1251 0 0 0 0 0 0 0 0 0 0

1316 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 1317 0 0 0 0 0 0 0 0 0 0

1317 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 1318 0 0 0 0 0 0 0 0 0 0

1318 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 1420 1421 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

1319 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 1320 0 0 0 0 0 0 0 0 0 0

1320 6 Thread 0 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Thread
// Description : A thread; that is, a lightweight process.  This is an
//               abstract base class; to use it, you must subclass
//               from it and redefine thread_main().
//
//               The thread itself will keep a reference count on the
//               Thread object while it is running; when the thread
//               returns from its root function, the Thread object
//               will automatically be destructed if no other pointers
//               are referencing it.
////////////////////////////////////////////////////////////////////

1321 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 1318 0 0 0 0 0 0 0 0 0 0

1322 13 StereoChannel 0 794624 19 Lens::StereoChannel 19 Lens::StereoChannel 1323 0 0 0 0 0 0 0 0 0 4 7 SC_mono 13 Lens::SC_mono 0 7 SC_left 13 Lens::SC_left 1 8 SC_right 14 Lens::SC_right 2 9 SC_stereo 15 Lens::SC_stereo 3 0 0

1323 4 Lens 0 2048 4 Lens 4 Lens 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Lens
// Description : A base class for any number of different kinds of
//               lenses, linear and otherwise.  Presently, this
//               includes perspective and orthographic lenses.
//
//               A Lens object is the main part of a Camera node,
//               which defines the fundamental interface to
//               point-of-view for rendering.  Lenses are also used in
//               other contexts, however; for instance, a Spotlight is
//               also defined using a lens.
////////////////////////////////////////////////////////////////////

1324 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 1325 0 0 0 0 0 0 0 0 0 0

1325 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 512
////////////////////////////////////////////////////////////////////
//       Class : CullTraverser
// Description : This object performs a depth-first traversal of the
//               scene graph, with optional view-frustum culling,
//               collecting CullState and searching for GeomNodes.
//               Each renderable Geom encountered is passed along with
//               its associated RenderState to the CullHandler object.
////////////////////////////////////////////////////////////////////

1326 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1327 0 0 0 0 0 0 0 0 0 0

1327 14 CallbackObject 0 2048 14 CallbackObject 14 CallbackObject 0 0 0 0 0 0 0 0 0 0 0 0 527
////////////////////////////////////////////////////////////////////
//       Class : CallbackObject
// Description : This is a generic object that can be assigned to a
//               callback at various points in the rendering process.
//               This is actually a base class for a handful of
//               specialized callback object types.  You can also
//               subclass it yourself to make your own callback
//               handler.
////////////////////////////////////////////////////////////////////

1328 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1310 0 0 0 0 0 0 0 0 0 0

1329 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

1330 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 1329 0 0 0 0 0 0 0 0 0 0

1331 10 PNMImage * 0 8576 10 PNMImage * 10 PNMImage * 0 0 1332 0 0 0 0 0 0 0 0 0 0

1332 8 PNMImage 0 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 0 1506
////////////////////////////////////////////////////////////////////
//       Class : PNMImage
// Description : The name of this class derives from the fact that we
//               originally implemented it as a layer on top of the
//               "pnm library", based on netpbm, which was built to
//               implement pbm, pgm, and pbm files, and is the
//               underlying support of a number of public-domain image
//               file converters.  Nowadays we are no longer derived
//               directly from the pnm library, mainly to allow
//               support of C++ iostreams instead of the C stdio FILE
//               interface.
//
//               Conceptually, a PNMImage is a two-dimensional array
//               of xels, which are the PNM-defined generic pixel
//               type.  Each xel may have a red, green, and blue
//               component, or (if the image is grayscale) a gray
//               component.  The image may be read in, the individual
//               xels manipulated, and written out again, or a black
//               image may be constructed from scratch.
//
//               The image is of size XSize() by YSize() xels,
//               numbered from top to bottom, left to right, beginning
//               at zero.
//
//               Files can be specified by filename, or by an iostream
//               pointer.  The filename "-" refers to stdin or stdout.
////////////////////////////////////////////////////////////////////

1333 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

1334 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 1333 0 0 0 0 0 0 0 0 0 0

1335 19 DisplayRegionBase * 0 8576 19 DisplayRegionBase * 19 DisplayRegionBase * 0 0 1240 0 0 0 0 0 0 0 0 0 0

1336 21 StereoDisplayRegion * 0 8576 21 StereoDisplayRegion * 21 StereoDisplayRegion * 0 0 1241 0 0 0 0 0 0 0 0 0 0

1337 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 1242 0 0 0 0 0 0 0 0 0 0

1338 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 1339 0 0 0 0 0 0 0 0 0 0

1339 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 1242 0 0 0 0 0 0 0 0 0 0

1340 30 GraphicsThreadingModel const * 0 8576 30 GraphicsThreadingModel const * 30 GraphicsThreadingModel const * 0 0 1341 0 0 0 0 0 0 0 0 0 0

1341 28 GraphicsThreadingModel const 0 8832 28 GraphicsThreadingModel const 28 GraphicsThreadingModel const 0 0 1243 0 0 0 0 0 0 0 0 0 0

1342 24 GraphicsThreadingModel * 0 8576 24 GraphicsThreadingModel * 24 GraphicsThreadingModel * 0 0 1243 0 0 0 0 0 0 0 0 0 0

1343 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 1248 0 0 0 0 0 0 0 0 0 0

1344 29 GraphicsStateGuardian const * 0 8576 29 GraphicsStateGuardian const * 29 GraphicsStateGuardian const * 0 0 1345 0 0 0 0 0 0 0 0 0 0

1345 27 GraphicsStateGuardian const 0 8832 27 GraphicsStateGuardian const 27 GraphicsStateGuardian const 0 0 1248 0 0 0 0 0 0 0 0 0 0

1346 8 Loader * 0 8576 8 Loader * 8 Loader * 0 0 1347 0 0 0 0 0 0 0 0 0 0

1347 6 Loader 0 2048 6 Loader 6 Loader 0 0 0 0 0 0 0 0 0 0 0 0 819
////////////////////////////////////////////////////////////////////
//       Class : Loader
// Description : A convenient class for loading models from disk, in
//               bam or egg format (or any of a number of other
//               formats implemented by a LoaderFileType, such as
//               ptloader).
//
//               This class supports synchronous as well as
//               asynchronous loading.  In asynchronous loading, the
//               model is loaded in the background by a thread, and an
//               event will be generated when the model is available.
//               If threading is not available, the asynchronous
//               loading interface may be used, but it loads
//               synchronously.
////////////////////////////////////////////////////////////////////

1348 16 GraphicsEngine * 0 8576 16 GraphicsEngine * 16 GraphicsEngine * 0 0 1271 0 0 0 0 0 0 0 0 0 0

1349 21 TextureAttrib const * 0 8576 21 TextureAttrib const * 21 TextureAttrib const * 0 0 1350 0 0 0 0 0 0 0 0 0 0

1350 19 TextureAttrib const 0 8832 19 TextureAttrib const 19 TextureAttrib const 0 0 1351 0 0 0 0 0 0 0 0 0 0

1351 13 TextureAttrib 0 2048 13 TextureAttrib 13 TextureAttrib 0 0 0 0 0 0 0 3 1422 1423 1424 0 0 0 0 336
////////////////////////////////////////////////////////////////////
//       Class : TextureAttrib
// Description : Indicates the set of TextureStages and their
//               associated Textures that should be applied to (or
//               removed from) a node.
////////////////////////////////////////////////////////////////////

1352 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 600
////////////////////////////////////////////////////////////////////
//       Class : TextureStage
// Description : Defines the properties of a named stage of the
//               multitexture pipeline.  The TextureAttrib will
//               associated a number of these stages with Texture
//               objects, and the GSG will render geometry by sorting
//               all of the currently active TextureStages in order
//               and then issuing the appropriate rendering calls to
//               activate them.
////////////////////////////////////////////////////////////////////

1353 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 1352 0 0 0 0 0 0 0 0 0 0

1354 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

1355 23 PreparedGraphicsObjects 0 2048 23 PreparedGraphicsObjects 23 PreparedGraphicsObjects 0 0 0 0 0 0 0 0 0 0 0 0 1037
////////////////////////////////////////////////////////////////////
//       Class : PreparedGraphicsObjects
// Description : A table of objects that are saved within the graphics
//               context for reference by handle later.  Generally,
//               this represents things like OpenGL texture objects or
//               display lists (or their equivalent on other
//               platforms).
//
//               This object simply records the pointers to the
//               context objects created by the individual GSG's;
//               these context objects will contain enough information
//               to reference or release the actual object stored
//               within the graphics context.
//
//               These tables may potentially be shared between
//               related graphics contexts, hence their storage here
//               in a separate object rather than as a part of the
//               GraphicsStateGuardian.
////////////////////////////////////////////////////////////////////

1356 25 PreparedGraphicsObjects * 0 8576 25 PreparedGraphicsObjects * 25 PreparedGraphicsObjects * 0 0 1355 0 0 0 0 0 0 0 0 0 0

1357 12 QualityLevel 0 794624 21 Texture::QualityLevel 21 Texture::QualityLevel 1329 0 0 0 0 0 0 0 0 0 4 10 QL_default 19 Texture::QL_default 0 10 QL_fastest 19 Texture::QL_fastest 1 9 QL_normal 18 Texture::QL_normal 2 7 QL_best 16 Texture::QL_best 3 0 0

1358 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1359 0 0 0 0 0 0 0 0 0 0

1359 8 PyObject 0 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

1360 12 SceneSetup * 0 8576 12 SceneSetup * 12 SceneSetup * 0 0 1361 0 0 0 0 0 0 0 0 0 0

1361 10 SceneSetup 0 2048 10 SceneSetup 10 SceneSetup 0 0 0 0 0 0 0 0 0 0 0 0 331
////////////////////////////////////////////////////////////////////
//       Class : SceneSetup
// Description : This object holds the camera position, etc., and
//               other general setup information for rendering a
//               particular scene.
////////////////////////////////////////////////////////////////////

1362 22 GraphicsOutput const * 0 8576 22 GraphicsOutput const * 22 GraphicsOutput const * 0 0 1363 0 0 0 0 0 0 0 0 0 0

1363 20 GraphicsOutput const 0 8832 20 GraphicsOutput const 20 GraphicsOutput const 0 0 1251 0 0 0 0 0 0 0 0 0 0

1364 29 BitMask< unsigned int, 32 > * 0 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 1365 0 0 0 0 0 0 0 0 0 0

1365 9 BitMask32 0 2048 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1366 20 GraphicsOutputBase * 0 8576 20 GraphicsOutputBase * 20 GraphicsOutputBase * 0 0 1252 0 0 0 0 0 0 0 0 0 0

1367 27 GraphicsWindowInputDevice * 0 8576 27 GraphicsWindowInputDevice * 27 GraphicsWindowInputDevice * 0 0 1255 0 0 0 0 0 0 0 0 0 0

1368 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 1369 0 0 0 0 0 0 0 0 0 0

1369 12 ButtonHandle 0 2048 12 ButtonHandle 12 ButtonHandle 0 0 0 0 0 0 0 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

1370 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1371 11 TouchInfo * 0 8576 11 TouchInfo * 11 TouchInfo * 0 0 1256 0 0 0 0 0 0 0 0 0 0

1372 38 GraphicsWindowProcCallbackData const * 0 8576 38 GraphicsWindowProcCallbackData const * 38 GraphicsWindowProcCallbackData const * 0 0 1373 0 0 0 0 0 0 0 0 0 0

1373 36 GraphicsWindowProcCallbackData const 0 8832 36 GraphicsWindowProcCallbackData const 36 GraphicsWindowProcCallbackData const 0 0 1258 0 0 0 0 0 0 0 0 0 0

1374 32 GraphicsWindowProcCallbackData * 0 8576 32 GraphicsWindowProcCallbackData * 32 GraphicsWindowProcCallbackData * 0 0 1258 0 0 0 0 0 0 0 0 0 0

1375 22 GraphicsWindow const * 0 8576 22 GraphicsWindow const * 22 GraphicsWindow const * 0 0 1376 0 0 0 0 0 0 0 0 0 0

1376 20 GraphicsWindow const 0 8832 20 GraphicsWindow const 20 GraphicsWindow const 0 0 1260 0 0 0 0 0 0 0 0 0 0

1377 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 1260 0 0 0 0 0 0 0 0 0 0

1378 9 ButtonMap 0 2048 9 ButtonMap 9 ButtonMap 0 0 0 0 0 0 0 0 0 0 0 0 571
////////////////////////////////////////////////////////////////////
//       Class : ButtonMap
// Description : This class represents a map containing all of the
//               buttons of a (keyboard) device, though it can also
//               be used as a generic mapping between ButtonHandles.
//               It maps an underlying 'raw' button to a 'virtual'
//               button, which may optionally be associated with an
//               appropriate platform-specific name for the button.
////////////////////////////////////////////////////////////////////

1379 11 ButtonMap * 0 8576 11 ButtonMap * 11 ButtonMap * 0 0 1378 0 0 0 0 0 0 0 0 0 0

1380 9 MouseData 0 2048 9 MouseData 9 MouseData 0 0 0 0 0 0 0 0 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : MouseData
// Description : Holds the data that might be generated by a 2-d
//               pointer input device, such as the mouse in the
//               GraphicsWindow.
////////////////////////////////////////////////////////////////////

1381 11 MouseData * 0 8576 11 MouseData * 11 MouseData * 0 0 1380 0 0 0 0 0 0 0 0 0 0

1382 24 CallbackGraphicsWindow * 0 8576 24 CallbackGraphicsWindow * 24 CallbackGraphicsWindow * 0 0 1261 0 0 0 0 0 0 0 0 0 0

1383 30 CallbackGraphicsWindow const * 0 8576 30 CallbackGraphicsWindow const * 30 CallbackGraphicsWindow const * 0 0 1384 0 0 0 0 0 0 0 0 0 0

1384 28 CallbackGraphicsWindow const 0 8832 28 CallbackGraphicsWindow const 28 CallbackGraphicsWindow const 0 0 1261 0 0 0 0 0 0 0 0 0 0

1385 26 WindowCallbackData const * 0 8576 50 CallbackGraphicsWindow::WindowCallbackData const * 50 CallbackGraphicsWindow::WindowCallbackData const * 0 0 1386 0 0 0 0 0 0 0 0 0 0

1386 24 WindowCallbackData const 0 8832 48 CallbackGraphicsWindow::WindowCallbackData const 48 CallbackGraphicsWindow::WindowCallbackData const 0 0 1262 0 0 0 0 0 0 0 0 0 0

1387 30 PropertiesCallbackData const * 0 8576 54 CallbackGraphicsWindow::PropertiesCallbackData const * 54 CallbackGraphicsWindow::PropertiesCallbackData const * 0 0 1388 0 0 0 0 0 0 0 0 0 0

1388 28 PropertiesCallbackData const 0 8832 52 CallbackGraphicsWindow::PropertiesCallbackData const 52 CallbackGraphicsWindow::PropertiesCallbackData const 0 0 1264 0 0 0 0 0 0 0 0 0 0

1389 26 RenderCallbackData const * 0 8576 50 CallbackGraphicsWindow::RenderCallbackData const * 50 CallbackGraphicsWindow::RenderCallbackData const * 0 0 1390 0 0 0 0 0 0 0 0 0 0

1390 24 RenderCallbackData const 0 8832 48 CallbackGraphicsWindow::RenderCallbackData const 48 CallbackGraphicsWindow::RenderCallbackData const 0 0 1266 0 0 0 0 0 0 0 0 0 0

1391 20 RenderCallbackData * 0 8576 44 CallbackGraphicsWindow::RenderCallbackData * 44 CallbackGraphicsWindow::RenderCallbackData * 0 0 1266 0 0 0 0 0 0 0 0 0 0

1392 37 DisplayRegionCullCallbackData const * 0 8576 37 DisplayRegionCullCallbackData const * 37 DisplayRegionCullCallbackData const * 0 0 1393 0 0 0 0 0 0 0 0 0 0

1393 35 DisplayRegionCullCallbackData const 0 8832 35 DisplayRegionCullCallbackData const 35 DisplayRegionCullCallbackData const 0 0 1267 0 0 0 0 0 0 0 0 0 0

1394 13 CullHandler * 0 8576 13 CullHandler * 13 CullHandler * 0 0 1395 0 0 0 0 0 0 0 0 0 0

1395 11 CullHandler 0 2048 11 CullHandler 11 CullHandler 0 0 0 0 0 0 0 0 0 0 0 0 0

1396 10 CullResult 0 2048 10 CullResult 10 CullResult 0 0 0 0 0 0 0 0 0 0 0 0 611
////////////////////////////////////////////////////////////////////
//       Class : CullResult
// Description : This stores the result of a BinCullHandler traversal:
//               an ordered collection of CullBins, each of which
//               holds a number of Geoms and RenderStates to be
//               rendered in some defined order.
//
//               This is also used to keep the results of last frame's
//               cull traversal around to make next frame's traversal
//               of the same scene a little easier.
////////////////////////////////////////////////////////////////////

1397 37 DisplayRegionDrawCallbackData const * 0 8576 37 DisplayRegionDrawCallbackData const * 37 DisplayRegionDrawCallbackData const * 0 0 1398 0 0 0 0 0 0 0 0 0 0

1398 35 DisplayRegionDrawCallbackData const 0 8832 35 DisplayRegionDrawCallbackData const 35 DisplayRegionDrawCallbackData const 0 0 1268 0 0 0 0 0 0 0 0 0 0

1399 12 CullResult * 0 8576 12 CullResult * 12 CullResult * 0 0 1396 0 0 0 0 0 0 0 0 0 0

1400 25 DisplaySearchParameters * 0 8576 25 DisplaySearchParameters * 25 DisplaySearchParameters * 0 0 1269 0 0 0 0 0 0 0 0 0 0

1401 16 GraphicsBuffer * 0 8576 16 GraphicsBuffer * 16 GraphicsBuffer * 0 0 1270 0 0 0 0 0 0 0 0 0 0

1402 10 Pipeline * 0 8576 10 Pipeline * 10 Pipeline * 0 0 1403 0 0 0 0 0 0 0 0 0 0

1403 8 Pipeline 0 2048 8 Pipeline 8 Pipeline 0 0 0 0 0 0 0 0 0 0 0 0 0

1404 22 GraphicsEngine const * 0 8576 22 GraphicsEngine const * 22 GraphicsEngine const * 0 0 1405 0 0 0 0 0 0 0 0 0 0

1405 20 GraphicsEngine const 0 8832 20 GraphicsEngine const 20 GraphicsEngine const 0 0 1271 0 0 0 0 0 0 0 0 0 0

1406 15 ReMutex const * 0 8576 15 ReMutex const * 15 ReMutex const * 0 0 1407 0 0 0 0 0 0 0 0 0 0

1407 13 ReMutex const 0 8832 13 ReMutex const 13 ReMutex const 0 0 1408 0 0 0 0 0 0 0 0 0 0

1408 7 ReMutex 0 2048 7 ReMutex 7 ReMutex 0 0 0 0 0 0 0 0 0 0 0 0 0

1409 29 GraphicsPipeSelection const * 0 8576 29 GraphicsPipeSelection const * 29 GraphicsPipeSelection const * 0 0 1410 0 0 0 0 0 0 0 0 0 0

1410 27 GraphicsPipeSelection const 0 8832 27 GraphicsPipeSelection const 27 GraphicsPipeSelection const 0 0 1273 0 0 0 0 0 0 0 0 0 0

1411 23 GraphicsPipeSelection * 0 8576 23 GraphicsPipeSelection * 23 GraphicsPipeSelection * 0 0 1273 0 0 0 0 0 0 0 0 0 0

1412 16 ParasiteBuffer * 0 8576 16 ParasiteBuffer * 16 ParasiteBuffer * 0 0 1275 0 0 0 0 0 0 0 0 0 0

1413 6 string 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
11
1414 0 0 326 8 get_gsgs 12 get_num_gsgs 7 get_gsg 
1415 0 0 406 19 get_display_regions 23 get_num_display_regions 18 get_display_region 
1416 0 0 406 26 get_active_display_regions 30 get_num_active_display_regions 25 get_active_display_region 
1417 0 0 519 22 get_input_device_names 21 get_num_input_devices 21 get_input_device_name 
1418 0 0 603 11 get_windows 15 get_num_windows 10 get_window 
1419 0 0 631 14 get_pipe_types 18 get_num_pipe_types 13 get_pipe_type 
1420 0 0 883 9 get_nodes 13 get_num_nodes 8 get_node 
1421 0 0 883 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
1422 0 0 1082 13 get_on_stages 17 get_num_on_stages 12 get_on_stage 
1423 0 0 1082 16 get_on_ff_stages 20 get_num_on_ff_stages 15 get_on_ff_stage 
1424 0 0 1082 14 get_off_stages 18 get_num_off_stages 13 get_off_stage 
